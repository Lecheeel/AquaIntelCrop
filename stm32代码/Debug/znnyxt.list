
znnyxt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008820  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d44  08008930  08008930  00009930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009674  08009674  0000b05c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800967c  0800967c  0000b05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800967c  0800967c  0000a67c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009680  08009680  0000a680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08009684  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008ac  2000005c  080096e0  0000b05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000908  080096e0  0000b908  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013464  00000000  00000000  0000b085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e11  00000000  00000000  0001e4e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00021300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e3d  00000000  00000000  00022520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000197f8  00000000  00000000  0002335d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016eed  00000000  00000000  0003cb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093492  00000000  00000000  00053a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e6ed4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000585c  00000000  00000000  000e6f18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000ec774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	2000005c 	.word	0x2000005c
 800012c:	00000000 	.word	0x00000000
 8000130:	08008918 	.word	0x08008918

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000060 	.word	0x20000060
 800014c:	08008918 	.word	0x08008918

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <__aeabi_f2uiz>:
 80010e0:	0042      	lsls	r2, r0, #1
 80010e2:	d20e      	bcs.n	8001102 <__aeabi_f2uiz+0x22>
 80010e4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010e8:	d30b      	bcc.n	8001102 <__aeabi_f2uiz+0x22>
 80010ea:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010ee:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010f2:	d409      	bmi.n	8001108 <__aeabi_f2uiz+0x28>
 80010f4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010fc:	fa23 f002 	lsr.w	r0, r3, r2
 8001100:	4770      	bx	lr
 8001102:	f04f 0000 	mov.w	r0, #0
 8001106:	4770      	bx	lr
 8001108:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 800110c:	d101      	bne.n	8001112 <__aeabi_f2uiz+0x32>
 800110e:	0242      	lsls	r2, r0, #9
 8001110:	d102      	bne.n	8001118 <__aeabi_f2uiz+0x38>
 8001112:	f04f 30ff 	mov.w	r0, #4294967295
 8001116:	4770      	bx	lr
 8001118:	f04f 0000 	mov.w	r0, #0
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop

08001120 <goToOutput>:
#define lineDown() 		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_RESET)
#define lineUp()		HAL_GPIO_WritePin(sensor->DHT_Port, sensor->DHT_Pin, GPIO_PIN_SET)
#define getLine()		(HAL_GPIO_ReadPin(sensor->DHT_Port, sensor->DHT_Pin) == GPIO_PIN_SET)
#define Delay(d)		HAL_Delay(d)

static void goToOutput(DHT_sensor *sensor) {
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]

  //По умолчанию на линии высокий уровень
  lineUp();
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	889b      	ldrh	r3, [r3, #4]
 800113e:	2201      	movs	r2, #1
 8001140:	4619      	mov	r1, r3
 8001142:	f003 fb9e 	bl	8004882 <HAL_GPIO_WritePin>

  //Настройка порта на выход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	889b      	ldrh	r3, [r3, #4]
 800114a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; 	//Открытый сток
 800114c:	2311      	movs	r3, #17
 800114e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	79db      	ldrb	r3, [r3, #7]
 8001154:	613b      	str	r3, [r7, #16]

  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8001156:	2303      	movs	r3, #3
 8001158:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f107 0208 	add.w	r2, r7, #8
 8001162:	4611      	mov	r1, r2
 8001164:	4618      	mov	r0, r3
 8001166:	f003 f9f1 	bl	800454c <HAL_GPIO_Init>
}
 800116a:	bf00      	nop
 800116c:	3718      	adds	r7, #24
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <goToInput>:

static void goToInput(DHT_sensor *sensor) {
 8001172:	b580      	push	{r7, lr}
 8001174:	b086      	sub	sp, #24
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0308 	add.w	r3, r7, #8
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]

  //Настройка порта на вход 
  GPIO_InitStruct.Pin = sensor->DHT_Pin;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	889b      	ldrh	r3, [r3, #4]
 800118c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = sensor->pullUp;		//Подтяжка к питанию
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	79db      	ldrb	r3, [r3, #7]
 8001196:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(sensor->DHT_Port, &GPIO_InitStruct);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f107 0208 	add.w	r2, r7, #8
 80011a0:	4611      	mov	r1, r2
 80011a2:	4618      	mov	r0, r3
 80011a4:	f003 f9d2 	bl	800454c <HAL_GPIO_Init>
}
 80011a8:	bf00      	nop
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <DHT_getData>:

DHT_data DHT_getData(DHT_sensor *sensor) {
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
	DHT_data data = {-128.0f, -128.0f};
 80011ba:	4a75      	ldr	r2, [pc, #468]	@ (8001390 <DHT_getData+0x1e0>)
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011c4:	e883 0003 	stmia.w	r3, {r0, r1}
	
	#if DHT_POLLING_CONTROL == 1
	/* Ограничение по частоте опроса датчика */
	//Определение интервала опроса в зависимости от датчика
	uint16_t pollingInterval;
	if (sensor->type == DHT11) {
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	799b      	ldrb	r3, [r3, #6]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <DHT_getData+0x28>
		pollingInterval = DHT_POLLING_INTERVAL_DHT11;
 80011d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80011d6:	e002      	b.n	80011de <DHT_getData+0x2e>
	} else {
		pollingInterval = DHT_POLLING_INTERVAL_DHT22;
 80011d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}

	//Если интервал маленький, то возврат последнего удачного значения
	if ((HAL_GetTick() - sensor->lastPollingTime < pollingInterval) && sensor->lastPollingTime != 0) {
 80011de:	f002 fac1 	bl	8003764 <HAL_GetTick>
 80011e2:	4602      	mov	r2, r0
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	1ad2      	subs	r2, r2, r3
 80011ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80011ec:	429a      	cmp	r2, r3
 80011ee:	d212      	bcs.n	8001216 <DHT_getData+0x66>
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d00e      	beq.n	8001216 <DHT_getData+0x66>
		data.hum = sensor->lastHum;
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	691b      	ldr	r3, [r3, #16]
 80011fc:	617b      	str	r3, [r7, #20]
		data.temp = sensor->lastTemp;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	61bb      	str	r3, [r7, #24]
		return data;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	461a      	mov	r2, r3
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001210:	e882 0003 	stmia.w	r2, {r0, r1}
 8001214:	e162      	b.n	80014dc <DHT_getData+0x32c>
	}
	sensor->lastPollingTime = HAL_GetTick()+1;
 8001216:	f002 faa5 	bl	8003764 <HAL_GetTick>
 800121a:	4603      	mov	r3, r0
 800121c:	1c5a      	adds	r2, r3, #1
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	609a      	str	r2, [r3, #8]
	#endif

	/* Запрос данных у датчика */
	//Перевод пина "на выход"
	goToOutput(sensor);
 8001222:	6838      	ldr	r0, [r7, #0]
 8001224:	f7ff ff7c 	bl	8001120 <goToOutput>
	//Опускание линии данных на 18 мс
	lineDown();
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	6818      	ldr	r0, [r3, #0]
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	889b      	ldrh	r3, [r3, #4]
 8001230:	2200      	movs	r2, #0
 8001232:	4619      	mov	r1, r3
 8001234:	f003 fb25 	bl	8004882 <HAL_GPIO_WritePin>
	Delay(18);
 8001238:	2012      	movs	r0, #18
 800123a:	f002 fa9d 	bl	8003778 <HAL_Delay>
	//Подъём линии, перевод порта "на вход"
	lineUp();
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	6818      	ldr	r0, [r3, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	889b      	ldrh	r3, [r3, #4]
 8001246:	2201      	movs	r2, #1
 8001248:	4619      	mov	r1, r3
 800124a:	f003 fb1a 	bl	8004882 <HAL_GPIO_WritePin>
	goToInput(sensor);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7ff ff8f 	bl	8001172 <goToInput>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001254:	b672      	cpsid	i
}
 8001256:	bf00      	nop
	#ifdef DHT_IRQ_CONTROL
	//Выключение прерываний, чтобы ничто не мешало обработке данных
	__disable_irq();
	#endif
	/* Ожидание ответа от датчика */
	uint16_t timeout = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 800125c:	e01a      	b.n	8001294 <DHT_getData+0xe4>
		timeout++;
 800125e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001260:	3301      	adds	r3, #1
 8001262:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001264:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001266:	f242 7210 	movw	r2, #10000	@ 0x2710
 800126a:	4293      	cmp	r3, r2
 800126c:	d912      	bls.n	8001294 <DHT_getData+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 800126e:	b662      	cpsie	i
}
 8001270:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001278:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 8001280:	60da      	str	r2, [r3, #12]

			return data;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	461a      	mov	r2, r3
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800128e:	e882 0003 	stmia.w	r2, {r0, r1}
 8001292:	e123      	b.n	80014dc <DHT_getData+0x32c>
	while(getLine()) {
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	889b      	ldrh	r3, [r3, #4]
 800129c:	4619      	mov	r1, r3
 800129e:	4610      	mov	r0, r2
 80012a0:	f003 fad8 	bl	8004854 <HAL_GPIO_ReadPin>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d0d9      	beq.n	800125e <DHT_getData+0xae>
		}
	}
	timeout = 0;
 80012aa:	2300      	movs	r3, #0
 80012ac:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание подъёма
	while(!getLine()) {
 80012ae:	e01a      	b.n	80012e6 <DHT_getData+0x136>
		timeout++;
 80012b0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012b2:	3301      	adds	r3, #1
 80012b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 80012b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80012b8:	f242 7210 	movw	r2, #10000	@ 0x2710
 80012bc:	4293      	cmp	r3, r2
 80012be:	d912      	bls.n	80012e6 <DHT_getData+0x136>
  __ASM volatile ("cpsie i" : : : "memory");
 80012c0:	b662      	cpsie	i
}
 80012c2:	bf00      	nop
			__enable_irq();
			#endif
			//Если датчик не отозвался, значит его точно нет
			//Обнуление последнего удачного значения, чтобы
			//не получать фантомные значения
			sensor->lastHum = -128.0f;
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80012ca:	611a      	str	r2, [r3, #16]
			sensor->lastTemp = -128.0f;
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	f04f 4243 	mov.w	r2, #3271557120	@ 0xc3000000
 80012d2:	60da      	str	r2, [r3, #12]

			return data;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	461a      	mov	r2, r3
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80012e0:	e882 0003 	stmia.w	r2, {r0, r1}
 80012e4:	e0fa      	b.n	80014dc <DHT_getData+0x32c>
	while(!getLine()) {
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	889b      	ldrh	r3, [r3, #4]
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f003 faaf 	bl	8004854 <HAL_GPIO_ReadPin>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b01      	cmp	r3, #1
 80012fa:	d1d9      	bne.n	80012b0 <DHT_getData+0x100>
		}
	}
	timeout = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
	//Ожидание спада
	while(getLine()) {
 8001300:	e012      	b.n	8001328 <DHT_getData+0x178>
		timeout++;
 8001302:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001304:	3301      	adds	r3, #1
 8001306:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (timeout > DHT_TIMEOUT) {
 8001308:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800130a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800130e:	4293      	cmp	r3, r2
 8001310:	d90a      	bls.n	8001328 <DHT_getData+0x178>
  __ASM volatile ("cpsie i" : : : "memory");
 8001312:	b662      	cpsie	i
}
 8001314:	bf00      	nop
			#ifdef DHT_IRQ_CONTROL
			__enable_irq();
			#endif
			return data;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001322:	e882 0003 	stmia.w	r2, {r0, r1}
 8001326:	e0d9      	b.n	80014dc <DHT_getData+0x32c>
	while(getLine()) {
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	889b      	ldrh	r3, [r3, #4]
 8001330:	4619      	mov	r1, r3
 8001332:	4610      	mov	r0, r2
 8001334:	f003 fa8e 	bl	8004854 <HAL_GPIO_ReadPin>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d0e1      	beq.n	8001302 <DHT_getData+0x152>
		}
	}
	
	/* Чтение ответа от датчика */
	uint8_t rawData[5] = {0,0,0,0,0};
 800133e:	f107 030c 	add.w	r3, r7, #12
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	711a      	strb	r2, [r3, #4]
	for(uint8_t a = 0; a < 5; a++) {
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800134e:	e05c      	b.n	800140a <DHT_getData+0x25a>
		for(uint8_t b = 7; b != 255; b--) {
 8001350:	2307      	movs	r3, #7
 8001352:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001356:	e04f      	b.n	80013f8 <DHT_getData+0x248>
			uint16_t hT = 0, lT = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	843b      	strh	r3, [r7, #32]
 800135c:	2300      	movs	r3, #0
 800135e:	83fb      	strh	r3, [r7, #30]
			//Пока линия в низком уровне, инкремент переменной lT
			while(!getLine() && lT != 65535) lT++;
 8001360:	e002      	b.n	8001368 <DHT_getData+0x1b8>
 8001362:	8bfb      	ldrh	r3, [r7, #30]
 8001364:	3301      	adds	r3, #1
 8001366:	83fb      	strh	r3, [r7, #30]
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	889b      	ldrh	r3, [r3, #4]
 8001370:	4619      	mov	r1, r3
 8001372:	4610      	mov	r0, r2
 8001374:	f003 fa6e 	bl	8004854 <HAL_GPIO_ReadPin>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d004      	beq.n	8001388 <DHT_getData+0x1d8>
 800137e:	8bfb      	ldrh	r3, [r7, #30]
 8001380:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001384:	4293      	cmp	r3, r2
 8001386:	d1ec      	bne.n	8001362 <DHT_getData+0x1b2>
			//Пока линия в высоком уровне, инкремент переменной hT
			timeout = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	84bb      	strh	r3, [r7, #36]	@ 0x24
			while(getLine()&& hT != 65535) hT++;
 800138c:	e005      	b.n	800139a <DHT_getData+0x1ea>
 800138e:	bf00      	nop
 8001390:	08008930 	.word	0x08008930
 8001394:	8c3b      	ldrh	r3, [r7, #32]
 8001396:	3301      	adds	r3, #1
 8001398:	843b      	strh	r3, [r7, #32]
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	889b      	ldrh	r3, [r3, #4]
 80013a2:	4619      	mov	r1, r3
 80013a4:	4610      	mov	r0, r2
 80013a6:	f003 fa55 	bl	8004854 <HAL_GPIO_ReadPin>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d104      	bne.n	80013ba <DHT_getData+0x20a>
 80013b0:	8c3b      	ldrh	r3, [r7, #32]
 80013b2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d1ec      	bne.n	8001394 <DHT_getData+0x1e4>
			//Если hT больше lT, то пришла единица
			if(hT > lT) rawData[a] |= (1<<b);
 80013ba:	8c3a      	ldrh	r2, [r7, #32]
 80013bc:	8bfb      	ldrh	r3, [r7, #30]
 80013be:	429a      	cmp	r2, r3
 80013c0:	d915      	bls.n	80013ee <DHT_getData+0x23e>
 80013c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013c6:	3328      	adds	r3, #40	@ 0x28
 80013c8:	443b      	add	r3, r7
 80013ca:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 80013ce:	b25a      	sxtb	r2, r3
 80013d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013d4:	2101      	movs	r1, #1
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	b25b      	sxtb	r3, r3
 80013dc:	4313      	orrs	r3, r2
 80013de:	b25a      	sxtb	r2, r3
 80013e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013e4:	b2d2      	uxtb	r2, r2
 80013e6:	3328      	adds	r3, #40	@ 0x28
 80013e8:	443b      	add	r3, r7
 80013ea:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for(uint8_t b = 7; b != 255; b--) {
 80013ee:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80013f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013fc:	2bff      	cmp	r3, #255	@ 0xff
 80013fe:	d1ab      	bne.n	8001358 <DHT_getData+0x1a8>
	for(uint8_t a = 0; a < 5; a++) {
 8001400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001404:	3301      	adds	r3, #1
 8001406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800140a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800140e:	2b04      	cmp	r3, #4
 8001410:	d99e      	bls.n	8001350 <DHT_getData+0x1a0>
  __ASM volatile ("cpsie i" : : : "memory");
 8001412:	b662      	cpsie	i
}
 8001414:	bf00      	nop
	//Включение прерываний после приёма данных
	__enable_irq();
    #endif

	/* Проверка целостности данных */
	if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 8001416:	7b3a      	ldrb	r2, [r7, #12]
 8001418:	7b7b      	ldrb	r3, [r7, #13]
 800141a:	4413      	add	r3, r2
 800141c:	b2da      	uxtb	r2, r3
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	4413      	add	r3, r2
 8001428:	b2da      	uxtb	r2, r3
 800142a:	7c3b      	ldrb	r3, [r7, #16]
 800142c:	429a      	cmp	r2, r3
 800142e:	d147      	bne.n	80014c0 <DHT_getData+0x310>
		//Если контрольная сумма совпадает, то конвертация и возврат полученных значений
		if (sensor->type == DHT22) {
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	799b      	ldrb	r3, [r3, #6]
 8001434:	2b01      	cmp	r3, #1
 8001436:	d133      	bne.n	80014a0 <DHT_getData+0x2f0>
			data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 8001438:	7b3b      	ldrb	r3, [r7, #12]
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	7b7a      	ldrb	r2, [r7, #13]
 800143e:	4313      	orrs	r3, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fc0d 	bl	8000c60 <__aeabi_i2f>
 8001446:	4603      	mov	r3, r0
 8001448:	4926      	ldr	r1, [pc, #152]	@ (80014e4 <DHT_getData+0x334>)
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff fc5c 	bl	8000d08 <__aeabi_fmul>
 8001450:	4603      	mov	r3, r0
 8001452:	617b      	str	r3, [r7, #20]
			//Проверка на отрицательность температуры
			if(!(rawData[2] & (1<<7))) {
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	b25b      	sxtb	r3, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	db0e      	blt.n	800147a <DHT_getData+0x2ca>
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	021b      	lsls	r3, r3, #8
 8001460:	7bfa      	ldrb	r2, [r7, #15]
 8001462:	4313      	orrs	r3, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fbfb 	bl	8000c60 <__aeabi_i2f>
 800146a:	4603      	mov	r3, r0
 800146c:	491d      	ldr	r1, [pc, #116]	@ (80014e4 <DHT_getData+0x334>)
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fc4a 	bl	8000d08 <__aeabi_fmul>
 8001474:	4603      	mov	r3, r0
 8001476:	61bb      	str	r3, [r7, #24]
 8001478:	e012      	b.n	80014a0 <DHT_getData+0x2f0>
			}	else {
				rawData[2] &= ~(1<<7);
 800147a:	7bbb      	ldrb	r3, [r7, #14]
 800147c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001480:	b2db      	uxtb	r3, r3
 8001482:	73bb      	strb	r3, [r7, #14]
				data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001484:	7bbb      	ldrb	r3, [r7, #14]
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	7bfa      	ldrb	r2, [r7, #15]
 800148a:	4313      	orrs	r3, r2
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fbe7 	bl	8000c60 <__aeabi_i2f>
 8001492:	4603      	mov	r3, r0
 8001494:	4914      	ldr	r1, [pc, #80]	@ (80014e8 <DHT_getData+0x338>)
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff fc36 	bl	8000d08 <__aeabi_fmul>
 800149c:	4603      	mov	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]
			}
		}
		if (sensor->type == DHT11) {
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	799b      	ldrb	r3, [r3, #6]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d10b      	bne.n	80014c0 <DHT_getData+0x310>
			data.hum = (float)rawData[0];
 80014a8:	7b3b      	ldrb	r3, [r7, #12]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fbd4 	bl	8000c58 <__aeabi_ui2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	617b      	str	r3, [r7, #20]
			data.temp = (float)rawData[2];
 80014b4:	7bbb      	ldrb	r3, [r7, #14]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fbce 	bl	8000c58 <__aeabi_ui2f>
 80014bc:	4603      	mov	r3, r0
 80014be:	61bb      	str	r3, [r7, #24]
		}
	}
	
	#if DHT_POLLING_CONTROL == 1
	sensor->lastHum = data.hum;
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	611a      	str	r2, [r3, #16]
	sensor->lastTemp = data.temp;
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	60da      	str	r2, [r3, #12]
	#endif

	return data;	
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	461a      	mov	r2, r3
 80014d0:	f107 0314 	add.w	r3, r7, #20
 80014d4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80014d8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	3dcccccd 	.word	0x3dcccccd
 80014e8:	bdcccccd 	.word	0xbdcccccd

080014ec <ConvertToLux>:
static void SendSensorData(void);
static void ParseJsonValue(char* json, const char* key, char* value, uint8_t maxLen);

// 将ADC光敏电阻值转换为流明(lux)
static float ConvertToLux(uint16_t adcValue)
{
 80014ec:	b5b0      	push	{r4, r5, r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	80fb      	strh	r3, [r7, #6]
    // 光敏电阻通常是非线性的，光线越强，阻值越小，ADC读数越低
    // 反转ADC值（因为光线越亮，读数越低）
    float invertedValue = 4095.0f - adcValue;
 80014f6:	88fb      	ldrh	r3, [r7, #6]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff fbb1 	bl	8000c60 <__aeabi_i2f>
 80014fe:	4603      	mov	r3, r0
 8001500:	4619      	mov	r1, r3
 8001502:	4816      	ldr	r0, [pc, #88]	@ (800155c <ConvertToLux+0x70>)
 8001504:	f7ff faf6 	bl	8000af4 <__aeabi_fsub>
 8001508:	4603      	mov	r3, r0
 800150a:	617b      	str	r3, [r7, #20]
    // 应用一个近似公式将ADC值转换为流明
    // 注意：这是一个简化的估算，需要根据具体的光敏电阻型号校准
    // 假设参数：R = 10k欧姆（暗电阻），gamma = 0.7（光敏电阻特性参数）

    // 归一化ADC值到0-1范围
    float normalizedValue = invertedValue / 4095.0f;
 800150c:	4913      	ldr	r1, [pc, #76]	@ (800155c <ConvertToLux+0x70>)
 800150e:	6978      	ldr	r0, [r7, #20]
 8001510:	f7ff fcae 	bl	8000e70 <__aeabi_fdiv>
 8001514:	4603      	mov	r3, r0
 8001516:	613b      	str	r3, [r7, #16]

    // 应用幂函数模拟光敏电阻的非线性特性
    // 典型的光敏电阻流明与阻值关系是幂函数，这里使用简化公式
    const float maxLux = 10000.0f; // 最大流明值
 8001518:	4b11      	ldr	r3, [pc, #68]	@ (8001560 <ConvertToLux+0x74>)
 800151a:	60fb      	str	r3, [r7, #12]
    float lux = maxLux * pow(normalizedValue, 2.5f);
 800151c:	68f8      	ldr	r0, [r7, #12]
 800151e:	f7fe ff8d 	bl	800043c <__aeabi_f2d>
 8001522:	4604      	mov	r4, r0
 8001524:	460d      	mov	r5, r1
 8001526:	6938      	ldr	r0, [r7, #16]
 8001528:	f7fe ff88 	bl	800043c <__aeabi_f2d>
 800152c:	f04f 0200 	mov.w	r2, #0
 8001530:	4b0c      	ldr	r3, [pc, #48]	@ (8001564 <ConvertToLux+0x78>)
 8001532:	f005 fde5 	bl	8007100 <pow>
 8001536:	4602      	mov	r2, r0
 8001538:	460b      	mov	r3, r1
 800153a:	4620      	mov	r0, r4
 800153c:	4629      	mov	r1, r5
 800153e:	f7fe ffd5 	bl	80004ec <__aeabi_dmul>
 8001542:	4602      	mov	r2, r0
 8001544:	460b      	mov	r3, r1
 8001546:	4610      	mov	r0, r2
 8001548:	4619      	mov	r1, r3
 800154a:	f7ff fa7f 	bl	8000a4c <__aeabi_d2f>
 800154e:	4603      	mov	r3, r0
 8001550:	60bb      	str	r3, [r7, #8]

    return lux;
 8001552:	68bb      	ldr	r3, [r7, #8]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3718      	adds	r7, #24
 8001558:	46bd      	mov	sp, r7
 800155a:	bdb0      	pop	{r4, r5, r7, pc}
 800155c:	457ff000 	.word	0x457ff000
 8001560:	461c4000 	.word	0x461c4000
 8001564:	40040000 	.word	0x40040000

08001568 <ConvertToPercent>:

// 将ADC水位值转换为百分比
static uint8_t ConvertToPercent(uint16_t adcValue)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	80fb      	strh	r3, [r7, #6]
    // 将0-4095的ADC值映射到0-100%的范围
    // 使用浮点数计算确保精度，然后四舍五入到最接近的整数
    float percent = (float)adcValue / 4095.0f * 100.0f;
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fb6f 	bl	8000c58 <__aeabi_ui2f>
 800157a:	4603      	mov	r3, r0
 800157c:	490c      	ldr	r1, [pc, #48]	@ (80015b0 <ConvertToPercent+0x48>)
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff fc76 	bl	8000e70 <__aeabi_fdiv>
 8001584:	4603      	mov	r3, r0
 8001586:	490b      	ldr	r1, [pc, #44]	@ (80015b4 <ConvertToPercent+0x4c>)
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff fbbd 	bl	8000d08 <__aeabi_fmul>
 800158e:	4603      	mov	r3, r0
 8001590:	60fb      	str	r3, [r7, #12]
    return (uint8_t)(percent + 0.5f);
 8001592:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8001596:	68f8      	ldr	r0, [r7, #12]
 8001598:	f7ff faae 	bl	8000af8 <__addsf3>
 800159c:	4603      	mov	r3, r0
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fd9e 	bl	80010e0 <__aeabi_f2uiz>
 80015a4:	4603      	mov	r3, r0
 80015a6:	b2db      	uxtb	r3, r3
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	457ff000 	.word	0x457ff000
 80015b4:	42c80000 	.word	0x42c80000

080015b8 <ReadSensors>:

// 读取传感器数据
static void ReadSensors(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
    // 配置为光线传感器通道
    ADC_ChannelConfTypeDef sConfig = {0};
 80015be:	f107 030c 	add.w	r3, r7, #12
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
    sConfig.Channel = ADC_CHANNEL_4;
 80015ca:	2304      	movs	r3, #4
 80015cc:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = 1;
 80015ce:	2301      	movs	r3, #1
 80015d0:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 80015d2:	2305      	movs	r3, #5
 80015d4:	617b      	str	r3, [r7, #20]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	483b      	ldr	r0, [pc, #236]	@ (80016cc <ReadSensors+0x114>)
 80015de:	f002 fbb3 	bl	8003d48 <HAL_ADC_ConfigChannel>

    // 读取光线传感器值 (PA4 - ADC1_IN4)
    HAL_ADC_Start(&hadc1);
 80015e2:	483a      	ldr	r0, [pc, #232]	@ (80016cc <ReadSensors+0x114>)
 80015e4:	f002 f9c4 	bl	8003970 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 80015e8:	2164      	movs	r1, #100	@ 0x64
 80015ea:	4838      	ldr	r0, [pc, #224]	@ (80016cc <ReadSensors+0x114>)
 80015ec:	f002 fa9a 	bl	8003b24 <HAL_ADC_PollForConversion>
    lightValue = HAL_ADC_GetValue(&hadc1);
 80015f0:	4836      	ldr	r0, [pc, #216]	@ (80016cc <ReadSensors+0x114>)
 80015f2:	f002 fb9d 	bl	8003d30 <HAL_ADC_GetValue>
 80015f6:	4603      	mov	r3, r0
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b35      	ldr	r3, [pc, #212]	@ (80016d0 <ReadSensors+0x118>)
 80015fc:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 80015fe:	4833      	ldr	r0, [pc, #204]	@ (80016cc <ReadSensors+0x114>)
 8001600:	f002 fa64 	bl	8003acc <HAL_ADC_Stop>

    // 将光敏电阻ADC值转换为流明
    luxValue = ConvertToLux(lightValue);
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <ReadSensors+0x118>)
 8001606:	881b      	ldrh	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff6f 	bl	80014ec <ConvertToLux>
 800160e:	4603      	mov	r3, r0
 8001610:	4a30      	ldr	r2, [pc, #192]	@ (80016d4 <ReadSensors+0x11c>)
 8001612:	6013      	str	r3, [r2, #0]

    // 配置为水位传感器通道
    sConfig.Channel = ADC_CHANNEL_5;
 8001614:	2305      	movs	r3, #5
 8001616:	60fb      	str	r3, [r7, #12]
    HAL_ADC_ConfigChannel(&hadc1, &sConfig);
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	4619      	mov	r1, r3
 800161e:	482b      	ldr	r0, [pc, #172]	@ (80016cc <ReadSensors+0x114>)
 8001620:	f002 fb92 	bl	8003d48 <HAL_ADC_ConfigChannel>

    // 读取水位传感器值 (PA5 - ADC1_IN5)
    HAL_ADC_Start(&hadc1);
 8001624:	4829      	ldr	r0, [pc, #164]	@ (80016cc <ReadSensors+0x114>)
 8001626:	f002 f9a3 	bl	8003970 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 100);
 800162a:	2164      	movs	r1, #100	@ 0x64
 800162c:	4827      	ldr	r0, [pc, #156]	@ (80016cc <ReadSensors+0x114>)
 800162e:	f002 fa79 	bl	8003b24 <HAL_ADC_PollForConversion>
    waterValue = HAL_ADC_GetValue(&hadc1);
 8001632:	4826      	ldr	r0, [pc, #152]	@ (80016cc <ReadSensors+0x114>)
 8001634:	f002 fb7c 	bl	8003d30 <HAL_ADC_GetValue>
 8001638:	4603      	mov	r3, r0
 800163a:	b29a      	uxth	r2, r3
 800163c:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <ReadSensors+0x120>)
 800163e:	801a      	strh	r2, [r3, #0]
    HAL_ADC_Stop(&hadc1);
 8001640:	4822      	ldr	r0, [pc, #136]	@ (80016cc <ReadSensors+0x114>)
 8001642:	f002 fa43 	bl	8003acc <HAL_ADC_Stop>

    // 将ADC水位值转换为百分比
    waterValue = ConvertToPercent(waterValue);
 8001646:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <ReadSensors+0x120>)
 8001648:	881b      	ldrh	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ff8c 	bl	8001568 <ConvertToPercent>
 8001650:	4603      	mov	r3, r0
 8001652:	461a      	mov	r2, r3
 8001654:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <ReadSensors+0x120>)
 8001656:	801a      	strh	r2, [r3, #0]

    // 读取DHT11传感器数据
    DHT_data dhtData = DHT_getData(&dht11);
 8001658:	1d3b      	adds	r3, r7, #4
 800165a:	4920      	ldr	r1, [pc, #128]	@ (80016dc <ReadSensors+0x124>)
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fda7 	bl	80011b0 <DHT_getData>

    // 检查数据是否有效
    if (dhtData.temp > -100.0f && dhtData.hum > -100.0f)
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	491e      	ldr	r1, [pc, #120]	@ (80016e0 <ReadSensors+0x128>)
 8001666:	4618      	mov	r0, r3
 8001668:	f7ff fd0a 	bl	8001080 <__aeabi_fcmpgt>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d017      	beq.n	80016a2 <ReadSensors+0xea>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	491a      	ldr	r1, [pc, #104]	@ (80016e0 <ReadSensors+0x128>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fd02 	bl	8001080 <__aeabi_fcmpgt>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d00f      	beq.n	80016a2 <ReadSensors+0xea>
    {
        temperature = dhtData.temp;
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	4a17      	ldr	r2, [pc, #92]	@ (80016e4 <ReadSensors+0x12c>)
 8001686:	6013      	str	r3, [r2, #0]
        humidity = dhtData.hum;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	4a17      	ldr	r2, [pc, #92]	@ (80016e8 <ReadSensors+0x130>)
 800168c:	6013      	str	r3, [r2, #0]
        dht11Ready = 1;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <ReadSensors+0x134>)
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
        dht11_status = 1;
 8001694:	4b16      	ldr	r3, [pc, #88]	@ (80016f0 <ReadSensors+0x138>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
        dht11_retry_count = 0;
 800169a:	4b16      	ldr	r3, [pc, #88]	@ (80016f4 <ReadSensors+0x13c>)
 800169c:	2200      	movs	r2, #0
 800169e:	701a      	strb	r2, [r3, #0]
        {
            dht11Ready = 0;
            dht11_status = 0;
        }
    }
}
 80016a0:	e00f      	b.n	80016c2 <ReadSensors+0x10a>
        dht11_retry_count++;
 80016a2:	4b14      	ldr	r3, [pc, #80]	@ (80016f4 <ReadSensors+0x13c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	3301      	adds	r3, #1
 80016a8:	b2da      	uxtb	r2, r3
 80016aa:	4b12      	ldr	r3, [pc, #72]	@ (80016f4 <ReadSensors+0x13c>)
 80016ac:	701a      	strb	r2, [r3, #0]
        if (dht11_retry_count > 5)
 80016ae:	4b11      	ldr	r3, [pc, #68]	@ (80016f4 <ReadSensors+0x13c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b05      	cmp	r3, #5
 80016b4:	d905      	bls.n	80016c2 <ReadSensors+0x10a>
            dht11Ready = 0;
 80016b6:	4b0d      	ldr	r3, [pc, #52]	@ (80016ec <ReadSensors+0x134>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	701a      	strb	r2, [r3, #0]
            dht11_status = 0;
 80016bc:	4b0c      	ldr	r3, [pc, #48]	@ (80016f0 <ReadSensors+0x138>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
}
 80016c2:	bf00      	nop
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	20000254 	.word	0x20000254
 80016d0:	20000078 	.word	0x20000078
 80016d4:	2000007c 	.word	0x2000007c
 80016d8:	2000007a 	.word	0x2000007a
 80016dc:	20000080 	.word	0x20000080
 80016e0:	c2c80000 	.word	0xc2c80000
 80016e4:	20000094 	.word	0x20000094
 80016e8:	20000098 	.word	0x20000098
 80016ec:	2000009c 	.word	0x2000009c
 80016f0:	2000024c 	.word	0x2000024c
 80016f4:	2000024d 	.word	0x2000024d

080016f8 <UpdateDisplay>:

// 更新显示
static void UpdateDisplay(void)
{
 80016f8:	b590      	push	{r4, r7, lr}
 80016fa:	b08f      	sub	sp, #60	@ 0x3c
 80016fc:	af02      	add	r7, sp, #8
    // 清屏
    ssd1306_Fill(Black);
 80016fe:	2000      	movs	r0, #0
 8001700:	f001 fc22 	bl	8002f48 <ssd1306_Fill>

    // 显示水位传感器值
    ssd1306_SetCursor(0, 0);
 8001704:	2100      	movs	r1, #0
 8001706:	2000      	movs	r0, #0
 8001708:	f001 fd68 	bl	80031dc <ssd1306_SetCursor>
    sprintf(displayBuffer, "Water:%d%%", waterValue);
 800170c:	4b91      	ldr	r3, [pc, #580]	@ (8001954 <UpdateDisplay+0x25c>)
 800170e:	881b      	ldrh	r3, [r3, #0]
 8001710:	461a      	mov	r2, r3
 8001712:	4991      	ldr	r1, [pc, #580]	@ (8001958 <UpdateDisplay+0x260>)
 8001714:	4891      	ldr	r0, [pc, #580]	@ (800195c <UpdateDisplay+0x264>)
 8001716:	f006 fbff 	bl	8007f18 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_7x10, White);
 800171a:	4b91      	ldr	r3, [pc, #580]	@ (8001960 <UpdateDisplay+0x268>)
 800171c:	2201      	movs	r2, #1
 800171e:	9200      	str	r2, [sp, #0]
 8001720:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001722:	488e      	ldr	r0, [pc, #568]	@ (800195c <UpdateDisplay+0x264>)
 8001724:	f001 fd34 	bl	8003190 <ssd1306_WriteString>

    // 显示DHT11传感器数据
    if (dht11Ready)
 8001728:	4b8e      	ldr	r3, [pc, #568]	@ (8001964 <UpdateDisplay+0x26c>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b00      	cmp	r3, #0
 800172e:	f000 8088 	beq.w	8001842 <UpdateDisplay+0x14a>
    {
        // 显示温度（整数部分和一位小数）
        int tempInt = (int)temperature;
 8001732:	4b8d      	ldr	r3, [pc, #564]	@ (8001968 <UpdateDisplay+0x270>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fcac 	bl	8001094 <__aeabi_f2iz>
 800173c:	4603      	mov	r3, r0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
        int tempDec = (int)((temperature - tempInt) * 10);
 8001740:	4b89      	ldr	r3, [pc, #548]	@ (8001968 <UpdateDisplay+0x270>)
 8001742:	681c      	ldr	r4, [r3, #0]
 8001744:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001746:	f7ff fa8b 	bl	8000c60 <__aeabi_i2f>
 800174a:	4603      	mov	r3, r0
 800174c:	4619      	mov	r1, r3
 800174e:	4620      	mov	r0, r4
 8001750:	f7ff f9d0 	bl	8000af4 <__aeabi_fsub>
 8001754:	4603      	mov	r3, r0
 8001756:	4985      	ldr	r1, [pc, #532]	@ (800196c <UpdateDisplay+0x274>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fad5 	bl	8000d08 <__aeabi_fmul>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fc97 	bl	8001094 <__aeabi_f2iz>
 8001766:	4603      	mov	r3, r0
 8001768:	623b      	str	r3, [r7, #32]
        ssd1306_SetCursor(0, 12);
 800176a:	210c      	movs	r1, #12
 800176c:	2000      	movs	r0, #0
 800176e:	f001 fd35 	bl	80031dc <ssd1306_SetCursor>
        sprintf(displayBuffer, "Temp:%d.%dC", tempInt, tempDec);
 8001772:	6a3b      	ldr	r3, [r7, #32]
 8001774:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001776:	497e      	ldr	r1, [pc, #504]	@ (8001970 <UpdateDisplay+0x278>)
 8001778:	4878      	ldr	r0, [pc, #480]	@ (800195c <UpdateDisplay+0x264>)
 800177a:	f006 fbcd 	bl	8007f18 <siprintf>
        ssd1306_WriteString(displayBuffer, Font_7x10, White);
 800177e:	4b78      	ldr	r3, [pc, #480]	@ (8001960 <UpdateDisplay+0x268>)
 8001780:	2201      	movs	r2, #1
 8001782:	9200      	str	r2, [sp, #0]
 8001784:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001786:	4875      	ldr	r0, [pc, #468]	@ (800195c <UpdateDisplay+0x264>)
 8001788:	f001 fd02 	bl	8003190 <ssd1306_WriteString>

        // 显示湿度（整数部分和一位小数）
        int humInt = (int)humidity;
 800178c:	4b79      	ldr	r3, [pc, #484]	@ (8001974 <UpdateDisplay+0x27c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc7f 	bl	8001094 <__aeabi_f2iz>
 8001796:	4603      	mov	r3, r0
 8001798:	61fb      	str	r3, [r7, #28]
        int humDec = (int)((humidity - humInt) * 10);
 800179a:	4b76      	ldr	r3, [pc, #472]	@ (8001974 <UpdateDisplay+0x27c>)
 800179c:	681c      	ldr	r4, [r3, #0]
 800179e:	69f8      	ldr	r0, [r7, #28]
 80017a0:	f7ff fa5e 	bl	8000c60 <__aeabi_i2f>
 80017a4:	4603      	mov	r3, r0
 80017a6:	4619      	mov	r1, r3
 80017a8:	4620      	mov	r0, r4
 80017aa:	f7ff f9a3 	bl	8000af4 <__aeabi_fsub>
 80017ae:	4603      	mov	r3, r0
 80017b0:	496e      	ldr	r1, [pc, #440]	@ (800196c <UpdateDisplay+0x274>)
 80017b2:	4618      	mov	r0, r3
 80017b4:	f7ff faa8 	bl	8000d08 <__aeabi_fmul>
 80017b8:	4603      	mov	r3, r0
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fc6a 	bl	8001094 <__aeabi_f2iz>
 80017c0:	4603      	mov	r3, r0
 80017c2:	61bb      	str	r3, [r7, #24]
        ssd1306_SetCursor(0, 24);
 80017c4:	2118      	movs	r1, #24
 80017c6:	2000      	movs	r0, #0
 80017c8:	f001 fd08 	bl	80031dc <ssd1306_SetCursor>
        sprintf(displayBuffer, "Humi:%d.%d%%", humInt, humDec);
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	4969      	ldr	r1, [pc, #420]	@ (8001978 <UpdateDisplay+0x280>)
 80017d2:	4862      	ldr	r0, [pc, #392]	@ (800195c <UpdateDisplay+0x264>)
 80017d4:	f006 fba0 	bl	8007f18 <siprintf>
        ssd1306_WriteString(displayBuffer, Font_7x10, White);
 80017d8:	4b61      	ldr	r3, [pc, #388]	@ (8001960 <UpdateDisplay+0x268>)
 80017da:	2201      	movs	r2, #1
 80017dc:	9200      	str	r2, [sp, #0]
 80017de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80017e0:	485e      	ldr	r0, [pc, #376]	@ (800195c <UpdateDisplay+0x264>)
 80017e2:	f001 fcd5 	bl	8003190 <ssd1306_WriteString>

        // 显示光线值（放在最下面）
        int luxInt = (int)luxValue;                   // 整数部分
 80017e6:	4b65      	ldr	r3, [pc, #404]	@ (800197c <UpdateDisplay+0x284>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4618      	mov	r0, r3
 80017ec:	f7ff fc52 	bl	8001094 <__aeabi_f2iz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	617b      	str	r3, [r7, #20]
        int luxDec = (int)((luxValue - luxInt) * 10); // 小数部分(一位小数)
 80017f4:	4b61      	ldr	r3, [pc, #388]	@ (800197c <UpdateDisplay+0x284>)
 80017f6:	681c      	ldr	r4, [r3, #0]
 80017f8:	6978      	ldr	r0, [r7, #20]
 80017fa:	f7ff fa31 	bl	8000c60 <__aeabi_i2f>
 80017fe:	4603      	mov	r3, r0
 8001800:	4619      	mov	r1, r3
 8001802:	4620      	mov	r0, r4
 8001804:	f7ff f976 	bl	8000af4 <__aeabi_fsub>
 8001808:	4603      	mov	r3, r0
 800180a:	4958      	ldr	r1, [pc, #352]	@ (800196c <UpdateDisplay+0x274>)
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff fa7b 	bl	8000d08 <__aeabi_fmul>
 8001812:	4603      	mov	r3, r0
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fc3d 	bl	8001094 <__aeabi_f2iz>
 800181a:	4603      	mov	r3, r0
 800181c:	613b      	str	r3, [r7, #16]
        ssd1306_SetCursor(0, 36);
 800181e:	2124      	movs	r1, #36	@ 0x24
 8001820:	2000      	movs	r0, #0
 8001822:	f001 fcdb 	bl	80031dc <ssd1306_SetCursor>
        sprintf(displayBuffer, "Light:%d.%dlux", luxInt, luxDec);
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	4955      	ldr	r1, [pc, #340]	@ (8001980 <UpdateDisplay+0x288>)
 800182c:	484b      	ldr	r0, [pc, #300]	@ (800195c <UpdateDisplay+0x264>)
 800182e:	f006 fb73 	bl	8007f18 <siprintf>
        ssd1306_WriteString(displayBuffer, Font_7x10, White);
 8001832:	4b4b      	ldr	r3, [pc, #300]	@ (8001960 <UpdateDisplay+0x268>)
 8001834:	2201      	movs	r2, #1
 8001836:	9200      	str	r2, [sp, #0]
 8001838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800183a:	4848      	ldr	r0, [pc, #288]	@ (800195c <UpdateDisplay+0x264>)
 800183c:	f001 fca8 	bl	8003190 <ssd1306_WriteString>
 8001840:	e03c      	b.n	80018bc <UpdateDisplay+0x1c4>
    }
    else
    {
        ssd1306_SetCursor(0, 12);
 8001842:	210c      	movs	r1, #12
 8001844:	2000      	movs	r0, #0
 8001846:	f001 fcc9 	bl	80031dc <ssd1306_SetCursor>
        char errorMsg[] = "DHT11 Error";
 800184a:	4a4e      	ldr	r2, [pc, #312]	@ (8001984 <UpdateDisplay+0x28c>)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001850:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        ssd1306_WriteString(errorMsg, Font_7x10, White);
 8001854:	4b42      	ldr	r3, [pc, #264]	@ (8001960 <UpdateDisplay+0x268>)
 8001856:	1d38      	adds	r0, r7, #4
 8001858:	2201      	movs	r2, #1
 800185a:	9200      	str	r2, [sp, #0]
 800185c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800185e:	f001 fc97 	bl	8003190 <ssd1306_WriteString>

        // 显示光线值（放在最下面）
        int luxInt = (int)luxValue;                   // 整数部分
 8001862:	4b46      	ldr	r3, [pc, #280]	@ (800197c <UpdateDisplay+0x284>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fc14 	bl	8001094 <__aeabi_f2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int luxDec = (int)((luxValue - luxInt) * 10); // 小数部分(一位小数)
 8001870:	4b42      	ldr	r3, [pc, #264]	@ (800197c <UpdateDisplay+0x284>)
 8001872:	681c      	ldr	r4, [r3, #0]
 8001874:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001876:	f7ff f9f3 	bl	8000c60 <__aeabi_i2f>
 800187a:	4603      	mov	r3, r0
 800187c:	4619      	mov	r1, r3
 800187e:	4620      	mov	r0, r4
 8001880:	f7ff f938 	bl	8000af4 <__aeabi_fsub>
 8001884:	4603      	mov	r3, r0
 8001886:	4939      	ldr	r1, [pc, #228]	@ (800196c <UpdateDisplay+0x274>)
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff fa3d 	bl	8000d08 <__aeabi_fmul>
 800188e:	4603      	mov	r3, r0
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fbff 	bl	8001094 <__aeabi_f2iz>
 8001896:	4603      	mov	r3, r0
 8001898:	62bb      	str	r3, [r7, #40]	@ 0x28
        ssd1306_SetCursor(0, 24);
 800189a:	2118      	movs	r1, #24
 800189c:	2000      	movs	r0, #0
 800189e:	f001 fc9d 	bl	80031dc <ssd1306_SetCursor>
        sprintf(displayBuffer, "Light:%d.%dlux", luxInt, luxDec);
 80018a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018a6:	4936      	ldr	r1, [pc, #216]	@ (8001980 <UpdateDisplay+0x288>)
 80018a8:	482c      	ldr	r0, [pc, #176]	@ (800195c <UpdateDisplay+0x264>)
 80018aa:	f006 fb35 	bl	8007f18 <siprintf>
        ssd1306_WriteString(displayBuffer, Font_7x10, White);
 80018ae:	4b2c      	ldr	r3, [pc, #176]	@ (8001960 <UpdateDisplay+0x268>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	9200      	str	r2, [sp, #0]
 80018b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018b6:	4829      	ldr	r0, [pc, #164]	@ (800195c <UpdateDisplay+0x264>)
 80018b8:	f001 fc6a 	bl	8003190 <ssd1306_WriteString>
    }

    // 右侧显示设备状态
    // 风扇状态
    ssd1306_SetCursor(75, 0);
 80018bc:	2100      	movs	r1, #0
 80018be:	204b      	movs	r0, #75	@ 0x4b
 80018c0:	f001 fc8c 	bl	80031dc <ssd1306_SetCursor>
    sprintf(displayBuffer, "Fan:%s", fanStatus ? "ON" : "OFF");
 80018c4:	4b30      	ldr	r3, [pc, #192]	@ (8001988 <UpdateDisplay+0x290>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d001      	beq.n	80018d0 <UpdateDisplay+0x1d8>
 80018cc:	4b2f      	ldr	r3, [pc, #188]	@ (800198c <UpdateDisplay+0x294>)
 80018ce:	e000      	b.n	80018d2 <UpdateDisplay+0x1da>
 80018d0:	4b2f      	ldr	r3, [pc, #188]	@ (8001990 <UpdateDisplay+0x298>)
 80018d2:	461a      	mov	r2, r3
 80018d4:	492f      	ldr	r1, [pc, #188]	@ (8001994 <UpdateDisplay+0x29c>)
 80018d6:	4821      	ldr	r0, [pc, #132]	@ (800195c <UpdateDisplay+0x264>)
 80018d8:	f006 fb1e 	bl	8007f18 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_7x10, White);
 80018dc:	4b20      	ldr	r3, [pc, #128]	@ (8001960 <UpdateDisplay+0x268>)
 80018de:	2201      	movs	r2, #1
 80018e0:	9200      	str	r2, [sp, #0]
 80018e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018e4:	481d      	ldr	r0, [pc, #116]	@ (800195c <UpdateDisplay+0x264>)
 80018e6:	f001 fc53 	bl	8003190 <ssd1306_WriteString>

    // 排气扇状态
    ssd1306_SetCursor(75, 12);
 80018ea:	210c      	movs	r1, #12
 80018ec:	204b      	movs	r0, #75	@ 0x4b
 80018ee:	f001 fc75 	bl	80031dc <ssd1306_SetCursor>
    sprintf(displayBuffer, "Exh:%s", exhaustStatus ? "ON" : "OFF");
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <UpdateDisplay+0x2a0>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <UpdateDisplay+0x206>
 80018fa:	4b24      	ldr	r3, [pc, #144]	@ (800198c <UpdateDisplay+0x294>)
 80018fc:	e000      	b.n	8001900 <UpdateDisplay+0x208>
 80018fe:	4b24      	ldr	r3, [pc, #144]	@ (8001990 <UpdateDisplay+0x298>)
 8001900:	461a      	mov	r2, r3
 8001902:	4926      	ldr	r1, [pc, #152]	@ (800199c <UpdateDisplay+0x2a4>)
 8001904:	4815      	ldr	r0, [pc, #84]	@ (800195c <UpdateDisplay+0x264>)
 8001906:	f006 fb07 	bl	8007f18 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_7x10, White);
 800190a:	4b15      	ldr	r3, [pc, #84]	@ (8001960 <UpdateDisplay+0x268>)
 800190c:	2201      	movs	r2, #1
 800190e:	9200      	str	r2, [sp, #0]
 8001910:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001912:	4812      	ldr	r0, [pc, #72]	@ (800195c <UpdateDisplay+0x264>)
 8001914:	f001 fc3c 	bl	8003190 <ssd1306_WriteString>

    // 水泵状态
    ssd1306_SetCursor(75, 24);
 8001918:	2118      	movs	r1, #24
 800191a:	204b      	movs	r0, #75	@ 0x4b
 800191c:	f001 fc5e 	bl	80031dc <ssd1306_SetCursor>
    sprintf(displayBuffer, "Pum:%s", pumpStatus ? "ON" : "OFF");
 8001920:	4b1f      	ldr	r3, [pc, #124]	@ (80019a0 <UpdateDisplay+0x2a8>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <UpdateDisplay+0x234>
 8001928:	4b18      	ldr	r3, [pc, #96]	@ (800198c <UpdateDisplay+0x294>)
 800192a:	e000      	b.n	800192e <UpdateDisplay+0x236>
 800192c:	4b18      	ldr	r3, [pc, #96]	@ (8001990 <UpdateDisplay+0x298>)
 800192e:	461a      	mov	r2, r3
 8001930:	491c      	ldr	r1, [pc, #112]	@ (80019a4 <UpdateDisplay+0x2ac>)
 8001932:	480a      	ldr	r0, [pc, #40]	@ (800195c <UpdateDisplay+0x264>)
 8001934:	f006 faf0 	bl	8007f18 <siprintf>
    ssd1306_WriteString(displayBuffer, Font_7x10, White);
 8001938:	4b09      	ldr	r3, [pc, #36]	@ (8001960 <UpdateDisplay+0x268>)
 800193a:	2201      	movs	r2, #1
 800193c:	9200      	str	r2, [sp, #0]
 800193e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001940:	4806      	ldr	r0, [pc, #24]	@ (800195c <UpdateDisplay+0x264>)
 8001942:	f001 fc25 	bl	8003190 <ssd1306_WriteString>

    // 更新屏幕
    ssd1306_UpdateScreen();
 8001946:	f001 fb17 	bl	8002f78 <ssd1306_UpdateScreen>
}
 800194a:	bf00      	nop
 800194c:	3734      	adds	r7, #52	@ 0x34
 800194e:	46bd      	mov	sp, r7
 8001950:	bd90      	pop	{r4, r7, pc}
 8001952:	bf00      	nop
 8001954:	2000007a 	.word	0x2000007a
 8001958:	08008938 	.word	0x08008938
 800195c:	200000a0 	.word	0x200000a0
 8001960:	080095b4 	.word	0x080095b4
 8001964:	2000009c 	.word	0x2000009c
 8001968:	20000094 	.word	0x20000094
 800196c:	41200000 	.word	0x41200000
 8001970:	08008944 	.word	0x08008944
 8001974:	20000098 	.word	0x20000098
 8001978:	08008950 	.word	0x08008950
 800197c:	2000007c 	.word	0x2000007c
 8001980:	08008960 	.word	0x08008960
 8001984:	08008990 	.word	0x08008990
 8001988:	2000024e 	.word	0x2000024e
 800198c:	08008970 	.word	0x08008970
 8001990:	08008974 	.word	0x08008974
 8001994:	08008978 	.word	0x08008978
 8001998:	2000024f 	.word	0x2000024f
 800199c:	08008980 	.word	0x08008980
 80019a0:	20000250 	.word	0x20000250
 80019a4:	08008988 	.word	0x08008988

080019a8 <UpdateDeviceStatus>:

// 更新设备状态函数
static void UpdateDeviceStatus(uint8_t fan, uint8_t exhaust, uint8_t pump)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	460b      	mov	r3, r1
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	4613      	mov	r3, r2
 80019b8:	717b      	strb	r3, [r7, #5]
    // 更新状态变量
    fanStatus = fan;
 80019ba:	4a5d      	ldr	r2, [pc, #372]	@ (8001b30 <UpdateDeviceStatus+0x188>)
 80019bc:	79fb      	ldrb	r3, [r7, #7]
 80019be:	7013      	strb	r3, [r2, #0]
    exhaustStatus = exhaust;
 80019c0:	4a5c      	ldr	r2, [pc, #368]	@ (8001b34 <UpdateDeviceStatus+0x18c>)
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	7013      	strb	r3, [r2, #0]
    pumpStatus = pump;
 80019c6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b38 <UpdateDeviceStatus+0x190>)
 80019c8:	797b      	ldrb	r3, [r7, #5]
 80019ca:	7013      	strb	r3, [r2, #0]
    
    // 控制实际硬件状态
    
    // 风扇控制 (PC13)
    if (fan) {
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01b      	beq.n	8001a0a <UpdateDeviceStatus+0x62>
        HAL_GPIO_WritePin(RELAY_FAN_PORT, RELAY_FAN_PIN, RELAY_ON);
 80019d2:	2200      	movs	r2, #0
 80019d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80019d8:	4858      	ldr	r0, [pc, #352]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 80019da:	f002 ff52 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC13 pin set to: %s", RELAY_ON == GPIO_PIN_RESET ? "LOW" : "HIGH");
 80019de:	4a58      	ldr	r2, [pc, #352]	@ (8001b40 <UpdateDeviceStatus+0x198>)
 80019e0:	4958      	ldr	r1, [pc, #352]	@ (8001b44 <UpdateDeviceStatus+0x19c>)
 80019e2:	4859      	ldr	r0, [pc, #356]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 80019e4:	f006 fa98 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 80019e8:	4857      	ldr	r0, [pc, #348]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 80019ea:	f7fe fbbb 	bl	8000164 <strlen>
 80019ee:	4603      	mov	r3, r0
 80019f0:	b29a      	uxth	r2, r3
 80019f2:	2364      	movs	r3, #100	@ 0x64
 80019f4:	4954      	ldr	r1, [pc, #336]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 80019f6:	4855      	ldr	r0, [pc, #340]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 80019f8:	f004 fd6f 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 80019fc:	230a      	movs	r3, #10
 80019fe:	2202      	movs	r2, #2
 8001a00:	4953      	ldr	r1, [pc, #332]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001a02:	4852      	ldr	r0, [pc, #328]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001a04:	f004 fd69 	bl	80064da <HAL_UART_Transmit>
 8001a08:	e01a      	b.n	8001a40 <UpdateDeviceStatus+0x98>
    } else {
        HAL_GPIO_WritePin(RELAY_FAN_PORT, RELAY_FAN_PIN, RELAY_OFF);
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001a10:	484a      	ldr	r0, [pc, #296]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 8001a12:	f002 ff36 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC13 pin set to: %s", RELAY_OFF == GPIO_PIN_RESET ? "LOW" : "HIGH");
 8001a16:	4a4f      	ldr	r2, [pc, #316]	@ (8001b54 <UpdateDeviceStatus+0x1ac>)
 8001a18:	494a      	ldr	r1, [pc, #296]	@ (8001b44 <UpdateDeviceStatus+0x19c>)
 8001a1a:	484b      	ldr	r0, [pc, #300]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a1c:	f006 fa7c 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001a20:	4849      	ldr	r0, [pc, #292]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a22:	f7fe fb9f 	bl	8000164 <strlen>
 8001a26:	4603      	mov	r3, r0
 8001a28:	b29a      	uxth	r2, r3
 8001a2a:	2364      	movs	r3, #100	@ 0x64
 8001a2c:	4946      	ldr	r1, [pc, #280]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a2e:	4847      	ldr	r0, [pc, #284]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001a30:	f004 fd53 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001a34:	230a      	movs	r3, #10
 8001a36:	2202      	movs	r2, #2
 8001a38:	4945      	ldr	r1, [pc, #276]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001a3a:	4844      	ldr	r0, [pc, #272]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001a3c:	f004 fd4d 	bl	80064da <HAL_UART_Transmit>
    }
    
    // 排气扇控制 (PC14)
    if (exhaust) {
 8001a40:	79bb      	ldrb	r3, [r7, #6]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d01b      	beq.n	8001a7e <UpdateDeviceStatus+0xd6>
        HAL_GPIO_WritePin(RELAY_EXHAUST_PORT, RELAY_EXHAUST_PIN, RELAY_ON);
 8001a46:	2200      	movs	r2, #0
 8001a48:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a4c:	483b      	ldr	r0, [pc, #236]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 8001a4e:	f002 ff18 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC14 pin set to: %s", RELAY_ON == GPIO_PIN_RESET ? "LOW" : "HIGH");
 8001a52:	4a3b      	ldr	r2, [pc, #236]	@ (8001b40 <UpdateDeviceStatus+0x198>)
 8001a54:	4940      	ldr	r1, [pc, #256]	@ (8001b58 <UpdateDeviceStatus+0x1b0>)
 8001a56:	483c      	ldr	r0, [pc, #240]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a58:	f006 fa5e 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001a5c:	483a      	ldr	r0, [pc, #232]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a5e:	f7fe fb81 	bl	8000164 <strlen>
 8001a62:	4603      	mov	r3, r0
 8001a64:	b29a      	uxth	r2, r3
 8001a66:	2364      	movs	r3, #100	@ 0x64
 8001a68:	4937      	ldr	r1, [pc, #220]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a6a:	4838      	ldr	r0, [pc, #224]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001a6c:	f004 fd35 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001a70:	230a      	movs	r3, #10
 8001a72:	2202      	movs	r2, #2
 8001a74:	4936      	ldr	r1, [pc, #216]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001a76:	4835      	ldr	r0, [pc, #212]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001a78:	f004 fd2f 	bl	80064da <HAL_UART_Transmit>
 8001a7c:	e01a      	b.n	8001ab4 <UpdateDeviceStatus+0x10c>
    } else {
        HAL_GPIO_WritePin(RELAY_EXHAUST_PORT, RELAY_EXHAUST_PIN, RELAY_OFF);
 8001a7e:	2201      	movs	r2, #1
 8001a80:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001a84:	482d      	ldr	r0, [pc, #180]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 8001a86:	f002 fefc 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC14 pin set to: %s", RELAY_OFF == GPIO_PIN_RESET ? "LOW" : "HIGH");
 8001a8a:	4a32      	ldr	r2, [pc, #200]	@ (8001b54 <UpdateDeviceStatus+0x1ac>)
 8001a8c:	4932      	ldr	r1, [pc, #200]	@ (8001b58 <UpdateDeviceStatus+0x1b0>)
 8001a8e:	482e      	ldr	r0, [pc, #184]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a90:	f006 fa42 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001a94:	482c      	ldr	r0, [pc, #176]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001a96:	f7fe fb65 	bl	8000164 <strlen>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	2364      	movs	r3, #100	@ 0x64
 8001aa0:	4929      	ldr	r1, [pc, #164]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001aa2:	482a      	ldr	r0, [pc, #168]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001aa4:	f004 fd19 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001aa8:	230a      	movs	r3, #10
 8001aaa:	2202      	movs	r2, #2
 8001aac:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001aae:	4827      	ldr	r0, [pc, #156]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001ab0:	f004 fd13 	bl	80064da <HAL_UART_Transmit>
    }
    
    // 水泵控制 (PC15)
    if (pump) {
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d01b      	beq.n	8001af2 <UpdateDeviceStatus+0x14a>
        HAL_GPIO_WritePin(RELAY_PUMP_PORT, RELAY_PUMP_PIN, RELAY_ON);
 8001aba:	2200      	movs	r2, #0
 8001abc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ac0:	481e      	ldr	r0, [pc, #120]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 8001ac2:	f002 fede 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC15 pin set to: %s", RELAY_ON == GPIO_PIN_RESET ? "LOW" : "HIGH");
 8001ac6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b40 <UpdateDeviceStatus+0x198>)
 8001ac8:	4924      	ldr	r1, [pc, #144]	@ (8001b5c <UpdateDeviceStatus+0x1b4>)
 8001aca:	481f      	ldr	r0, [pc, #124]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001acc:	f006 fa24 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001ad0:	481d      	ldr	r0, [pc, #116]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001ad2:	f7fe fb47 	bl	8000164 <strlen>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	b29a      	uxth	r2, r3
 8001ada:	2364      	movs	r3, #100	@ 0x64
 8001adc:	491a      	ldr	r1, [pc, #104]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001ade:	481b      	ldr	r0, [pc, #108]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001ae0:	f004 fcfb 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001ae4:	230a      	movs	r3, #10
 8001ae6:	2202      	movs	r2, #2
 8001ae8:	4919      	ldr	r1, [pc, #100]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001aea:	4818      	ldr	r0, [pc, #96]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001aec:	f004 fcf5 	bl	80064da <HAL_UART_Transmit>
        HAL_GPIO_WritePin(RELAY_PUMP_PORT, RELAY_PUMP_PIN, RELAY_OFF);
        sprintf(txBuffer, "PC15 pin set to: %s", RELAY_OFF == GPIO_PIN_RESET ? "LOW" : "HIGH");
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
    }
}
 8001af0:	e01a      	b.n	8001b28 <UpdateDeviceStatus+0x180>
        HAL_GPIO_WritePin(RELAY_PUMP_PORT, RELAY_PUMP_PIN, RELAY_OFF);
 8001af2:	2201      	movs	r2, #1
 8001af4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001af8:	4810      	ldr	r0, [pc, #64]	@ (8001b3c <UpdateDeviceStatus+0x194>)
 8001afa:	f002 fec2 	bl	8004882 <HAL_GPIO_WritePin>
        sprintf(txBuffer, "PC15 pin set to: %s", RELAY_OFF == GPIO_PIN_RESET ? "LOW" : "HIGH");
 8001afe:	4a15      	ldr	r2, [pc, #84]	@ (8001b54 <UpdateDeviceStatus+0x1ac>)
 8001b00:	4916      	ldr	r1, [pc, #88]	@ (8001b5c <UpdateDeviceStatus+0x1b4>)
 8001b02:	4811      	ldr	r0, [pc, #68]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001b04:	f006 fa08 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001b08:	480f      	ldr	r0, [pc, #60]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001b0a:	f7fe fb2b 	bl	8000164 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	2364      	movs	r3, #100	@ 0x64
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <UpdateDeviceStatus+0x1a0>)
 8001b16:	480d      	ldr	r0, [pc, #52]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001b18:	f004 fcdf 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001b1c:	230a      	movs	r3, #10
 8001b1e:	2202      	movs	r2, #2
 8001b20:	490b      	ldr	r1, [pc, #44]	@ (8001b50 <UpdateDeviceStatus+0x1a8>)
 8001b22:	480a      	ldr	r0, [pc, #40]	@ (8001b4c <UpdateDeviceStatus+0x1a4>)
 8001b24:	f004 fcd9 	bl	80064da <HAL_UART_Transmit>
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	2000024e 	.word	0x2000024e
 8001b34:	2000024f 	.word	0x2000024f
 8001b38:	20000250 	.word	0x20000250
 8001b3c:	40011000 	.word	0x40011000
 8001b40:	0800899c 	.word	0x0800899c
 8001b44:	080089a0 	.word	0x080089a0
 8001b48:	200000c0 	.word	0x200000c0
 8001b4c:	20000368 	.word	0x20000368
 8001b50:	080089b4 	.word	0x080089b4
 8001b54:	080089b8 	.word	0x080089b8
 8001b58:	080089c0 	.word	0x080089c0
 8001b5c:	080089d4 	.word	0x080089d4

08001b60 <ProcessJsonCommand>:

// 处理接收到的JSON命令
static void ProcessJsonCommand(char* jsonString)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09a      	sub	sp, #104	@ 0x68
 8001b64:	af02      	add	r7, sp, #8
 8001b66:	6078      	str	r0, [r7, #4]
    char value[10];
    uint8_t newFanStatus = fanStatus;
 8001b68:	4b98      	ldr	r3, [pc, #608]	@ (8001dcc <ProcessJsonCommand+0x26c>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint8_t newExhaustStatus = exhaustStatus;
 8001b70:	4b97      	ldr	r3, [pc, #604]	@ (8001dd0 <ProcessJsonCommand+0x270>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t newPumpStatus = pumpStatus;
 8001b78:	4b96      	ldr	r3, [pc, #600]	@ (8001dd4 <ProcessJsonCommand+0x274>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t validData = 0;  // 数据有效性标志
 8001b80:	2300      	movs	r3, #0
 8001b82:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
    uint8_t statusChanged = 0; // 状态变化标志
 8001b86:	2300      	movs	r3, #0
 8001b88:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

    // 调试输出，显示收到的数据
    sprintf(txBuffer, "Received command(length=%d): %s", strlen(jsonString), jsonString);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fae9 	bl	8000164 <strlen>
 8001b92:	4602      	mov	r2, r0
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4990      	ldr	r1, [pc, #576]	@ (8001dd8 <ProcessJsonCommand+0x278>)
 8001b98:	4890      	ldr	r0, [pc, #576]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001b9a:	f006 f9bd 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001b9e:	488f      	ldr	r0, [pc, #572]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001ba0:	f7fe fae0 	bl	8000164 <strlen>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	2364      	movs	r3, #100	@ 0x64
 8001baa:	498c      	ldr	r1, [pc, #560]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001bac:	488c      	ldr	r0, [pc, #560]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001bae:	f004 fc94 	bl	80064da <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001bb2:	230a      	movs	r3, #10
 8001bb4:	2202      	movs	r2, #2
 8001bb6:	498b      	ldr	r1, [pc, #556]	@ (8001de4 <ProcessJsonCommand+0x284>)
 8001bb8:	4889      	ldr	r0, [pc, #548]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001bba:	f004 fc8e 	bl	80064da <HAL_UART_Transmit>

    // 清理JSON字符串，跳过前导空格和控制字符
    char* cleanJson = jsonString;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	657b      	str	r3, [r7, #84]	@ 0x54
    while (*cleanJson && (*cleanJson <= 32 || *cleanJson > 126)) {
 8001bc2:	e002      	b.n	8001bca <ProcessJsonCommand+0x6a>
        cleanJson++;
 8001bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	657b      	str	r3, [r7, #84]	@ 0x54
    while (*cleanJson && (*cleanJson <= 32 || *cleanJson > 126)) {
 8001bca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d007      	beq.n	8001be2 <ProcessJsonCommand+0x82>
 8001bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	2b20      	cmp	r3, #32
 8001bd8:	d9f4      	bls.n	8001bc4 <ProcessJsonCommand+0x64>
 8001bda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bdc:	781b      	ldrb	r3, [r3, #0]
 8001bde:	2b7e      	cmp	r3, #126	@ 0x7e
 8001be0:	d8f0      	bhi.n	8001bc4 <ProcessJsonCommand+0x64>
    }

    // 确保第一个字符是 '{'
    if (*cleanJson != '{') {
 8001be2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b7b      	cmp	r3, #123	@ 0x7b
 8001be8:	d00e      	beq.n	8001c08 <ProcessJsonCommand+0xa8>
        // 尝试寻找 '{' 字符
        cleanJson = strchr(jsonString, '{');
 8001bea:	217b      	movs	r1, #123	@ 0x7b
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f006 f9d7 	bl	8007fa0 <strchr>
 8001bf2:	6578      	str	r0, [r7, #84]	@ 0x54
        if (cleanJson == NULL) {
 8001bf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <ProcessJsonCommand+0xa8>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Error: Invalid JSON format (missing { at start)\r\n", 48, 100);
 8001bfa:	2364      	movs	r3, #100	@ 0x64
 8001bfc:	2230      	movs	r2, #48	@ 0x30
 8001bfe:	497a      	ldr	r1, [pc, #488]	@ (8001de8 <ProcessJsonCommand+0x288>)
 8001c00:	4877      	ldr	r0, [pc, #476]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001c02:	f004 fc6a 	bl	80064da <HAL_UART_Transmit>
            return;
 8001c06:	e2d7      	b.n	80021b8 <ProcessJsonCommand+0x658>
        }
    }

    // 检查是否包含有效的JSON格式（检查结尾是否有大括号）
    char* endBrace = strchr(cleanJson, '}');
 8001c08:	217d      	movs	r1, #125	@ 0x7d
 8001c0a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001c0c:	f006 f9c8 	bl	8007fa0 <strchr>
 8001c10:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (endBrace == NULL) {
 8001c12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d106      	bne.n	8001c26 <ProcessJsonCommand+0xc6>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Error: Invalid JSON format (missing } at end)\r\n", 47, 100);
 8001c18:	2364      	movs	r3, #100	@ 0x64
 8001c1a:	222f      	movs	r2, #47	@ 0x2f
 8001c1c:	4973      	ldr	r1, [pc, #460]	@ (8001dec <ProcessJsonCommand+0x28c>)
 8001c1e:	4870      	ldr	r0, [pc, #448]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001c20:	f004 fc5b 	bl	80064da <HAL_UART_Transmit>
        return;
 8001c24:	e2c8      	b.n	80021b8 <ProcessJsonCommand+0x658>
    }

    // 打印清理后的JSON
    sprintf(txBuffer, "Cleaned JSON: %s", cleanJson);
 8001c26:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001c28:	4971      	ldr	r1, [pc, #452]	@ (8001df0 <ProcessJsonCommand+0x290>)
 8001c2a:	486c      	ldr	r0, [pc, #432]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c2c:	f006 f974 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001c30:	486a      	ldr	r0, [pc, #424]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c32:	f7fe fa97 	bl	8000164 <strlen>
 8001c36:	4603      	mov	r3, r0
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	2364      	movs	r3, #100	@ 0x64
 8001c3c:	4967      	ldr	r1, [pc, #412]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c3e:	4868      	ldr	r0, [pc, #416]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001c40:	f004 fc4b 	bl	80064da <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8001c44:	230a      	movs	r3, #10
 8001c46:	2202      	movs	r2, #2
 8001c48:	4966      	ldr	r1, [pc, #408]	@ (8001de4 <ProcessJsonCommand+0x284>)
 8001c4a:	4865      	ldr	r0, [pc, #404]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001c4c:	f004 fc45 	bl	80064da <HAL_UART_Transmit>

    // 解析风扇状态
    ParseJsonValue(cleanJson, "fan", value, sizeof(value));
 8001c50:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c54:	230a      	movs	r3, #10
 8001c56:	4967      	ldr	r1, [pc, #412]	@ (8001df4 <ProcessJsonCommand+0x294>)
 8001c58:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001c5a:	f000 fab5 	bl	80021c8 <ParseJsonValue>
    sprintf(txBuffer, "Parse fan=%s\r\n", value);
 8001c5e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c62:	461a      	mov	r2, r3
 8001c64:	4964      	ldr	r1, [pc, #400]	@ (8001df8 <ProcessJsonCommand+0x298>)
 8001c66:	485d      	ldr	r0, [pc, #372]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c68:	f006 f956 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001c6c:	485b      	ldr	r0, [pc, #364]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c6e:	f7fe fa79 	bl	8000164 <strlen>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	2364      	movs	r3, #100	@ 0x64
 8001c78:	4958      	ldr	r1, [pc, #352]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001c7a:	4859      	ldr	r0, [pc, #356]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001c7c:	f004 fc2d 	bl	80064da <HAL_UART_Transmit>
    
    if (strlen(value) > 0) {
 8001c80:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d07a      	beq.n	8001d80 <ProcessJsonCommand+0x220>
        validData = 1;  // 至少有一个有效字段
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        // 清理可能的额外字符（比如多余的引号）
        char cleanValue[10];
        int i = 0, j = 0;
 8001c90:	2300      	movs	r3, #0
 8001c92:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c94:	2300      	movs	r3, #0
 8001c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
        
        // 复制值中的有效字符
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001c98:	e01c      	b.n	8001cd4 <ProcessJsonCommand+0x174>
            if (value[i] >= 'a' && value[i] <= 'z') {
 8001c9a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001c9e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b60      	cmp	r3, #96	@ 0x60
 8001ca6:	d912      	bls.n	8001cce <ProcessJsonCommand+0x16e>
 8001ca8:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b7a      	cmp	r3, #122	@ 0x7a
 8001cb4:	d80b      	bhi.n	8001cce <ProcessJsonCommand+0x16e>
                cleanValue[j++] = value[i];
 8001cb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001cbc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001cc0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8001cc2:	440a      	add	r2, r1
 8001cc4:	7812      	ldrb	r2, [r2, #0]
 8001cc6:	3360      	adds	r3, #96	@ 0x60
 8001cc8:	443b      	add	r3, r7
 8001cca:	f803 2c40 	strb.w	r2, [r3, #-64]
            }
            i++;
 8001cce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	653b      	str	r3, [r7, #80]	@ 0x50
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001cd4:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001cd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001cda:	4413      	add	r3, r2
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d002      	beq.n	8001ce8 <ProcessJsonCommand+0x188>
 8001ce2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d9d8      	bls.n	8001c9a <ProcessJsonCommand+0x13a>
        }
        cleanValue[j] = '\0';
 8001ce8:	f107 0220 	add.w	r2, r7, #32
 8001cec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001cee:	4413      	add	r3, r2
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	701a      	strb	r2, [r3, #0]
        
        sprintf(txBuffer, "Clean value: '%s'\r\n", cleanValue);
 8001cf4:	f107 0320 	add.w	r3, r7, #32
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4940      	ldr	r1, [pc, #256]	@ (8001dfc <ProcessJsonCommand+0x29c>)
 8001cfc:	4837      	ldr	r0, [pc, #220]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001cfe:	f006 f90b 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001d02:	4836      	ldr	r0, [pc, #216]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001d04:	f7fe fa2e 	bl	8000164 <strlen>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2364      	movs	r3, #100	@ 0x64
 8001d0e:	4933      	ldr	r1, [pc, #204]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001d10:	4833      	ldr	r0, [pc, #204]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001d12:	f004 fbe2 	bl	80064da <HAL_UART_Transmit>
        
        // 比较清理后的值
        if (strncmp(cleanValue, "on", 2) == 0) {
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4938      	ldr	r1, [pc, #224]	@ (8001e00 <ProcessJsonCommand+0x2a0>)
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f006 f94b 	bl	8007fba <strncmp>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d110      	bne.n	8001d4c <ProcessJsonCommand+0x1ec>
            if (newFanStatus != 1) {
 8001d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d026      	beq.n	8001d80 <ProcessJsonCommand+0x220>
                newFanStatus = 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                statusChanged = 1;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Fan status will change: ON\r\n", 28, 100);
 8001d3e:	2364      	movs	r3, #100	@ 0x64
 8001d40:	221c      	movs	r2, #28
 8001d42:	4930      	ldr	r1, [pc, #192]	@ (8001e04 <ProcessJsonCommand+0x2a4>)
 8001d44:	4826      	ldr	r0, [pc, #152]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001d46:	f004 fbc8 	bl	80064da <HAL_UART_Transmit>
 8001d4a:	e019      	b.n	8001d80 <ProcessJsonCommand+0x220>
            }
        } else if (strncmp(cleanValue, "off", 3) == 0) {
 8001d4c:	f107 0320 	add.w	r3, r7, #32
 8001d50:	2203      	movs	r2, #3
 8001d52:	492d      	ldr	r1, [pc, #180]	@ (8001e08 <ProcessJsonCommand+0x2a8>)
 8001d54:	4618      	mov	r0, r3
 8001d56:	f006 f930 	bl	8007fba <strncmp>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d10f      	bne.n	8001d80 <ProcessJsonCommand+0x220>
            if (newFanStatus != 0) {
 8001d60:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <ProcessJsonCommand+0x220>
                newFanStatus = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                statusChanged = 1;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Fan status will change: OFF\r\n", 29, 100);
 8001d74:	2364      	movs	r3, #100	@ 0x64
 8001d76:	221d      	movs	r2, #29
 8001d78:	4924      	ldr	r1, [pc, #144]	@ (8001e0c <ProcessJsonCommand+0x2ac>)
 8001d7a:	4819      	ldr	r0, [pc, #100]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001d7c:	f004 fbad 	bl	80064da <HAL_UART_Transmit>
            }
        }
    }

    // 解析排气扇状态
    ParseJsonValue(cleanJson, "exh", value, sizeof(value));
 8001d80:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001d84:	230a      	movs	r3, #10
 8001d86:	4922      	ldr	r1, [pc, #136]	@ (8001e10 <ProcessJsonCommand+0x2b0>)
 8001d88:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001d8a:	f000 fa1d 	bl	80021c8 <ParseJsonValue>
    sprintf(txBuffer, "Parse exh=%s\r\n", value);
 8001d8e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d92:	461a      	mov	r2, r3
 8001d94:	491f      	ldr	r1, [pc, #124]	@ (8001e14 <ProcessJsonCommand+0x2b4>)
 8001d96:	4811      	ldr	r0, [pc, #68]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001d98:	f006 f8be 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001d9c:	480f      	ldr	r0, [pc, #60]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001d9e:	f7fe f9e1 	bl	8000164 <strlen>
 8001da2:	4603      	mov	r3, r0
 8001da4:	b29a      	uxth	r2, r3
 8001da6:	2364      	movs	r3, #100	@ 0x64
 8001da8:	490c      	ldr	r1, [pc, #48]	@ (8001ddc <ProcessJsonCommand+0x27c>)
 8001daa:	480d      	ldr	r0, [pc, #52]	@ (8001de0 <ProcessJsonCommand+0x280>)
 8001dac:	f004 fb95 	bl	80064da <HAL_UART_Transmit>
    
    if (strlen(value) > 0) {
 8001db0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f000 80a1 	beq.w	8001efe <ProcessJsonCommand+0x39e>
        validData = 1;  // 至少有一个有效字段
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        // 清理可能的额外字符（比如多余的引号）
        char cleanValue[10];
        int i = 0, j = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	647b      	str	r3, [r7, #68]	@ 0x44
        
        // 复制值中的有效字符
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001dca:	e042      	b.n	8001e52 <ProcessJsonCommand+0x2f2>
 8001dcc:	2000024e 	.word	0x2000024e
 8001dd0:	2000024f 	.word	0x2000024f
 8001dd4:	20000250 	.word	0x20000250
 8001dd8:	080089e8 	.word	0x080089e8
 8001ddc:	200000c0 	.word	0x200000c0
 8001de0:	20000368 	.word	0x20000368
 8001de4:	080089b4 	.word	0x080089b4
 8001de8:	08008a08 	.word	0x08008a08
 8001dec:	08008a3c 	.word	0x08008a3c
 8001df0:	08008a6c 	.word	0x08008a6c
 8001df4:	08008a80 	.word	0x08008a80
 8001df8:	08008a84 	.word	0x08008a84
 8001dfc:	08008a94 	.word	0x08008a94
 8001e00:	08008aa8 	.word	0x08008aa8
 8001e04:	08008aac 	.word	0x08008aac
 8001e08:	08008acc 	.word	0x08008acc
 8001e0c:	08008ad0 	.word	0x08008ad0
 8001e10:	08008af0 	.word	0x08008af0
 8001e14:	08008af4 	.word	0x08008af4
            if (value[i] >= 'a' && value[i] <= 'z') {
 8001e18:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e1e:	4413      	add	r3, r2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b60      	cmp	r3, #96	@ 0x60
 8001e24:	d912      	bls.n	8001e4c <ProcessJsonCommand+0x2ec>
 8001e26:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e2c:	4413      	add	r3, r2
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b7a      	cmp	r3, #122	@ 0x7a
 8001e32:	d80b      	bhi.n	8001e4c <ProcessJsonCommand+0x2ec>
                cleanValue[j++] = value[i];
 8001e34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e36:	1c5a      	adds	r2, r3, #1
 8001e38:	647a      	str	r2, [r7, #68]	@ 0x44
 8001e3a:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001e3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001e40:	440a      	add	r2, r1
 8001e42:	7812      	ldrb	r2, [r2, #0]
 8001e44:	3360      	adds	r3, #96	@ 0x60
 8001e46:	443b      	add	r3, r7
 8001e48:	f803 2c4c 	strb.w	r2, [r3, #-76]
            }
            i++;
 8001e4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e4e:	3301      	adds	r3, #1
 8001e50:	64bb      	str	r3, [r7, #72]	@ 0x48
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001e52:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001e56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001e58:	4413      	add	r3, r2
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <ProcessJsonCommand+0x306>
 8001e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d9d8      	bls.n	8001e18 <ProcessJsonCommand+0x2b8>
        }
        cleanValue[j] = '\0';
 8001e66:	f107 0214 	add.w	r2, r7, #20
 8001e6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e6c:	4413      	add	r3, r2
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
        
        sprintf(txBuffer, "Clean value: '%s'\r\n", cleanValue);
 8001e72:	f107 0314 	add.w	r3, r7, #20
 8001e76:	461a      	mov	r2, r3
 8001e78:	49b7      	ldr	r1, [pc, #732]	@ (8002158 <ProcessJsonCommand+0x5f8>)
 8001e7a:	48b8      	ldr	r0, [pc, #736]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001e7c:	f006 f84c 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001e80:	48b6      	ldr	r0, [pc, #728]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001e82:	f7fe f96f 	bl	8000164 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	2364      	movs	r3, #100	@ 0x64
 8001e8c:	49b3      	ldr	r1, [pc, #716]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001e8e:	48b4      	ldr	r0, [pc, #720]	@ (8002160 <ProcessJsonCommand+0x600>)
 8001e90:	f004 fb23 	bl	80064da <HAL_UART_Transmit>
        
        // 比较清理后的值
        if (strncmp(cleanValue, "on", 2) == 0) {
 8001e94:	f107 0314 	add.w	r3, r7, #20
 8001e98:	2202      	movs	r2, #2
 8001e9a:	49b2      	ldr	r1, [pc, #712]	@ (8002164 <ProcessJsonCommand+0x604>)
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f006 f88c 	bl	8007fba <strncmp>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d110      	bne.n	8001eca <ProcessJsonCommand+0x36a>
            if (newExhaustStatus != 1) {
 8001ea8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d026      	beq.n	8001efe <ProcessJsonCommand+0x39e>
                newExhaustStatus = 1;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                statusChanged = 1;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Exhaust status will change: ON\r\n", 32, 100);
 8001ebc:	2364      	movs	r3, #100	@ 0x64
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	49a9      	ldr	r1, [pc, #676]	@ (8002168 <ProcessJsonCommand+0x608>)
 8001ec2:	48a7      	ldr	r0, [pc, #668]	@ (8002160 <ProcessJsonCommand+0x600>)
 8001ec4:	f004 fb09 	bl	80064da <HAL_UART_Transmit>
 8001ec8:	e019      	b.n	8001efe <ProcessJsonCommand+0x39e>
            }
        } else if (strncmp(cleanValue, "off", 3) == 0) {
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2203      	movs	r2, #3
 8001ed0:	49a6      	ldr	r1, [pc, #664]	@ (800216c <ProcessJsonCommand+0x60c>)
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f006 f871 	bl	8007fba <strncmp>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <ProcessJsonCommand+0x39e>
            if (newExhaustStatus != 0) {
 8001ede:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00b      	beq.n	8001efe <ProcessJsonCommand+0x39e>
                newExhaustStatus = 0;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                statusChanged = 1;
 8001eec:	2301      	movs	r3, #1
 8001eee:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Exhaust status will change: OFF\r\n", 33, 100);
 8001ef2:	2364      	movs	r3, #100	@ 0x64
 8001ef4:	2221      	movs	r2, #33	@ 0x21
 8001ef6:	499e      	ldr	r1, [pc, #632]	@ (8002170 <ProcessJsonCommand+0x610>)
 8001ef8:	4899      	ldr	r0, [pc, #612]	@ (8002160 <ProcessJsonCommand+0x600>)
 8001efa:	f004 faee 	bl	80064da <HAL_UART_Transmit>
            }
        }
    }

    // 解析水泵状态
    ParseJsonValue(cleanJson, "pum", value, sizeof(value));
 8001efe:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001f02:	230a      	movs	r3, #10
 8001f04:	499b      	ldr	r1, [pc, #620]	@ (8002174 <ProcessJsonCommand+0x614>)
 8001f06:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8001f08:	f000 f95e 	bl	80021c8 <ParseJsonValue>
    sprintf(txBuffer, "Parse pum=%s\r\n", value);
 8001f0c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f10:	461a      	mov	r2, r3
 8001f12:	4999      	ldr	r1, [pc, #612]	@ (8002178 <ProcessJsonCommand+0x618>)
 8001f14:	4891      	ldr	r0, [pc, #580]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001f16:	f005 ffff 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001f1a:	4890      	ldr	r0, [pc, #576]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001f1c:	f7fe f922 	bl	8000164 <strlen>
 8001f20:	4603      	mov	r3, r0
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	2364      	movs	r3, #100	@ 0x64
 8001f26:	498d      	ldr	r1, [pc, #564]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001f28:	488d      	ldr	r0, [pc, #564]	@ (8002160 <ProcessJsonCommand+0x600>)
 8001f2a:	f004 fad6 	bl	80064da <HAL_UART_Transmit>
    
    if (strlen(value) > 0) {
 8001f2e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	f000 809e 	beq.w	8002076 <ProcessJsonCommand+0x516>
        validData = 1;  // 至少有一个有效字段
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
        // 清理可能的额外字符（比如多余的引号）
        char cleanValue[10];
        int i = 0, j = 0;
 8001f40:	2300      	movs	r3, #0
 8001f42:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f44:	2300      	movs	r3, #0
 8001f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        
        // 复制值中的有效字符
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001f48:	e01c      	b.n	8001f84 <ProcessJsonCommand+0x424>
            if (value[i] >= 'a' && value[i] <= 'z') {
 8001f4a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f50:	4413      	add	r3, r2
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b60      	cmp	r3, #96	@ 0x60
 8001f56:	d912      	bls.n	8001f7e <ProcessJsonCommand+0x41e>
 8001f58:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001f5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f5e:	4413      	add	r3, r2
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	2b7a      	cmp	r3, #122	@ 0x7a
 8001f64:	d80b      	bhi.n	8001f7e <ProcessJsonCommand+0x41e>
                cleanValue[j++] = value[i];
 8001f66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f6c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001f70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001f72:	440a      	add	r2, r1
 8001f74:	7812      	ldrb	r2, [r2, #0]
 8001f76:	3360      	adds	r3, #96	@ 0x60
 8001f78:	443b      	add	r3, r7
 8001f7a:	f803 2c58 	strb.w	r2, [r3, #-88]
            }
            i++;
 8001f7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f80:	3301      	adds	r3, #1
 8001f82:	643b      	str	r3, [r7, #64]	@ 0x40
        while (value[i] != '\0' && j < sizeof(cleanValue) - 1) {
 8001f84:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8001f88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f8a:	4413      	add	r3, r2
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d002      	beq.n	8001f98 <ProcessJsonCommand+0x438>
 8001f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f94:	2b08      	cmp	r3, #8
 8001f96:	d9d8      	bls.n	8001f4a <ProcessJsonCommand+0x3ea>
        }
        cleanValue[j] = '\0';
 8001f98:	f107 0208 	add.w	r2, r7, #8
 8001f9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f9e:	4413      	add	r3, r2
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
        
        sprintf(txBuffer, "Clean value: '%s'\r\n", cleanValue);
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	461a      	mov	r2, r3
 8001faa:	496b      	ldr	r1, [pc, #428]	@ (8002158 <ProcessJsonCommand+0x5f8>)
 8001fac:	486b      	ldr	r0, [pc, #428]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001fae:	f005 ffb3 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001fb2:	486a      	ldr	r0, [pc, #424]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001fb4:	f7fe f8d6 	bl	8000164 <strlen>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	2364      	movs	r3, #100	@ 0x64
 8001fbe:	4967      	ldr	r1, [pc, #412]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001fc0:	4867      	ldr	r0, [pc, #412]	@ (8002160 <ProcessJsonCommand+0x600>)
 8001fc2:	f004 fa8a 	bl	80064da <HAL_UART_Transmit>
        
        // 检查是否是"n"，如果是，应该是"on"的一部分
        if (strcmp(cleanValue, "n") == 0) {
 8001fc6:	f107 0308 	add.w	r3, r7, #8
 8001fca:	496c      	ldr	r1, [pc, #432]	@ (800217c <ProcessJsonCommand+0x61c>)
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7fe f8bf 	bl	8000150 <strcmp>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d119      	bne.n	800200c <ProcessJsonCommand+0x4ac>
            strcpy(cleanValue, "on");
 8001fd8:	f107 0308 	add.w	r3, r7, #8
 8001fdc:	4a61      	ldr	r2, [pc, #388]	@ (8002164 <ProcessJsonCommand+0x604>)
 8001fde:	6812      	ldr	r2, [r2, #0]
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	8019      	strh	r1, [r3, #0]
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	0c12      	lsrs	r2, r2, #16
 8001fe8:	701a      	strb	r2, [r3, #0]
            sprintf(txBuffer, "Corrected to: '%s'\r\n", cleanValue);
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	461a      	mov	r2, r3
 8001ff0:	4963      	ldr	r1, [pc, #396]	@ (8002180 <ProcessJsonCommand+0x620>)
 8001ff2:	485a      	ldr	r0, [pc, #360]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001ff4:	f005 ff90 	bl	8007f18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8001ff8:	4858      	ldr	r0, [pc, #352]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8001ffa:	f7fe f8b3 	bl	8000164 <strlen>
 8001ffe:	4603      	mov	r3, r0
 8002000:	b29a      	uxth	r2, r3
 8002002:	2364      	movs	r3, #100	@ 0x64
 8002004:	4955      	ldr	r1, [pc, #340]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8002006:	4856      	ldr	r0, [pc, #344]	@ (8002160 <ProcessJsonCommand+0x600>)
 8002008:	f004 fa67 	bl	80064da <HAL_UART_Transmit>
        }
        
        // 比较清理后的值
        if (strncmp(cleanValue, "on", 2) == 0) {
 800200c:	f107 0308 	add.w	r3, r7, #8
 8002010:	2202      	movs	r2, #2
 8002012:	4954      	ldr	r1, [pc, #336]	@ (8002164 <ProcessJsonCommand+0x604>)
 8002014:	4618      	mov	r0, r3
 8002016:	f005 ffd0 	bl	8007fba <strncmp>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d110      	bne.n	8002042 <ProcessJsonCommand+0x4e2>
            if (newPumpStatus != 1) {
 8002020:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8002024:	2b01      	cmp	r3, #1
 8002026:	d026      	beq.n	8002076 <ProcessJsonCommand+0x516>
                newPumpStatus = 1;
 8002028:	2301      	movs	r3, #1
 800202a:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
                statusChanged = 1;
 800202e:	2301      	movs	r3, #1
 8002030:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Pump status will change: ON\r\n", 29, 100);
 8002034:	2364      	movs	r3, #100	@ 0x64
 8002036:	221d      	movs	r2, #29
 8002038:	4952      	ldr	r1, [pc, #328]	@ (8002184 <ProcessJsonCommand+0x624>)
 800203a:	4849      	ldr	r0, [pc, #292]	@ (8002160 <ProcessJsonCommand+0x600>)
 800203c:	f004 fa4d 	bl	80064da <HAL_UART_Transmit>
 8002040:	e019      	b.n	8002076 <ProcessJsonCommand+0x516>
            }
        } else if (strncmp(cleanValue, "off", 3) == 0) {
 8002042:	f107 0308 	add.w	r3, r7, #8
 8002046:	2203      	movs	r2, #3
 8002048:	4948      	ldr	r1, [pc, #288]	@ (800216c <ProcessJsonCommand+0x60c>)
 800204a:	4618      	mov	r0, r3
 800204c:	f005 ffb5 	bl	8007fba <strncmp>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d10f      	bne.n	8002076 <ProcessJsonCommand+0x516>
            if (newPumpStatus != 0) {
 8002056:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00b      	beq.n	8002076 <ProcessJsonCommand+0x516>
                newPumpStatus = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
                statusChanged = 1;
 8002064:	2301      	movs	r3, #1
 8002066:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                HAL_UART_Transmit(&huart2, (uint8_t*)"Pump status will change: OFF\r\n", 30, 100);
 800206a:	2364      	movs	r3, #100	@ 0x64
 800206c:	221e      	movs	r2, #30
 800206e:	4946      	ldr	r1, [pc, #280]	@ (8002188 <ProcessJsonCommand+0x628>)
 8002070:	483b      	ldr	r0, [pc, #236]	@ (8002160 <ProcessJsonCommand+0x600>)
 8002072:	f004 fa32 	bl	80064da <HAL_UART_Transmit>
            }
        }
    }

    // 处理特殊情况 - 如果找不到exh但存在缩写或部分字段
    if (strlen(value) == 0) {
 8002076:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d126      	bne.n	80020ce <ProcessJsonCommand+0x56e>
        // 尝试直接在JSON中查找"on,",可能是"exh":on的情况
        if (strstr(cleanJson, ":on,") != NULL || strstr(cleanJson, ":on}") != NULL) {
 8002080:	4942      	ldr	r1, [pc, #264]	@ (800218c <ProcessJsonCommand+0x62c>)
 8002082:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002084:	f005 ffbe 	bl	8008004 <strstr>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d106      	bne.n	800209c <ProcessJsonCommand+0x53c>
 800208e:	4940      	ldr	r1, [pc, #256]	@ (8002190 <ProcessJsonCommand+0x630>)
 8002090:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002092:	f005 ffb7 	bl	8008004 <strstr>
 8002096:	4603      	mov	r3, r0
 8002098:	2b00      	cmp	r3, #0
 800209a:	d018      	beq.n	80020ce <ProcessJsonCommand+0x56e>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Found raw ':on' pattern, assuming exhaust=on\r\n", 45, 100);
 800209c:	2364      	movs	r3, #100	@ 0x64
 800209e:	222d      	movs	r2, #45	@ 0x2d
 80020a0:	493c      	ldr	r1, [pc, #240]	@ (8002194 <ProcessJsonCommand+0x634>)
 80020a2:	482f      	ldr	r0, [pc, #188]	@ (8002160 <ProcessJsonCommand+0x600>)
 80020a4:	f004 fa19 	bl	80064da <HAL_UART_Transmit>
            if (newExhaustStatus != 1) {
 80020a8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d00e      	beq.n	80020ce <ProcessJsonCommand+0x56e>
                newExhaustStatus = 1;
 80020b0:	2301      	movs	r3, #1
 80020b2:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
                statusChanged = 1;
 80020b6:	2301      	movs	r3, #1
 80020b8:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
                validData = 1;
 80020bc:	2301      	movs	r3, #1
 80020be:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
                HAL_UART_Transmit(&huart2, (uint8_t*)"Exhaust status will change: ON\r\n", 32, 100);
 80020c2:	2364      	movs	r3, #100	@ 0x64
 80020c4:	2220      	movs	r2, #32
 80020c6:	4928      	ldr	r1, [pc, #160]	@ (8002168 <ProcessJsonCommand+0x608>)
 80020c8:	4825      	ldr	r0, [pc, #148]	@ (8002160 <ProcessJsonCommand+0x600>)
 80020ca:	f004 fa06 	bl	80064da <HAL_UART_Transmit>
            }
        }
    }

    // 检查是否有任何有效字段
    if (!validData) {
 80020ce:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <ProcessJsonCommand+0x584>
        // 没有有效字段，输出调试信息
        HAL_UART_Transmit(&huart2, (uint8_t*)"Error: No valid control fields found\r\n", 38, 100);
 80020d6:	2364      	movs	r3, #100	@ 0x64
 80020d8:	2226      	movs	r2, #38	@ 0x26
 80020da:	492f      	ldr	r1, [pc, #188]	@ (8002198 <ProcessJsonCommand+0x638>)
 80020dc:	4820      	ldr	r0, [pc, #128]	@ (8002160 <ProcessJsonCommand+0x600>)
 80020de:	f004 f9fc 	bl	80064da <HAL_UART_Transmit>
        return;
 80020e2:	e069      	b.n	80021b8 <ProcessJsonCommand+0x658>
    }

    // 如果状态发生变化，更新设备状态
    if (statusChanged) {
 80020e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d05f      	beq.n	80021ac <ProcessJsonCommand+0x64c>
        sprintf(txBuffer, "Update device status: Fan=%s, Exhaust=%s, Pump=%s", 
 80020ec:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <ProcessJsonCommand+0x598>
 80020f4:	4a29      	ldr	r2, [pc, #164]	@ (800219c <ProcessJsonCommand+0x63c>)
 80020f6:	e000      	b.n	80020fa <ProcessJsonCommand+0x59a>
 80020f8:	4a29      	ldr	r2, [pc, #164]	@ (80021a0 <ProcessJsonCommand+0x640>)
 80020fa:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d001      	beq.n	8002106 <ProcessJsonCommand+0x5a6>
 8002102:	4926      	ldr	r1, [pc, #152]	@ (800219c <ProcessJsonCommand+0x63c>)
 8002104:	e000      	b.n	8002108 <ProcessJsonCommand+0x5a8>
 8002106:	4926      	ldr	r1, [pc, #152]	@ (80021a0 <ProcessJsonCommand+0x640>)
 8002108:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <ProcessJsonCommand+0x5b4>
 8002110:	4b22      	ldr	r3, [pc, #136]	@ (800219c <ProcessJsonCommand+0x63c>)
 8002112:	e000      	b.n	8002116 <ProcessJsonCommand+0x5b6>
 8002114:	4b22      	ldr	r3, [pc, #136]	@ (80021a0 <ProcessJsonCommand+0x640>)
 8002116:	9300      	str	r3, [sp, #0]
 8002118:	460b      	mov	r3, r1
 800211a:	4922      	ldr	r1, [pc, #136]	@ (80021a4 <ProcessJsonCommand+0x644>)
 800211c:	480f      	ldr	r0, [pc, #60]	@ (800215c <ProcessJsonCommand+0x5fc>)
 800211e:	f005 fefb 	bl	8007f18 <siprintf>
                newFanStatus ? "ON" : "OFF", 
                newExhaustStatus ? "ON" : "OFF", 
                newPumpStatus ? "ON" : "OFF");
        HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8002122:	480e      	ldr	r0, [pc, #56]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8002124:	f7fe f81e 	bl	8000164 <strlen>
 8002128:	4603      	mov	r3, r0
 800212a:	b29a      	uxth	r2, r3
 800212c:	2364      	movs	r3, #100	@ 0x64
 800212e:	490b      	ldr	r1, [pc, #44]	@ (800215c <ProcessJsonCommand+0x5fc>)
 8002130:	480b      	ldr	r0, [pc, #44]	@ (8002160 <ProcessJsonCommand+0x600>)
 8002132:	f004 f9d2 	bl	80064da <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t*)"\r\n", 2, 10);
 8002136:	230a      	movs	r3, #10
 8002138:	2202      	movs	r2, #2
 800213a:	491b      	ldr	r1, [pc, #108]	@ (80021a8 <ProcessJsonCommand+0x648>)
 800213c:	4808      	ldr	r0, [pc, #32]	@ (8002160 <ProcessJsonCommand+0x600>)
 800213e:	f004 f9cc 	bl	80064da <HAL_UART_Transmit>
        
        // 更新设备状态
        UpdateDeviceStatus(newFanStatus, newExhaustStatus, newPumpStatus);
 8002142:	f897 205d 	ldrb.w	r2, [r7, #93]	@ 0x5d
 8002146:	f897 105e 	ldrb.w	r1, [r7, #94]	@ 0x5e
 800214a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fc2a 	bl	80019a8 <UpdateDeviceStatus>
 8002154:	e030      	b.n	80021b8 <ProcessJsonCommand+0x658>
 8002156:	bf00      	nop
 8002158:	08008a94 	.word	0x08008a94
 800215c:	200000c0 	.word	0x200000c0
 8002160:	20000368 	.word	0x20000368
 8002164:	08008aa8 	.word	0x08008aa8
 8002168:	08008b04 	.word	0x08008b04
 800216c:	08008acc 	.word	0x08008acc
 8002170:	08008b28 	.word	0x08008b28
 8002174:	08008b4c 	.word	0x08008b4c
 8002178:	08008b50 	.word	0x08008b50
 800217c:	08008b60 	.word	0x08008b60
 8002180:	08008b64 	.word	0x08008b64
 8002184:	08008b7c 	.word	0x08008b7c
 8002188:	08008b9c 	.word	0x08008b9c
 800218c:	08008bbc 	.word	0x08008bbc
 8002190:	08008bc4 	.word	0x08008bc4
 8002194:	08008bcc 	.word	0x08008bcc
 8002198:	08008bfc 	.word	0x08008bfc
 800219c:	08008970 	.word	0x08008970
 80021a0:	08008974 	.word	0x08008974
 80021a4:	08008c24 	.word	0x08008c24
 80021a8:	080089b4 	.word	0x080089b4
    } else {
        HAL_UART_Transmit(&huart2, (uint8_t*)"Device status unchanged\r\n", 25, 100);
 80021ac:	2364      	movs	r3, #100	@ 0x64
 80021ae:	2219      	movs	r2, #25
 80021b0:	4903      	ldr	r1, [pc, #12]	@ (80021c0 <ProcessJsonCommand+0x660>)
 80021b2:	4804      	ldr	r0, [pc, #16]	@ (80021c4 <ProcessJsonCommand+0x664>)
 80021b4:	f004 f991 	bl	80064da <HAL_UART_Transmit>
    }
}
 80021b8:	3760      	adds	r7, #96	@ 0x60
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	08008c58 	.word	0x08008c58
 80021c4:	20000368 	.word	0x20000368

080021c8 <ParseJsonValue>:

// 从JSON字符串中提取指定键的值
static void ParseJsonValue(char* json, const char* key, char* value, uint8_t maxLen)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b0a0      	sub	sp, #128	@ 0x80
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	607a      	str	r2, [r7, #4]
 80021d4:	70fb      	strb	r3, [r7, #3]
    char* start;
    char* end;
    char debugMsg[64];
    
    // 初始化value为空字符串
    value[0] = '\0';
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

    // 构造搜索键的多种可能格式
    // 尝试搜索标准格式 "key":"value"
    sprintf(searchKey, "\"%s\":\"", key);
 80021dc:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021e0:	68ba      	ldr	r2, [r7, #8]
 80021e2:	4994      	ldr	r1, [pc, #592]	@ (8002434 <ParseJsonValue+0x26c>)
 80021e4:	4618      	mov	r0, r3
 80021e6:	f005 fe97 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)"Searching standard format\r\n", 26, 100);
 80021ea:	2364      	movs	r3, #100	@ 0x64
 80021ec:	221a      	movs	r2, #26
 80021ee:	4992      	ldr	r1, [pc, #584]	@ (8002438 <ParseJsonValue+0x270>)
 80021f0:	4892      	ldr	r0, [pc, #584]	@ (800243c <ParseJsonValue+0x274>)
 80021f2:	f004 f972 	bl	80064da <HAL_UART_Transmit>
    start = strstr(json, searchKey);
 80021f6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80021fa:	4619      	mov	r1, r3
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f005 ff01 	bl	8008004 <strstr>
 8002202:	67f8      	str	r0, [r7, #124]	@ 0x7c
    
    // 如果找不到，尝试搜索缺少冒号的格式 "key""value"
    if (start == NULL) {
 8002204:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d120      	bne.n	800224c <ParseJsonValue+0x84>
        sprintf(searchKey, "\"%s\"\"", key);
 800220a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800220e:	68ba      	ldr	r2, [r7, #8]
 8002210:	498b      	ldr	r1, [pc, #556]	@ (8002440 <ParseJsonValue+0x278>)
 8002212:	4618      	mov	r0, r3
 8002214:	f005 fe80 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Searching missing colon format\r\n", 32, 100);
 8002218:	2364      	movs	r3, #100	@ 0x64
 800221a:	2220      	movs	r2, #32
 800221c:	4989      	ldr	r1, [pc, #548]	@ (8002444 <ParseJsonValue+0x27c>)
 800221e:	4887      	ldr	r0, [pc, #540]	@ (800243c <ParseJsonValue+0x274>)
 8002220:	f004 f95b 	bl	80064da <HAL_UART_Transmit>
        start = strstr(json, searchKey);
 8002224:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002228:	4619      	mov	r1, r3
 800222a:	68f8      	ldr	r0, [r7, #12]
 800222c:	f005 feea 	bl	8008004 <strstr>
 8002230:	67f8      	str	r0, [r7, #124]	@ 0x7c
        
        if (start) {
 8002232:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002234:	2b00      	cmp	r3, #0
 8002236:	d012      	beq.n	800225e <ParseJsonValue+0x96>
            // 移动到值的开始位置
            start += strlen(searchKey);
 8002238:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800223c:	4618      	mov	r0, r3
 800223e:	f7fd ff91 	bl	8000164 <strlen>
 8002242:	4602      	mov	r2, r0
 8002244:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002246:	4413      	add	r3, r2
 8002248:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800224a:	e008      	b.n	800225e <ParseJsonValue+0x96>
        }
    } else {
        // 移动到值的开始位置
        start += strlen(searchKey);
 800224c:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002250:	4618      	mov	r0, r3
 8002252:	f7fd ff87 	bl	8000164 <strlen>
 8002256:	4602      	mov	r2, r0
 8002258:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800225a:	4413      	add	r3, r2
 800225c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    }
    
    // 尝试搜索没有引号的格式 "key":value 或 key:value 或 key:"value"
    if (start == NULL) {
 800225e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002260:	2b00      	cmp	r3, #0
 8002262:	d16e      	bne.n	8002342 <ParseJsonValue+0x17a>
        // 先尝试带引号的key
        sprintf(searchKey, "\"%s\":", key);
 8002264:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002268:	68ba      	ldr	r2, [r7, #8]
 800226a:	4977      	ldr	r1, [pc, #476]	@ (8002448 <ParseJsonValue+0x280>)
 800226c:	4618      	mov	r0, r3
 800226e:	f005 fe53 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Searching quoted key format\r\n", 29, 100);
 8002272:	2364      	movs	r3, #100	@ 0x64
 8002274:	221d      	movs	r2, #29
 8002276:	4975      	ldr	r1, [pc, #468]	@ (800244c <ParseJsonValue+0x284>)
 8002278:	4870      	ldr	r0, [pc, #448]	@ (800243c <ParseJsonValue+0x274>)
 800227a:	f004 f92e 	bl	80064da <HAL_UART_Transmit>
        start = strstr(json, searchKey);
 800227e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002282:	4619      	mov	r1, r3
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f005 febd 	bl	8008004 <strstr>
 800228a:	67f8      	str	r0, [r7, #124]	@ 0x7c
        
        if (start) {
 800228c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800228e:	2b00      	cmp	r3, #0
 8002290:	d015      	beq.n	80022be <ParseJsonValue+0xf6>
            // 移动到值的开始位置
            start += strlen(searchKey);
 8002292:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002296:	4618      	mov	r0, r3
 8002298:	f7fd ff64 	bl	8000164 <strlen>
 800229c:	4602      	mov	r2, r0
 800229e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022a0:	4413      	add	r3, r2
 80022a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
            // 跳过可能的空格
            while (*start == ' ' || *start == '\t') {
 80022a4:	e002      	b.n	80022ac <ParseJsonValue+0xe4>
                start++;
 80022a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022a8:	3301      	adds	r3, #1
 80022aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
            while (*start == ' ' || *start == '\t') {
 80022ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d0f8      	beq.n	80022a6 <ParseJsonValue+0xde>
 80022b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b09      	cmp	r3, #9
 80022ba:	d0f4      	beq.n	80022a6 <ParseJsonValue+0xde>
 80022bc:	e041      	b.n	8002342 <ParseJsonValue+0x17a>
            }
        } else {
            // 再尝试不带引号的key
            sprintf(searchKey, "%s:", key);
 80022be:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	4962      	ldr	r1, [pc, #392]	@ (8002450 <ParseJsonValue+0x288>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f005 fe26 	bl	8007f18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)"Searching unquoted key format\r\n", 31, 100);
 80022cc:	2364      	movs	r3, #100	@ 0x64
 80022ce:	221f      	movs	r2, #31
 80022d0:	4960      	ldr	r1, [pc, #384]	@ (8002454 <ParseJsonValue+0x28c>)
 80022d2:	485a      	ldr	r0, [pc, #360]	@ (800243c <ParseJsonValue+0x274>)
 80022d4:	f004 f901 	bl	80064da <HAL_UART_Transmit>
            start = strstr(json, searchKey);
 80022d8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80022dc:	4619      	mov	r1, r3
 80022de:	68f8      	ldr	r0, [r7, #12]
 80022e0:	f005 fe90 	bl	8008004 <strstr>
 80022e4:	67f8      	str	r0, [r7, #124]	@ 0x7c
            
            if (start) {
 80022e6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02a      	beq.n	8002342 <ParseJsonValue+0x17a>
                // 确保这是一个独立的key（前面是空格、逗号或大括号）
                if (start == json || start[-1] == ' ' || start[-1] == ',' || start[-1] == '{') {
 80022ec:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d00e      	beq.n	8002312 <ParseJsonValue+0x14a>
 80022f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80022f6:	3b01      	subs	r3, #1
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b20      	cmp	r3, #32
 80022fc:	d009      	beq.n	8002312 <ParseJsonValue+0x14a>
 80022fe:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002300:	3b01      	subs	r3, #1
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	2b2c      	cmp	r3, #44	@ 0x2c
 8002306:	d004      	beq.n	8002312 <ParseJsonValue+0x14a>
 8002308:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800230a:	3b01      	subs	r3, #1
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b7b      	cmp	r3, #123	@ 0x7b
 8002310:	d115      	bne.n	800233e <ParseJsonValue+0x176>
                    // 移动到值的开始位置
                    start += strlen(searchKey);
 8002312:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff24 	bl	8000164 <strlen>
 800231c:	4602      	mov	r2, r0
 800231e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002320:	4413      	add	r3, r2
 8002322:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    // 跳过可能的空格
                    while (*start == ' ' || *start == '\t') {
 8002324:	e002      	b.n	800232c <ParseJsonValue+0x164>
                        start++;
 8002326:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002328:	3301      	adds	r3, #1
 800232a:	67fb      	str	r3, [r7, #124]	@ 0x7c
                    while (*start == ' ' || *start == '\t') {
 800232c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b20      	cmp	r3, #32
 8002332:	d0f8      	beq.n	8002326 <ParseJsonValue+0x15e>
 8002334:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	2b09      	cmp	r3, #9
 800233a:	d0f4      	beq.n	8002326 <ParseJsonValue+0x15e>
                if (start == json || start[-1] == ' ' || start[-1] == ',' || start[-1] == '{') {
 800233c:	e001      	b.n	8002342 <ParseJsonValue+0x17a>
                    }
                } else {
                    start = NULL; // 不是独立的key
 800233e:	2300      	movs	r3, #0
 8002340:	67fb      	str	r3, [r7, #124]	@ 0x7c
        }
    }
    
    // 检查特殊情况 - 尝试查找可能缺少部分字符的key
    // 比如"um"实际上是"pum"，或"xh"实际上是"exh"
    if (start == NULL && (strcmp(key, "pum") == 0 || strcmp(key, "exh") == 0)) {
 8002342:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002344:	2b00      	cmp	r3, #0
 8002346:	d161      	bne.n	800240c <ParseJsonValue+0x244>
 8002348:	4943      	ldr	r1, [pc, #268]	@ (8002458 <ParseJsonValue+0x290>)
 800234a:	68b8      	ldr	r0, [r7, #8]
 800234c:	f7fd ff00 	bl	8000150 <strcmp>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d006      	beq.n	8002364 <ParseJsonValue+0x19c>
 8002356:	4941      	ldr	r1, [pc, #260]	@ (800245c <ParseJsonValue+0x294>)
 8002358:	68b8      	ldr	r0, [r7, #8]
 800235a:	f7fd fef9 	bl	8000150 <strcmp>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d153      	bne.n	800240c <ParseJsonValue+0x244>
        char partialKey[10];
        strcpy(partialKey, key + 1); // 跳过第一个字符
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	1c5a      	adds	r2, r3, #1
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	4611      	mov	r1, r2
 800236e:	4618      	mov	r0, r3
 8002370:	f005 fe8a 	bl	8008088 <strcpy>
        
        sprintf(searchKey, "\"%s\":\"", partialKey);
 8002374:	f107 0214 	add.w	r2, r7, #20
 8002378:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800237c:	492d      	ldr	r1, [pc, #180]	@ (8002434 <ParseJsonValue+0x26c>)
 800237e:	4618      	mov	r0, r3
 8002380:	f005 fdca 	bl	8007f18 <siprintf>
        sprintf(debugMsg, "Searching partial key: %s\r\n", partialKey);
 8002384:	f107 0214 	add.w	r2, r7, #20
 8002388:	f107 0320 	add.w	r3, r7, #32
 800238c:	4934      	ldr	r1, [pc, #208]	@ (8002460 <ParseJsonValue+0x298>)
 800238e:	4618      	mov	r0, r3
 8002390:	f005 fdc2 	bl	8007f18 <siprintf>
        HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), 100);
 8002394:	f107 0320 	add.w	r3, r7, #32
 8002398:	4618      	mov	r0, r3
 800239a:	f7fd fee3 	bl	8000164 <strlen>
 800239e:	4603      	mov	r3, r0
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f107 0120 	add.w	r1, r7, #32
 80023a6:	2364      	movs	r3, #100	@ 0x64
 80023a8:	4824      	ldr	r0, [pc, #144]	@ (800243c <ParseJsonValue+0x274>)
 80023aa:	f004 f896 	bl	80064da <HAL_UART_Transmit>
        
        start = strstr(json, searchKey);
 80023ae:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023b2:	4619      	mov	r1, r3
 80023b4:	68f8      	ldr	r0, [r7, #12]
 80023b6:	f005 fe25 	bl	8008004 <strstr>
 80023ba:	67f8      	str	r0, [r7, #124]	@ 0x7c
        if (start) {
 80023bc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d009      	beq.n	80023d6 <ParseJsonValue+0x20e>
            // 移动到值的开始位置
            start += strlen(searchKey);
 80023c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023c6:	4618      	mov	r0, r3
 80023c8:	f7fd fecc 	bl	8000164 <strlen>
 80023cc:	4602      	mov	r2, r0
 80023ce:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023d0:	4413      	add	r3, r2
 80023d2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80023d4:	e01a      	b.n	800240c <ParseJsonValue+0x244>
        } else {
            // 尝试没有冒号的格式
            sprintf(searchKey, "\"%s\"\"", partialKey);
 80023d6:	f107 0214 	add.w	r2, r7, #20
 80023da:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023de:	4918      	ldr	r1, [pc, #96]	@ (8002440 <ParseJsonValue+0x278>)
 80023e0:	4618      	mov	r0, r3
 80023e2:	f005 fd99 	bl	8007f18 <siprintf>
            start = strstr(json, searchKey);
 80023e6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023ea:	4619      	mov	r1, r3
 80023ec:	68f8      	ldr	r0, [r7, #12]
 80023ee:	f005 fe09 	bl	8008004 <strstr>
 80023f2:	67f8      	str	r0, [r7, #124]	@ 0x7c
            if (start) {
 80023f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d008      	beq.n	800240c <ParseJsonValue+0x244>
                // 移动到值的开始位置
                start += strlen(searchKey);
 80023fa:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd feb0 	bl	8000164 <strlen>
 8002404:	4602      	mov	r2, r0
 8002406:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002408:	4413      	add	r3, r2
 800240a:	67fb      	str	r3, [r7, #124]	@ 0x7c
            }
        }
    }
    
    // 如果找到了起始位置
    if (start) {
 800240c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800240e:	2b00      	cmp	r3, #0
 8002410:	d07e      	beq.n	8002510 <ParseJsonValue+0x348>
        // 根据格式不同，查找值的结束位置
        if (*start == '\"') {
 8002412:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b22      	cmp	r3, #34	@ 0x22
 8002418:	d108      	bne.n	800242c <ParseJsonValue+0x264>
            // 如果值以引号开始，查找结束引号
            start++; // 跳过开始引号
 800241a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800241c:	3301      	adds	r3, #1
 800241e:	67fb      	str	r3, [r7, #124]	@ 0x7c
            end = strchr(start, '\"');
 8002420:	2122      	movs	r1, #34	@ 0x22
 8002422:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8002424:	f005 fdbc 	bl	8007fa0 <strchr>
 8002428:	67b8      	str	r0, [r7, #120]	@ 0x78
 800242a:	e03a      	b.n	80024a2 <ParseJsonValue+0x2da>
        } else {
            // 如果值没有引号，查找下一个分隔符
            end = start;
 800242c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800242e:	67bb      	str	r3, [r7, #120]	@ 0x78
            while (*end != '\0' && *end != ',' && *end != '}' && *end != ' ' && 
 8002430:	e01b      	b.n	800246a <ParseJsonValue+0x2a2>
 8002432:	bf00      	nop
 8002434:	08008c74 	.word	0x08008c74
 8002438:	08008c7c 	.word	0x08008c7c
 800243c:	20000368 	.word	0x20000368
 8002440:	08008c98 	.word	0x08008c98
 8002444:	08008ca0 	.word	0x08008ca0
 8002448:	08008cc4 	.word	0x08008cc4
 800244c:	08008ccc 	.word	0x08008ccc
 8002450:	08008cec 	.word	0x08008cec
 8002454:	08008cf0 	.word	0x08008cf0
 8002458:	08008b4c 	.word	0x08008b4c
 800245c:	08008af0 	.word	0x08008af0
 8002460:	08008d10 	.word	0x08008d10
                   *end != '\t' && *end != '\r' && *end != '\n') {
                end++;
 8002464:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002466:	3301      	adds	r3, #1
 8002468:	67bb      	str	r3, [r7, #120]	@ 0x78
            while (*end != '\0' && *end != ',' && *end != '}' && *end != ' ' && 
 800246a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800246c:	781b      	ldrb	r3, [r3, #0]
                   *end != '\t' && *end != '\r' && *end != '\n') {
 800246e:	2b00      	cmp	r3, #0
 8002470:	d017      	beq.n	80024a2 <ParseJsonValue+0x2da>
            while (*end != '\0' && *end != ',' && *end != '}' && *end != ' ' && 
 8002472:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b2c      	cmp	r3, #44	@ 0x2c
 8002478:	d013      	beq.n	80024a2 <ParseJsonValue+0x2da>
 800247a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b7d      	cmp	r3, #125	@ 0x7d
 8002480:	d00f      	beq.n	80024a2 <ParseJsonValue+0x2da>
 8002482:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b20      	cmp	r3, #32
 8002488:	d00b      	beq.n	80024a2 <ParseJsonValue+0x2da>
                   *end != '\t' && *end != '\r' && *end != '\n') {
 800248a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800248c:	781b      	ldrb	r3, [r3, #0]
            while (*end != '\0' && *end != ',' && *end != '}' && *end != ' ' && 
 800248e:	2b09      	cmp	r3, #9
 8002490:	d007      	beq.n	80024a2 <ParseJsonValue+0x2da>
                   *end != '\t' && *end != '\r' && *end != '\n') {
 8002492:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b0d      	cmp	r3, #13
 8002498:	d003      	beq.n	80024a2 <ParseJsonValue+0x2da>
 800249a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b0a      	cmp	r3, #10
 80024a0:	d1e0      	bne.n	8002464 <ParseJsonValue+0x29c>
            }
        }
        
        if (end && end > start) {
 80024a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d033      	beq.n	8002510 <ParseJsonValue+0x348>
 80024a8:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80024aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d92f      	bls.n	8002510 <ParseJsonValue+0x348>
            // 计算值的长度
            uint8_t len = end - start;
 80024b0:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80024b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            if (len >= maxLen) {
 80024ba:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 80024be:	78fb      	ldrb	r3, [r7, #3]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d303      	bcc.n	80024cc <ParseJsonValue+0x304>
                len = maxLen - 1;
 80024c4:	78fb      	ldrb	r3, [r7, #3]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
            }
            
            // 复制值
            strncpy(value, start, len);
 80024cc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024d0:	461a      	mov	r2, r3
 80024d2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f005 fd82 	bl	8007fde <strncpy>
            value[len] = '\0';
 80024da:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4413      	add	r3, r2
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
            
            sprintf(debugMsg, "Found value for %s: %s\r\n", key, value);
 80024e6:	f107 0020 	add.w	r0, r7, #32
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	4914      	ldr	r1, [pc, #80]	@ (8002540 <ParseJsonValue+0x378>)
 80024f0:	f005 fd12 	bl	8007f18 <siprintf>
            HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), 100);
 80024f4:	f107 0320 	add.w	r3, r7, #32
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fd fe33 	bl	8000164 <strlen>
 80024fe:	4603      	mov	r3, r0
 8002500:	b29a      	uxth	r2, r3
 8002502:	f107 0120 	add.w	r1, r7, #32
 8002506:	2364      	movs	r3, #100	@ 0x64
 8002508:	480e      	ldr	r0, [pc, #56]	@ (8002544 <ParseJsonValue+0x37c>)
 800250a:	f003 ffe6 	bl	80064da <HAL_UART_Transmit>
 800250e:	e013      	b.n	8002538 <ParseJsonValue+0x370>
            return;
        }
    }
    
    // 未找到键值
    sprintf(debugMsg, "Key '%s' not found or value empty\r\n", key);
 8002510:	f107 0320 	add.w	r3, r7, #32
 8002514:	68ba      	ldr	r2, [r7, #8]
 8002516:	490c      	ldr	r1, [pc, #48]	@ (8002548 <ParseJsonValue+0x380>)
 8002518:	4618      	mov	r0, r3
 800251a:	f005 fcfd 	bl	8007f18 <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t*)debugMsg, strlen(debugMsg), 100);
 800251e:	f107 0320 	add.w	r3, r7, #32
 8002522:	4618      	mov	r0, r3
 8002524:	f7fd fe1e 	bl	8000164 <strlen>
 8002528:	4603      	mov	r3, r0
 800252a:	b29a      	uxth	r2, r3
 800252c:	f107 0120 	add.w	r1, r7, #32
 8002530:	2364      	movs	r3, #100	@ 0x64
 8002532:	4804      	ldr	r0, [pc, #16]	@ (8002544 <ParseJsonValue+0x37c>)
 8002534:	f003 ffd1 	bl	80064da <HAL_UART_Transmit>
}
 8002538:	3780      	adds	r7, #128	@ 0x80
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	08008d2c 	.word	0x08008d2c
 8002544:	20000368 	.word	0x20000368
 8002548:	08008d48 	.word	0x08008d48

0800254c <SendSensorData>:

// 发送传感器数据
static void SendSensorData(void)
{
 800254c:	b590      	push	{r4, r7, lr}
 800254e:	b091      	sub	sp, #68	@ 0x44
 8002550:	af08      	add	r7, sp, #32
    int tempInt = (int)temperature;
 8002552:	4b4b      	ldr	r3, [pc, #300]	@ (8002680 <SendSensorData+0x134>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7fe fd9c 	bl	8001094 <__aeabi_f2iz>
 800255c:	4603      	mov	r3, r0
 800255e:	61fb      	str	r3, [r7, #28]
    int tempDec = (int)((temperature - tempInt) * 10);
 8002560:	4b47      	ldr	r3, [pc, #284]	@ (8002680 <SendSensorData+0x134>)
 8002562:	681c      	ldr	r4, [r3, #0]
 8002564:	69f8      	ldr	r0, [r7, #28]
 8002566:	f7fe fb7b 	bl	8000c60 <__aeabi_i2f>
 800256a:	4603      	mov	r3, r0
 800256c:	4619      	mov	r1, r3
 800256e:	4620      	mov	r0, r4
 8002570:	f7fe fac0 	bl	8000af4 <__aeabi_fsub>
 8002574:	4603      	mov	r3, r0
 8002576:	4943      	ldr	r1, [pc, #268]	@ (8002684 <SendSensorData+0x138>)
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe fbc5 	bl	8000d08 <__aeabi_fmul>
 800257e:	4603      	mov	r3, r0
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fd87 	bl	8001094 <__aeabi_f2iz>
 8002586:	4603      	mov	r3, r0
 8002588:	61bb      	str	r3, [r7, #24]
    int humInt = (int)humidity;
 800258a:	4b3f      	ldr	r3, [pc, #252]	@ (8002688 <SendSensorData+0x13c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd80 	bl	8001094 <__aeabi_f2iz>
 8002594:	4603      	mov	r3, r0
 8002596:	617b      	str	r3, [r7, #20]
    int humDec = (int)((humidity - humInt) * 10);
 8002598:	4b3b      	ldr	r3, [pc, #236]	@ (8002688 <SendSensorData+0x13c>)
 800259a:	681c      	ldr	r4, [r3, #0]
 800259c:	6978      	ldr	r0, [r7, #20]
 800259e:	f7fe fb5f 	bl	8000c60 <__aeabi_i2f>
 80025a2:	4603      	mov	r3, r0
 80025a4:	4619      	mov	r1, r3
 80025a6:	4620      	mov	r0, r4
 80025a8:	f7fe faa4 	bl	8000af4 <__aeabi_fsub>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4935      	ldr	r1, [pc, #212]	@ (8002684 <SendSensorData+0x138>)
 80025b0:	4618      	mov	r0, r3
 80025b2:	f7fe fba9 	bl	8000d08 <__aeabi_fmul>
 80025b6:	4603      	mov	r3, r0
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe fd6b 	bl	8001094 <__aeabi_f2iz>
 80025be:	4603      	mov	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]
    int luxInt = (int)luxValue;
 80025c2:	4b32      	ldr	r3, [pc, #200]	@ (800268c <SendSensorData+0x140>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd64 	bl	8001094 <__aeabi_f2iz>
 80025cc:	4603      	mov	r3, r0
 80025ce:	60fb      	str	r3, [r7, #12]
    int luxDec = (int)((luxValue - luxInt) * 10);
 80025d0:	4b2e      	ldr	r3, [pc, #184]	@ (800268c <SendSensorData+0x140>)
 80025d2:	681c      	ldr	r4, [r3, #0]
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	f7fe fb43 	bl	8000c60 <__aeabi_i2f>
 80025da:	4603      	mov	r3, r0
 80025dc:	4619      	mov	r1, r3
 80025de:	4620      	mov	r0, r4
 80025e0:	f7fe fa88 	bl	8000af4 <__aeabi_fsub>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4927      	ldr	r1, [pc, #156]	@ (8002684 <SendSensorData+0x138>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fe fb8d 	bl	8000d08 <__aeabi_fmul>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fd4f 	bl	8001094 <__aeabi_f2iz>
 80025f6:	4603      	mov	r3, r0
 80025f8:	60bb      	str	r3, [r7, #8]

    // 格式化JSON数据
    sprintf(txBuffer, "{\"water\":\"%d%%\",\"temp\":\"%d.%dC\",\"humi\":\"%d.%d%%\",\"light\":\"%d.%dlux\",\"fan\":\"%s\",\"exh\":\"%s\",\"pum\":\"%s\"}",
 80025fa:	4b25      	ldr	r3, [pc, #148]	@ (8002690 <SendSensorData+0x144>)
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
            waterValue,
            tempInt, tempDec,
            humInt, humDec,
            luxInt, luxDec,
            fanStatus ? "on" : "off",
 8002600:	4b24      	ldr	r3, [pc, #144]	@ (8002694 <SendSensorData+0x148>)
 8002602:	781b      	ldrb	r3, [r3, #0]
    sprintf(txBuffer, "{\"water\":\"%d%%\",\"temp\":\"%d.%dC\",\"humi\":\"%d.%d%%\",\"light\":\"%d.%dlux\",\"fan\":\"%s\",\"exh\":\"%s\",\"pum\":\"%s\"}",
 8002604:	2b00      	cmp	r3, #0
 8002606:	d001      	beq.n	800260c <SendSensorData+0xc0>
 8002608:	4b23      	ldr	r3, [pc, #140]	@ (8002698 <SendSensorData+0x14c>)
 800260a:	e000      	b.n	800260e <SendSensorData+0xc2>
 800260c:	4b23      	ldr	r3, [pc, #140]	@ (800269c <SendSensorData+0x150>)
            exhaustStatus ? "on" : "off",
 800260e:	4a24      	ldr	r2, [pc, #144]	@ (80026a0 <SendSensorData+0x154>)
 8002610:	7812      	ldrb	r2, [r2, #0]
    sprintf(txBuffer, "{\"water\":\"%d%%\",\"temp\":\"%d.%dC\",\"humi\":\"%d.%d%%\",\"light\":\"%d.%dlux\",\"fan\":\"%s\",\"exh\":\"%s\",\"pum\":\"%s\"}",
 8002612:	2a00      	cmp	r2, #0
 8002614:	d001      	beq.n	800261a <SendSensorData+0xce>
 8002616:	4a20      	ldr	r2, [pc, #128]	@ (8002698 <SendSensorData+0x14c>)
 8002618:	e000      	b.n	800261c <SendSensorData+0xd0>
 800261a:	4a20      	ldr	r2, [pc, #128]	@ (800269c <SendSensorData+0x150>)
            pumpStatus ? "on" : "off");
 800261c:	4921      	ldr	r1, [pc, #132]	@ (80026a4 <SendSensorData+0x158>)
 800261e:	7809      	ldrb	r1, [r1, #0]
    sprintf(txBuffer, "{\"water\":\"%d%%\",\"temp\":\"%d.%dC\",\"humi\":\"%d.%d%%\",\"light\":\"%d.%dlux\",\"fan\":\"%s\",\"exh\":\"%s\",\"pum\":\"%s\"}",
 8002620:	2900      	cmp	r1, #0
 8002622:	d001      	beq.n	8002628 <SendSensorData+0xdc>
 8002624:	491c      	ldr	r1, [pc, #112]	@ (8002698 <SendSensorData+0x14c>)
 8002626:	e000      	b.n	800262a <SendSensorData+0xde>
 8002628:	491c      	ldr	r1, [pc, #112]	@ (800269c <SendSensorData+0x150>)
 800262a:	9107      	str	r1, [sp, #28]
 800262c:	9206      	str	r2, [sp, #24]
 800262e:	9305      	str	r3, [sp, #20]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	9304      	str	r3, [sp, #16]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	9303      	str	r3, [sp, #12]
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	9302      	str	r3, [sp, #8]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	9301      	str	r3, [sp, #4]
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4602      	mov	r2, r0
 8002648:	4917      	ldr	r1, [pc, #92]	@ (80026a8 <SendSensorData+0x15c>)
 800264a:	4818      	ldr	r0, [pc, #96]	@ (80026ac <SendSensorData+0x160>)
 800264c:	f005 fc64 	bl	8007f18 <siprintf>

    // 通过UART2发送数据
    HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), 100);
 8002650:	4816      	ldr	r0, [pc, #88]	@ (80026ac <SendSensorData+0x160>)
 8002652:	f7fd fd87 	bl	8000164 <strlen>
 8002656:	4603      	mov	r3, r0
 8002658:	b29a      	uxth	r2, r3
 800265a:	2364      	movs	r3, #100	@ 0x64
 800265c:	4913      	ldr	r1, [pc, #76]	@ (80026ac <SendSensorData+0x160>)
 800265e:	4814      	ldr	r0, [pc, #80]	@ (80026b0 <SendSensorData+0x164>)
 8002660:	f003 ff3b 	bl	80064da <HAL_UART_Transmit>
    
    // 发送换行符以便于查看
    uint8_t newline[2] = {'\r', '\n'};
 8002664:	f640 230d 	movw	r3, #2573	@ 0xa0d
 8002668:	80bb      	strh	r3, [r7, #4]
    HAL_UART_Transmit(&huart2, newline, 2, 10);
 800266a:	1d39      	adds	r1, r7, #4
 800266c:	230a      	movs	r3, #10
 800266e:	2202      	movs	r2, #2
 8002670:	480f      	ldr	r0, [pc, #60]	@ (80026b0 <SendSensorData+0x164>)
 8002672:	f003 ff32 	bl	80064da <HAL_UART_Transmit>
}
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	20000094 	.word	0x20000094
 8002684:	41200000 	.word	0x41200000
 8002688:	20000098 	.word	0x20000098
 800268c:	2000007c 	.word	0x2000007c
 8002690:	2000007a 	.word	0x2000007a
 8002694:	2000024e 	.word	0x2000024e
 8002698:	08008aa8 	.word	0x08008aa8
 800269c:	08008acc 	.word	0x08008acc
 80026a0:	2000024f 	.word	0x2000024f
 80026a4:	20000250 	.word	0x20000250
 80026a8:	08008d6c 	.word	0x08008d6c
 80026ac:	200000c0 	.word	0x200000c0
 80026b0:	20000368 	.word	0x20000368

080026b4 <HAL_UART_RxCpltCallback>:

// UART接收中断回调函数
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <HAL_UART_RxCpltCallback+0xa8>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d145      	bne.n	8002752 <HAL_UART_RxCpltCallback+0x9e>
        // 计算下一个头指针位置
        uint16_t nextHead = (rxHead + 1) % UART_RX_BUFFER_SIZE;
 80026c6:	4b26      	ldr	r3, [pc, #152]	@ (8002760 <HAL_UART_RxCpltCallback+0xac>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	3301      	adds	r3, #1
 80026ce:	425a      	negs	r2, r3
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	bf58      	it	pl
 80026d6:	4253      	negpl	r3, r2
 80026d8:	81fb      	strh	r3, [r7, #14]
        
        // 如果没有缓冲区溢出，则保存字符
        if (nextHead != rxTail) {
 80026da:	4b22      	ldr	r3, [pc, #136]	@ (8002764 <HAL_UART_RxCpltCallback+0xb0>)
 80026dc:	881b      	ldrh	r3, [r3, #0]
 80026de:	b29b      	uxth	r3, r3
 80026e0:	89fa      	ldrh	r2, [r7, #14]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d02d      	beq.n	8002742 <HAL_UART_RxCpltCallback+0x8e>
            // 检查接收到的字符是否是结束符(换行符或回车符)
            if (rxTempChar == '\n' || rxTempChar == '\r') {
 80026e6:	4b20      	ldr	r3, [pc, #128]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b0a      	cmp	r3, #10
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_RxCpltCallback+0x42>
 80026ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b0d      	cmp	r3, #13
 80026f4:	d112      	bne.n	800271c <HAL_UART_RxCpltCallback+0x68>
                // 确保接收到的数据非空
                if (rxHead != rxTail) {
 80026f6:	4b1a      	ldr	r3, [pc, #104]	@ (8002760 <HAL_UART_RxCpltCallback+0xac>)
 80026f8:	881b      	ldrh	r3, [r3, #0]
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	4b19      	ldr	r3, [pc, #100]	@ (8002764 <HAL_UART_RxCpltCallback+0xb0>)
 80026fe:	881b      	ldrh	r3, [r3, #0]
 8002700:	b29b      	uxth	r3, r3
 8002702:	429a      	cmp	r2, r3
 8002704:	d01d      	beq.n	8002742 <HAL_UART_RxCpltCallback+0x8e>
                    // 确保字符串正确终止
                    rxBuffer[rxHead] = '\0';
 8002706:	4b16      	ldr	r3, [pc, #88]	@ (8002760 <HAL_UART_RxCpltCallback+0xac>)
 8002708:	881b      	ldrh	r3, [r3, #0]
 800270a:	b29b      	uxth	r3, r3
 800270c:	461a      	mov	r2, r3
 800270e:	4b17      	ldr	r3, [pc, #92]	@ (800276c <HAL_UART_RxCpltCallback+0xb8>)
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]
                    rxComplete = 1;  // 标记接收完成
 8002714:	4b16      	ldr	r3, [pc, #88]	@ (8002770 <HAL_UART_RxCpltCallback+0xbc>)
 8002716:	2201      	movs	r2, #1
 8002718:	701a      	strb	r2, [r3, #0]
                if (rxHead != rxTail) {
 800271a:	e012      	b.n	8002742 <HAL_UART_RxCpltCallback+0x8e>
                }
            } else if (rxTempChar >= 32 && rxTempChar <= 126) {
 800271c:	4b12      	ldr	r3, [pc, #72]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b1f      	cmp	r3, #31
 8002722:	d90e      	bls.n	8002742 <HAL_UART_RxCpltCallback+0x8e>
 8002724:	4b10      	ldr	r3, [pc, #64]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b7e      	cmp	r3, #126	@ 0x7e
 800272a:	d80a      	bhi.n	8002742 <HAL_UART_RxCpltCallback+0x8e>
                // 只存储可打印字符
                rxBuffer[rxHead] = rxTempChar;
 800272c:	4b0c      	ldr	r3, [pc, #48]	@ (8002760 <HAL_UART_RxCpltCallback+0xac>)
 800272e:	881b      	ldrh	r3, [r3, #0]
 8002730:	b29b      	uxth	r3, r3
 8002732:	461a      	mov	r2, r3
 8002734:	4b0c      	ldr	r3, [pc, #48]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 8002736:	7819      	ldrb	r1, [r3, #0]
 8002738:	4b0c      	ldr	r3, [pc, #48]	@ (800276c <HAL_UART_RxCpltCallback+0xb8>)
 800273a:	5499      	strb	r1, [r3, r2]
                rxHead = nextHead;
 800273c:	4a08      	ldr	r2, [pc, #32]	@ (8002760 <HAL_UART_RxCpltCallback+0xac>)
 800273e:	89fb      	ldrh	r3, [r7, #14]
 8002740:	8013      	strh	r3, [r2, #0]
            }
        }
        
        // 继续接收下一个字符
        rxBusy = 1;
 8002742:	4b0c      	ldr	r3, [pc, #48]	@ (8002774 <HAL_UART_RxCpltCallback+0xc0>)
 8002744:	2201      	movs	r2, #1
 8002746:	701a      	strb	r2, [r3, #0]
        HAL_UART_Receive_IT(huart, &rxTempChar, 1);
 8002748:	2201      	movs	r2, #1
 800274a:	4907      	ldr	r1, [pc, #28]	@ (8002768 <HAL_UART_RxCpltCallback+0xb4>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f003 ff4f 	bl	80065f0 <HAL_UART_Receive_IT>
    }
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40004400 	.word	0x40004400
 8002760:	20000240 	.word	0x20000240
 8002764:	20000242 	.word	0x20000242
 8002768:	20000246 	.word	0x20000246
 800276c:	20000140 	.word	0x20000140
 8002770:	20000245 	.word	0x20000245
 8002774:	20000244 	.word	0x20000244

08002778 <MainApp_Init>:

// 初始化函数（C语言接口）
void MainApp_Init(void)
{
 8002778:	b590      	push	{r4, r7, lr}
 800277a:	b08b      	sub	sp, #44	@ 0x2c
 800277c:	af02      	add	r7, sp, #8
    // 配置定时器为微秒计数器
    // 假设定时器已经在main.c中初始化为72MHz/72=1MHz(即每计1次为1us)
    HAL_TIM_Base_Start(&htim1);
 800277e:	4827      	ldr	r0, [pc, #156]	@ (800281c <MainApp_Init+0xa4>)
 8002780:	f003 fac0 	bl	8005d04 <HAL_TIM_Base_Start>

    // 初始化DHT11传感器
    dht11.DHT_Port = GPIOA;
 8002784:	4b26      	ldr	r3, [pc, #152]	@ (8002820 <MainApp_Init+0xa8>)
 8002786:	4a27      	ldr	r2, [pc, #156]	@ (8002824 <MainApp_Init+0xac>)
 8002788:	601a      	str	r2, [r3, #0]
    dht11.DHT_Pin = GPIO_PIN_1;
 800278a:	4b25      	ldr	r3, [pc, #148]	@ (8002820 <MainApp_Init+0xa8>)
 800278c:	2202      	movs	r2, #2
 800278e:	809a      	strh	r2, [r3, #4]
    dht11.type = DHT11;
 8002790:	4b23      	ldr	r3, [pc, #140]	@ (8002820 <MainApp_Init+0xa8>)
 8002792:	2200      	movs	r2, #0
 8002794:	719a      	strb	r2, [r3, #6]
    dht11.pullUp = GPIO_PULLUP;
 8002796:	4b22      	ldr	r3, [pc, #136]	@ (8002820 <MainApp_Init+0xa8>)
 8002798:	2201      	movs	r2, #1
 800279a:	71da      	strb	r2, [r3, #7]

    // 校准ADC以获得更准确的结果
    HAL_ADCEx_Calibration_Start(&hadc1);
 800279c:	4822      	ldr	r0, [pc, #136]	@ (8002828 <MainApp_Init+0xb0>)
 800279e:	f001 fc67 	bl	8004070 <HAL_ADCEx_Calibration_Start>

    // 初始化OLED
    ssd1306_Init();
 80027a2:	f000 fb67 	bl	8002e74 <ssd1306_Init>

    // 清屏并显示欢迎信息
    ssd1306_Fill(Black);
 80027a6:	2000      	movs	r0, #0
 80027a8:	f000 fbce 	bl	8002f48 <ssd1306_Fill>
    ssd1306_SetCursor(0, 0);
 80027ac:	2100      	movs	r1, #0
 80027ae:	2000      	movs	r0, #0
 80027b0:	f000 fd14 	bl	80031dc <ssd1306_SetCursor>
    char sensorTitle[] = "Sensor Data:";
 80027b4:	4b1d      	ldr	r3, [pc, #116]	@ (800282c <MainApp_Init+0xb4>)
 80027b6:	f107 0410 	add.w	r4, r7, #16
 80027ba:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027bc:	c407      	stmia	r4!, {r0, r1, r2}
 80027be:	7023      	strb	r3, [r4, #0]
    ssd1306_WriteString(sensorTitle, Font_7x10, White);
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <MainApp_Init+0xb8>)
 80027c2:	f107 0010 	add.w	r0, r7, #16
 80027c6:	2201      	movs	r2, #1
 80027c8:	9200      	str	r2, [sp, #0]
 80027ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027cc:	f000 fce0 	bl	8003190 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 15);
 80027d0:	210f      	movs	r1, #15
 80027d2:	2000      	movs	r0, #0
 80027d4:	f000 fd02 	bl	80031dc <ssd1306_SetCursor>
    char initMsg[] = "Initializing...";
 80027d8:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <MainApp_Init+0xbc>)
 80027da:	463c      	mov	r4, r7
 80027dc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80027de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    ssd1306_WriteString(initMsg, Font_7x10, White);
 80027e2:	4b13      	ldr	r3, [pc, #76]	@ (8002830 <MainApp_Init+0xb8>)
 80027e4:	4638      	mov	r0, r7
 80027e6:	2201      	movs	r2, #1
 80027e8:	9200      	str	r2, [sp, #0]
 80027ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027ec:	f000 fcd0 	bl	8003190 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80027f0:	f000 fbc2 	bl	8002f78 <ssd1306_UpdateScreen>

    // 延时以确保OLED初始化完成和DHT11稳定
    HAL_Delay(100);
 80027f4:	2064      	movs	r0, #100	@ 0x64
 80027f6:	f000 ffbf 	bl	8003778 <HAL_Delay>
    
    // 初始化继电器状态（默认全部关闭）
    UpdateDeviceStatus(0, 0, 0);
 80027fa:	2200      	movs	r2, #0
 80027fc:	2100      	movs	r1, #0
 80027fe:	2000      	movs	r0, #0
 8002800:	f7ff f8d2 	bl	80019a8 <UpdateDeviceStatus>

    // 启动UART2接收(中断模式)
    rxBusy = 1;
 8002804:	4b0c      	ldr	r3, [pc, #48]	@ (8002838 <MainApp_Init+0xc0>)
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
    HAL_UART_Receive_IT(&huart2, &rxTempChar, 1);
 800280a:	2201      	movs	r2, #1
 800280c:	490b      	ldr	r1, [pc, #44]	@ (800283c <MainApp_Init+0xc4>)
 800280e:	480c      	ldr	r0, [pc, #48]	@ (8002840 <MainApp_Init+0xc8>)
 8002810:	f003 feee 	bl	80065f0 <HAL_UART_Receive_IT>
}
 8002814:	bf00      	nop
 8002816:	3724      	adds	r7, #36	@ 0x24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd90      	pop	{r4, r7, pc}
 800281c:	200002d8 	.word	0x200002d8
 8002820:	20000080 	.word	0x20000080
 8002824:	40010800 	.word	0x40010800
 8002828:	20000254 	.word	0x20000254
 800282c:	08008dd4 	.word	0x08008dd4
 8002830:	080095b4 	.word	0x080095b4
 8002834:	08008de4 	.word	0x08008de4
 8002838:	20000244 	.word	0x20000244
 800283c:	20000246 	.word	0x20000246
 8002840:	20000368 	.word	0x20000368

08002844 <MainApp_RunLoop>:

// 主循环函数（C语言接口）
void MainApp_RunLoop(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b0c2      	sub	sp, #264	@ 0x108
 8002848:	af00      	add	r7, sp, #0
    // 读取传感器数据
    ReadSensors();
 800284a:	f7fe feb5 	bl	80015b8 <ReadSensors>

    // 更新显示
    UpdateDisplay();
 800284e:	f7fe ff53 	bl	80016f8 <UpdateDisplay>

    // 每隔1秒发送一次传感器数据
    if (HAL_GetTick() - sendTimer >= 1000) {
 8002852:	f000 ff87 	bl	8003764 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	4b39      	ldr	r3, [pc, #228]	@ (8002940 <MainApp_RunLoop+0xfc>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002862:	d306      	bcc.n	8002872 <MainApp_RunLoop+0x2e>
        sendTimer = HAL_GetTick();
 8002864:	f000 ff7e 	bl	8003764 <HAL_GetTick>
 8002868:	4603      	mov	r3, r0
 800286a:	4a35      	ldr	r2, [pc, #212]	@ (8002940 <MainApp_RunLoop+0xfc>)
 800286c:	6013      	str	r3, [r2, #0]
        SendSensorData();
 800286e:	f7ff fe6d 	bl	800254c <SendSensorData>
    }

    // 处理接收到的命令
    if (rxComplete) {
 8002872:	4b34      	ldr	r3, [pc, #208]	@ (8002944 <MainApp_RunLoop+0x100>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	b2db      	uxtb	r3, r3
 8002878:	2b00      	cmp	r3, #0
 800287a:	d05c      	beq.n	8002936 <MainApp_RunLoop+0xf2>
        HAL_UART_Transmit(&huart2, (uint8_t*)"Start processing received command\r\n", 35, 100);
 800287c:	2364      	movs	r3, #100	@ 0x64
 800287e:	2223      	movs	r2, #35	@ 0x23
 8002880:	4931      	ldr	r1, [pc, #196]	@ (8002948 <MainApp_RunLoop+0x104>)
 8002882:	4832      	ldr	r0, [pc, #200]	@ (800294c <MainApp_RunLoop+0x108>)
 8002884:	f003 fe29 	bl	80064da <HAL_UART_Transmit>
        
        // 创建临时缓冲区存储完整的消息
        char tempBuffer[UART_RX_BUFFER_SIZE];
        uint16_t i = 0;
 8002888:	2300      	movs	r3, #0
 800288a:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
        uint16_t currentTail = rxTail;
 800288e:	4b30      	ldr	r3, [pc, #192]	@ (8002950 <MainApp_RunLoop+0x10c>)
 8002890:	881b      	ldrh	r3, [r3, #0]
 8002892:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
        
        // 从环形缓冲区中提取数据
        while (currentTail != rxHead && i < UART_RX_BUFFER_SIZE - 1) {
 8002896:	e018      	b.n	80028ca <MainApp_RunLoop+0x86>
            tempBuffer[i++] = rxBuffer[currentTail];
 8002898:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 800289c:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80028a0:	1c59      	adds	r1, r3, #1
 80028a2:	f8a7 1106 	strh.w	r1, [r7, #262]	@ 0x106
 80028a6:	4619      	mov	r1, r3
 80028a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002954 <MainApp_RunLoop+0x110>)
 80028aa:	5c9a      	ldrb	r2, [r3, r2]
 80028ac:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80028b0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80028b4:	545a      	strb	r2, [r3, r1]
            currentTail = (currentTail + 1) % UART_RX_BUFFER_SIZE;
 80028b6:	f8b7 3104 	ldrh.w	r3, [r7, #260]	@ 0x104
 80028ba:	3301      	adds	r3, #1
 80028bc:	425a      	negs	r2, r3
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	b2d2      	uxtb	r2, r2
 80028c2:	bf58      	it	pl
 80028c4:	4253      	negpl	r3, r2
 80028c6:	f8a7 3104 	strh.w	r3, [r7, #260]	@ 0x104
        while (currentTail != rxHead && i < UART_RX_BUFFER_SIZE - 1) {
 80028ca:	4b23      	ldr	r3, [pc, #140]	@ (8002958 <MainApp_RunLoop+0x114>)
 80028cc:	881b      	ldrh	r3, [r3, #0]
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	f8b7 2104 	ldrh.w	r2, [r7, #260]	@ 0x104
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d003      	beq.n	80028e0 <MainApp_RunLoop+0x9c>
 80028d8:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80028dc:	2bfe      	cmp	r3, #254	@ 0xfe
 80028de:	d9db      	bls.n	8002898 <MainApp_RunLoop+0x54>
        }
        tempBuffer[i] = '\0';  // 确保字符串正确终止
 80028e0:	f8b7 3106 	ldrh.w	r3, [r7, #262]	@ 0x106
 80028e4:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80028e8:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80028ec:	2100      	movs	r1, #0
 80028ee:	54d1      	strb	r1, [r2, r3]
        
        // 更新尾指针，表示数据已被处理
        rxTail = rxHead;
 80028f0:	4b19      	ldr	r3, [pc, #100]	@ (8002958 <MainApp_RunLoop+0x114>)
 80028f2:	881b      	ldrh	r3, [r3, #0]
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	4b16      	ldr	r3, [pc, #88]	@ (8002950 <MainApp_RunLoop+0x10c>)
 80028f8:	801a      	strh	r2, [r3, #0]
        
        // 重置接收状态
        rxComplete = 0;
 80028fa:	4b12      	ldr	r3, [pc, #72]	@ (8002944 <MainApp_RunLoop+0x100>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	701a      	strb	r2, [r3, #0]
        
        // 如果UART因某种原因停止，则重新启动接收
        if (!rxBusy) {
 8002900:	4b16      	ldr	r3, [pc, #88]	@ (800295c <MainApp_RunLoop+0x118>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b00      	cmp	r3, #0
 8002908:	d107      	bne.n	800291a <MainApp_RunLoop+0xd6>
            rxBusy = 1;
 800290a:	4b14      	ldr	r3, [pc, #80]	@ (800295c <MainApp_RunLoop+0x118>)
 800290c:	2201      	movs	r2, #1
 800290e:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, &rxTempChar, 1);
 8002910:	2201      	movs	r2, #1
 8002912:	4913      	ldr	r1, [pc, #76]	@ (8002960 <MainApp_RunLoop+0x11c>)
 8002914:	480d      	ldr	r0, [pc, #52]	@ (800294c <MainApp_RunLoop+0x108>)
 8002916:	f003 fe6b 	bl	80065f0 <HAL_UART_Receive_IT>
        }
        
        // 处理命令
        if (strlen(tempBuffer) > 0) {
 800291a:	1d3b      	adds	r3, r7, #4
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <MainApp_RunLoop+0xe6>
            ProcessJsonCommand(tempBuffer);
 8002922:	1d3b      	adds	r3, r7, #4
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff f91b 	bl	8001b60 <ProcessJsonCommand>
        }
        
        HAL_UART_Transmit(&huart2, (uint8_t*)"Processing completed, ready for next command\r\n", 46, 100);
 800292a:	2364      	movs	r3, #100	@ 0x64
 800292c:	222e      	movs	r2, #46	@ 0x2e
 800292e:	490d      	ldr	r1, [pc, #52]	@ (8002964 <MainApp_RunLoop+0x120>)
 8002930:	4806      	ldr	r0, [pc, #24]	@ (800294c <MainApp_RunLoop+0x108>)
 8002932:	f003 fdd2 	bl	80064da <HAL_UART_Transmit>
    }
}
 8002936:	bf00      	nop
 8002938:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	20000248 	.word	0x20000248
 8002944:	20000245 	.word	0x20000245
 8002948:	08008df4 	.word	0x08008df4
 800294c:	20000368 	.word	0x20000368
 8002950:	20000242 	.word	0x20000242
 8002954:	20000140 	.word	0x20000140
 8002958:	20000240 	.word	0x20000240
 800295c:	20000244 	.word	0x20000244
 8002960:	20000246 	.word	0x20000246
 8002964:	08008e18 	.word	0x08008e18

08002968 <HAL_UART_ErrorCallback>:
    UpdateDeviceStatus(fan, exhaust, pump);
}

// HAL UART错误回调函数
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <HAL_UART_ErrorCallback+0x30>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d10a      	bne.n	8002990 <HAL_UART_ErrorCallback+0x28>
        // 记录错误状态但不输出，避免过多调试信息
        rxBusy = 0;
 800297a:	4b08      	ldr	r3, [pc, #32]	@ (800299c <HAL_UART_ErrorCallback+0x34>)
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
        
        // 清除错误并重新启动接收
        HAL_UART_Receive_IT(huart, &rxTempChar, 1);
 8002980:	2201      	movs	r2, #1
 8002982:	4907      	ldr	r1, [pc, #28]	@ (80029a0 <HAL_UART_ErrorCallback+0x38>)
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f003 fe33 	bl	80065f0 <HAL_UART_Receive_IT>
        rxBusy = 1;
 800298a:	4b04      	ldr	r3, [pc, #16]	@ (800299c <HAL_UART_ErrorCallback+0x34>)
 800298c:	2201      	movs	r2, #1
 800298e:	701a      	strb	r2, [r3, #0]
    }
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40004400 	.word	0x40004400
 800299c:	20000244 	.word	0x20000244
 80029a0:	20000246 	.word	0x20000246

080029a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80029a8:	f000 fe84 	bl	80036b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029ac:	f000 f811 	bl	80029d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029b0:	f000 f9ae 	bl	8002d10 <MX_GPIO_Init>
  MX_ADC1_Init();
 80029b4:	f000 f868 	bl	8002a88 <MX_ADC1_Init>
  MX_I2C1_Init();
 80029b8:	f000 f8a4 	bl	8002b04 <MX_I2C1_Init>
  MX_TIM1_Init();
 80029bc:	f000 f8d0 	bl	8002b60 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80029c0:	f000 f952 	bl	8002c68 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80029c4:	f000 f97a 	bl	8002cbc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  
  // 初始化应用程序
  MainApp_Init();
 80029c8:	f7ff fed6 	bl	8002778 <MainApp_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    // 运行应用程序主循环
    MainApp_RunLoop();
 80029cc:	f7ff ff3a 	bl	8002844 <MainApp_RunLoop>
 80029d0:	e7fc      	b.n	80029cc <main+0x28>

080029d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b094      	sub	sp, #80	@ 0x50
 80029d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029d8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80029dc:	2228      	movs	r2, #40	@ 0x28
 80029de:	2100      	movs	r1, #0
 80029e0:	4618      	mov	r0, r3
 80029e2:	f005 fad5 	bl	8007f90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029e6:	f107 0314 	add.w	r3, r7, #20
 80029ea:	2200      	movs	r2, #0
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	605a      	str	r2, [r3, #4]
 80029f0:	609a      	str	r2, [r3, #8]
 80029f2:	60da      	str	r2, [r3, #12]
 80029f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80029f6:	1d3b      	adds	r3, r7, #4
 80029f8:	2200      	movs	r2, #0
 80029fa:	601a      	str	r2, [r3, #0]
 80029fc:	605a      	str	r2, [r3, #4]
 80029fe:	609a      	str	r2, [r3, #8]
 8002a00:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a02:	2301      	movs	r3, #1
 8002a04:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002a06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a10:	2301      	movs	r3, #1
 8002a12:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a14:	2302      	movs	r3, #2
 8002a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002a1e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8002a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a24:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fbef 	bl	800520c <HAL_RCC_OscConfig>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d001      	beq.n	8002a38 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8002a34:	f000 f9e0 	bl	8002df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a38:	230f      	movs	r3, #15
 8002a3a:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002a44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a48:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002a4e:	f107 0314 	add.w	r3, r7, #20
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f002 fe5b 	bl	8005710 <HAL_RCC_ClockConfig>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d001      	beq.n	8002a64 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8002a60:	f000 f9ca 	bl	8002df8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002a64:	2302      	movs	r3, #2
 8002a66:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002a68:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002a6c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a6e:	1d3b      	adds	r3, r7, #4
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 ffdb 	bl	8005a2c <HAL_RCCEx_PeriphCLKConfig>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d001      	beq.n	8002a80 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8002a7c:	f000 f9bc 	bl	8002df8 <Error_Handler>
  }
}
 8002a80:	bf00      	nop
 8002a82:	3750      	adds	r7, #80	@ 0x50
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002a8e:	1d3b      	adds	r3, r7, #4
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002a98:	4b18      	ldr	r3, [pc, #96]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002a9a:	4a19      	ldr	r2, [pc, #100]	@ (8002b00 <MX_ADC1_Init+0x78>)
 8002a9c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002aa4:	4b15      	ldr	r3, [pc, #84]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002aaa:	4b14      	ldr	r3, [pc, #80]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ab0:	4b12      	ldr	r3, [pc, #72]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002ab2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8002ab6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ab8:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002aba:	2200      	movs	r2, #0
 8002abc:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8002abe:	4b0f      	ldr	r3, [pc, #60]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ac4:	480d      	ldr	r0, [pc, #52]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002ac6:	f000 fe7b 	bl	80037c0 <HAL_ADC_Init>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8002ad0:	f000 f992 	bl	8002df8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8002ad4:	2304      	movs	r3, #4
 8002ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002adc:	2300      	movs	r3, #0
 8002ade:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ae0:	1d3b      	adds	r3, r7, #4
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4805      	ldr	r0, [pc, #20]	@ (8002afc <MX_ADC1_Init+0x74>)
 8002ae6:	f001 f92f 	bl	8003d48 <HAL_ADC_ConfigChannel>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8002af0:	f000 f982 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	20000254 	.word	0x20000254
 8002b00:	40012400 	.word	0x40012400

08002b04 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002b08:	4b12      	ldr	r3, [pc, #72]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b0a:	4a13      	ldr	r2, [pc, #76]	@ (8002b58 <MX_I2C1_Init+0x54>)
 8002b0c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002b0e:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b10:	4a12      	ldr	r2, [pc, #72]	@ (8002b5c <MX_I2C1_Init+0x58>)
 8002b12:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002b14:	4b0f      	ldr	r3, [pc, #60]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b16:	2200      	movs	r2, #0
 8002b18:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002b20:	4b0c      	ldr	r3, [pc, #48]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b22:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b26:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002b28:	4b0a      	ldr	r3, [pc, #40]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002b2e:	4b09      	ldr	r3, [pc, #36]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002b34:	4b07      	ldr	r3, [pc, #28]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002b3a:	4b06      	ldr	r3, [pc, #24]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002b40:	4804      	ldr	r0, [pc, #16]	@ (8002b54 <MX_I2C1_Init+0x50>)
 8002b42:	f001 feb7 	bl	80048b4 <HAL_I2C_Init>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002b4c:	f000 f954 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002b50:	bf00      	nop
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	20000284 	.word	0x20000284
 8002b58:	40005400 	.word	0x40005400
 8002b5c:	000186a0 	.word	0x000186a0

08002b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b092      	sub	sp, #72	@ 0x48
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b66:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
 8002b6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002b70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
 8002b78:	605a      	str	r2, [r3, #4]
 8002b7a:	609a      	str	r2, [r3, #8]
 8002b7c:	60da      	str	r2, [r3, #12]
 8002b7e:	611a      	str	r2, [r3, #16]
 8002b80:	615a      	str	r2, [r3, #20]
 8002b82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002b84:	1d3b      	adds	r3, r7, #4
 8002b86:	2220      	movs	r2, #32
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f005 fa00 	bl	8007f90 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002b90:	4b33      	ldr	r3, [pc, #204]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002b92:	4a34      	ldr	r2, [pc, #208]	@ (8002c64 <MX_TIM1_Init+0x104>)
 8002b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002b96:	4b32      	ldr	r3, [pc, #200]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002b98:	2200      	movs	r2, #0
 8002b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b9c:	4b30      	ldr	r3, [pc, #192]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002ba4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002baa:	4b2d      	ldr	r3, [pc, #180]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002bbc:	4828      	ldr	r0, [pc, #160]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002bbe:	f003 f8eb 	bl	8005d98 <HAL_TIM_OC_Init>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d001      	beq.n	8002bcc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002bc8:	f000 f916 	bl	8002df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002bd8:	4619      	mov	r1, r3
 8002bda:	4821      	ldr	r0, [pc, #132]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002bdc:	f003 fb7e 	bl	80062dc <HAL_TIMEx_MasterConfigSynchronization>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002be6:	f000 f907 	bl	8002df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002c02:	2300      	movs	r3, #0
 8002c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002c06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4814      	ldr	r0, [pc, #80]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002c10:	f003 f912 	bl	8005e38 <HAL_TIM_OC_ConfigChannel>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002c1a:	f000 f8ed 	bl	8002df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002c32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002c36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002c3c:	1d3b      	adds	r3, r7, #4
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4807      	ldr	r0, [pc, #28]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002c42:	f003 fba9 	bl	8006398 <HAL_TIMEx_ConfigBreakDeadTime>
 8002c46:	4603      	mov	r3, r0
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d001      	beq.n	8002c50 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8002c4c:	f000 f8d4 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002c50:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <MX_TIM1_Init+0x100>)
 8002c52:	f000 fbd7 	bl	8003404 <HAL_TIM_MspPostInit>

}
 8002c56:	bf00      	nop
 8002c58:	3748      	adds	r7, #72	@ 0x48
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	200002d8 	.word	0x200002d8
 8002c64:	40012c00 	.word	0x40012c00

08002c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <MX_USART1_UART_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c72:	4b10      	ldr	r3, [pc, #64]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	@ (8002cb4 <MX_USART1_UART_Init+0x4c>)
 8002ca0:	f003 fbcb 	bl	800643a <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002caa:	f000 f8a5 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	20000320 	.word	0x20000320
 8002cb8:	40013800 	.word	0x40013800

08002cbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	@ (8002d0c <MX_USART2_UART_Init+0x50>)
 8002cc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cc6:	4b10      	ldr	r3, [pc, #64]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002ccc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cce:	4b0e      	ldr	r3, [pc, #56]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cda:	4b0b      	ldr	r3, [pc, #44]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ce0:	4b09      	ldr	r3, [pc, #36]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce2:	220c      	movs	r2, #12
 8002ce4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002ce6:	4b08      	ldr	r3, [pc, #32]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cec:	4b06      	ldr	r3, [pc, #24]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cf2:	4805      	ldr	r0, [pc, #20]	@ (8002d08 <MX_USART2_UART_Init+0x4c>)
 8002cf4:	f003 fba1 	bl	800643a <HAL_UART_Init>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cfe:	f000 f87b 	bl	8002df8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002d02:	bf00      	nop
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	20000368 	.word	0x20000368
 8002d0c:	40004400 	.word	0x40004400

08002d10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d16:	f107 0310 	add.w	r3, r7, #16
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	605a      	str	r2, [r3, #4]
 8002d20:	609a      	str	r2, [r3, #8]
 8002d22:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d24:	4b30      	ldr	r3, [pc, #192]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	4a2f      	ldr	r2, [pc, #188]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d2a:	f043 0310 	orr.w	r3, r3, #16
 8002d2e:	6193      	str	r3, [r2, #24]
 8002d30:	4b2d      	ldr	r3, [pc, #180]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d3c:	4b2a      	ldr	r3, [pc, #168]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	4a29      	ldr	r2, [pc, #164]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d42:	f043 0320 	orr.w	r3, r3, #32
 8002d46:	6193      	str	r3, [r2, #24]
 8002d48:	4b27      	ldr	r3, [pc, #156]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	f003 0320 	and.w	r3, r3, #32
 8002d50:	60bb      	str	r3, [r7, #8]
 8002d52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d54:	4b24      	ldr	r3, [pc, #144]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	4a23      	ldr	r2, [pc, #140]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d5a:	f043 0304 	orr.w	r3, r3, #4
 8002d5e:	6193      	str	r3, [r2, #24]
 8002d60:	4b21      	ldr	r3, [pc, #132]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	607b      	str	r3, [r7, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d6e:	699b      	ldr	r3, [r3, #24]
 8002d70:	4a1d      	ldr	r2, [pc, #116]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d72:	f043 0308 	orr.w	r3, r3, #8
 8002d76:	6193      	str	r3, [r2, #24]
 8002d78:	4b1b      	ldr	r3, [pc, #108]	@ (8002de8 <MX_GPIO_Init+0xd8>)
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0308 	and.w	r3, r3, #8
 8002d80:	603b      	str	r3, [r7, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002d84:	2200      	movs	r2, #0
 8002d86:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8002d8a:	4818      	ldr	r0, [pc, #96]	@ (8002dec <MX_GPIO_Init+0xdc>)
 8002d8c:	f001 fd79 	bl	8004882 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002d90:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002d94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d96:	2301      	movs	r3, #1
 8002d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d9e:	2302      	movs	r3, #2
 8002da0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4619      	mov	r1, r3
 8002da8:	4810      	ldr	r0, [pc, #64]	@ (8002dec <MX_GPIO_Init+0xdc>)
 8002daa:	f001 fbcf 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002dae:	2302      	movs	r3, #2
 8002db0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002db2:	2300      	movs	r3, #0
 8002db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dba:	f107 0310 	add.w	r3, r7, #16
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480b      	ldr	r0, [pc, #44]	@ (8002df0 <MX_GPIO_Init+0xe0>)
 8002dc2:	f001 fbc3 	bl	800454c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002dc6:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002dca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4619      	mov	r1, r3
 8002dda:	4806      	ldr	r0, [pc, #24]	@ (8002df4 <MX_GPIO_Init+0xe4>)
 8002ddc:	f001 fbb6 	bl	800454c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002de0:	bf00      	nop
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40021000 	.word	0x40021000
 8002dec:	40011000 	.word	0x40011000
 8002df0:	40010800 	.word	0x40010800
 8002df4:	40010c00 	.word	0x40010c00

08002df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002dfc:	b672      	cpsid	i
}
 8002dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e00:	bf00      	nop
 8002e02:	e7fd      	b.n	8002e00 <Error_Handler+0x8>

08002e04 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8002e08:	bf00      	nop
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af04      	add	r7, sp, #16
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8002e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1e:	9302      	str	r3, [sp, #8]
 8002e20:	2301      	movs	r3, #1
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	1dfb      	adds	r3, r7, #7
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2301      	movs	r3, #1
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	2178      	movs	r1, #120	@ 0x78
 8002e2e:	4803      	ldr	r0, [pc, #12]	@ (8002e3c <ssd1306_WriteCommand+0x2c>)
 8002e30:	f001 fe84 	bl	8004b3c <HAL_I2C_Mem_Write>
}
 8002e34:	bf00      	nop
 8002e36:	3708      	adds	r7, #8
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	20000284 	.word	0x20000284

08002e40 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af04      	add	r7, sp, #16
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e52:	9202      	str	r2, [sp, #8]
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	2240      	movs	r2, #64	@ 0x40
 8002e5e:	2178      	movs	r1, #120	@ 0x78
 8002e60:	4803      	ldr	r0, [pc, #12]	@ (8002e70 <ssd1306_WriteData+0x30>)
 8002e62:	f001 fe6b 	bl	8004b3c <HAL_I2C_Mem_Write>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000284 	.word	0x20000284

08002e74 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002e78:	f7ff ffc4 	bl	8002e04 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002e7c:	2064      	movs	r0, #100	@ 0x64
 8002e7e:	f000 fc7b 	bl	8003778 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002e82:	2000      	movs	r0, #0
 8002e84:	f000 f9d6 	bl	8003234 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002e88:	2020      	movs	r0, #32
 8002e8a:	f7ff ffc1 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002e8e:	2000      	movs	r0, #0
 8002e90:	f7ff ffbe 	bl	8002e10 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002e94:	20b0      	movs	r0, #176	@ 0xb0
 8002e96:	f7ff ffbb 	bl	8002e10 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002e9a:	20c8      	movs	r0, #200	@ 0xc8
 8002e9c:	f7ff ffb8 	bl	8002e10 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002ea0:	2000      	movs	r0, #0
 8002ea2:	f7ff ffb5 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002ea6:	2010      	movs	r0, #16
 8002ea8:	f7ff ffb2 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002eac:	2040      	movs	r0, #64	@ 0x40
 8002eae:	f7ff ffaf 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002eb2:	20ff      	movs	r0, #255	@ 0xff
 8002eb4:	f000 f9aa 	bl	800320c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002eb8:	20a1      	movs	r0, #161	@ 0xa1
 8002eba:	f7ff ffa9 	bl	8002e10 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002ebe:	20a6      	movs	r0, #166	@ 0xa6
 8002ec0:	f7ff ffa6 	bl	8002e10 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002ec4:	20a8      	movs	r0, #168	@ 0xa8
 8002ec6:	f7ff ffa3 	bl	8002e10 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002eca:	203f      	movs	r0, #63	@ 0x3f
 8002ecc:	f7ff ffa0 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002ed0:	20a4      	movs	r0, #164	@ 0xa4
 8002ed2:	f7ff ff9d 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8002ed6:	20d3      	movs	r0, #211	@ 0xd3
 8002ed8:	f7ff ff9a 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff ff97 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8002ee2:	20d5      	movs	r0, #213	@ 0xd5
 8002ee4:	f7ff ff94 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002ee8:	20f0      	movs	r0, #240	@ 0xf0
 8002eea:	f7ff ff91 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002eee:	20d9      	movs	r0, #217	@ 0xd9
 8002ef0:	f7ff ff8e 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8002ef4:	2022      	movs	r0, #34	@ 0x22
 8002ef6:	f7ff ff8b 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8002efa:	20da      	movs	r0, #218	@ 0xda
 8002efc:	f7ff ff88 	bl	8002e10 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8002f00:	2012      	movs	r0, #18
 8002f02:	f7ff ff85 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8002f06:	20db      	movs	r0, #219	@ 0xdb
 8002f08:	f7ff ff82 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8002f0c:	2020      	movs	r0, #32
 8002f0e:	f7ff ff7f 	bl	8002e10 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8002f12:	208d      	movs	r0, #141	@ 0x8d
 8002f14:	f7ff ff7c 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8002f18:	2014      	movs	r0, #20
 8002f1a:	f7ff ff79 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8002f1e:	2001      	movs	r0, #1
 8002f20:	f000 f988 	bl	8003234 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002f24:	2000      	movs	r0, #0
 8002f26:	f000 f80f 	bl	8002f48 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002f2a:	f000 f825 	bl	8002f78 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8002f2e:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <ssd1306_Init+0xd0>)
 8002f30:	2200      	movs	r2, #0
 8002f32:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002f34:	4b03      	ldr	r3, [pc, #12]	@ (8002f44 <ssd1306_Init+0xd0>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8002f3a:	4b02      	ldr	r3, [pc, #8]	@ (8002f44 <ssd1306_Init+0xd0>)
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	711a      	strb	r2, [r3, #4]
}
 8002f40:	bf00      	nop
 8002f42:	bd80      	pop	{r7, pc}
 8002f44:	200007b0 	.word	0x200007b0

08002f48 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	4603      	mov	r3, r0
 8002f50:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002f52:	79fb      	ldrb	r3, [r7, #7]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <ssd1306_Fill+0x14>
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <ssd1306_Fill+0x16>
 8002f5c:	23ff      	movs	r3, #255	@ 0xff
 8002f5e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002f62:	4619      	mov	r1, r3
 8002f64:	4803      	ldr	r0, [pc, #12]	@ (8002f74 <ssd1306_Fill+0x2c>)
 8002f66:	f005 f813 	bl	8007f90 <memset>
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003b0 	.word	0x200003b0

08002f78 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002f7e:	2300      	movs	r3, #0
 8002f80:	71fb      	strb	r3, [r7, #7]
 8002f82:	e016      	b.n	8002fb2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002f84:	79fb      	ldrb	r3, [r7, #7]
 8002f86:	3b50      	subs	r3, #80	@ 0x50
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff ff40 	bl	8002e10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7ff ff3d 	bl	8002e10 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002f96:	2010      	movs	r0, #16
 8002f98:	f7ff ff3a 	bl	8002e10 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002f9c:	79fb      	ldrb	r3, [r7, #7]
 8002f9e:	01db      	lsls	r3, r3, #7
 8002fa0:	4a08      	ldr	r2, [pc, #32]	@ (8002fc4 <ssd1306_UpdateScreen+0x4c>)
 8002fa2:	4413      	add	r3, r2
 8002fa4:	2180      	movs	r1, #128	@ 0x80
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff ff4a 	bl	8002e40 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002fac:	79fb      	ldrb	r3, [r7, #7]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	71fb      	strb	r3, [r7, #7]
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	2b07      	cmp	r3, #7
 8002fb6:	d9e5      	bls.n	8002f84 <ssd1306_UpdateScreen+0xc>
    }
}
 8002fb8:	bf00      	nop
 8002fba:	bf00      	nop
 8002fbc:	3708      	adds	r7, #8
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	200003b0 	.word	0x200003b0

08002fc8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	71fb      	strb	r3, [r7, #7]
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	71bb      	strb	r3, [r7, #6]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	db3d      	blt.n	800305e <ssd1306_DrawPixel+0x96>
 8002fe2:	79bb      	ldrb	r3, [r7, #6]
 8002fe4:	2b3f      	cmp	r3, #63	@ 0x3f
 8002fe6:	d83a      	bhi.n	800305e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002fe8:	797b      	ldrb	r3, [r7, #5]
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d11a      	bne.n	8003024 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002fee:	79fa      	ldrb	r2, [r7, #7]
 8002ff0:	79bb      	ldrb	r3, [r7, #6]
 8002ff2:	08db      	lsrs	r3, r3, #3
 8002ff4:	b2d8      	uxtb	r0, r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	01db      	lsls	r3, r3, #7
 8002ffa:	4413      	add	r3, r2
 8002ffc:	4a1a      	ldr	r2, [pc, #104]	@ (8003068 <ssd1306_DrawPixel+0xa0>)
 8002ffe:	5cd3      	ldrb	r3, [r2, r3]
 8003000:	b25a      	sxtb	r2, r3
 8003002:	79bb      	ldrb	r3, [r7, #6]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	2101      	movs	r1, #1
 800300a:	fa01 f303 	lsl.w	r3, r1, r3
 800300e:	b25b      	sxtb	r3, r3
 8003010:	4313      	orrs	r3, r2
 8003012:	b259      	sxtb	r1, r3
 8003014:	79fa      	ldrb	r2, [r7, #7]
 8003016:	4603      	mov	r3, r0
 8003018:	01db      	lsls	r3, r3, #7
 800301a:	4413      	add	r3, r2
 800301c:	b2c9      	uxtb	r1, r1
 800301e:	4a12      	ldr	r2, [pc, #72]	@ (8003068 <ssd1306_DrawPixel+0xa0>)
 8003020:	54d1      	strb	r1, [r2, r3]
 8003022:	e01d      	b.n	8003060 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003024:	79fa      	ldrb	r2, [r7, #7]
 8003026:	79bb      	ldrb	r3, [r7, #6]
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	b2d8      	uxtb	r0, r3
 800302c:	4603      	mov	r3, r0
 800302e:	01db      	lsls	r3, r3, #7
 8003030:	4413      	add	r3, r2
 8003032:	4a0d      	ldr	r2, [pc, #52]	@ (8003068 <ssd1306_DrawPixel+0xa0>)
 8003034:	5cd3      	ldrb	r3, [r2, r3]
 8003036:	b25a      	sxtb	r2, r3
 8003038:	79bb      	ldrb	r3, [r7, #6]
 800303a:	f003 0307 	and.w	r3, r3, #7
 800303e:	2101      	movs	r1, #1
 8003040:	fa01 f303 	lsl.w	r3, r1, r3
 8003044:	b25b      	sxtb	r3, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	b25b      	sxtb	r3, r3
 800304a:	4013      	ands	r3, r2
 800304c:	b259      	sxtb	r1, r3
 800304e:	79fa      	ldrb	r2, [r7, #7]
 8003050:	4603      	mov	r3, r0
 8003052:	01db      	lsls	r3, r3, #7
 8003054:	4413      	add	r3, r2
 8003056:	b2c9      	uxtb	r1, r1
 8003058:	4a03      	ldr	r2, [pc, #12]	@ (8003068 <ssd1306_DrawPixel+0xa0>)
 800305a:	54d1      	strb	r1, [r2, r3]
 800305c:	e000      	b.n	8003060 <ssd1306_DrawPixel+0x98>
        return;
 800305e:	bf00      	nop
    }
}
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	200003b0 	.word	0x200003b0

0800306c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b089      	sub	sp, #36	@ 0x24
 8003070:	af00      	add	r7, sp, #0
 8003072:	4604      	mov	r4, r0
 8003074:	4638      	mov	r0, r7
 8003076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800307a:	4623      	mov	r3, r4
 800307c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800307e:	7bfb      	ldrb	r3, [r7, #15]
 8003080:	2b1f      	cmp	r3, #31
 8003082:	d902      	bls.n	800308a <ssd1306_WriteChar+0x1e>
 8003084:	7bfb      	ldrb	r3, [r7, #15]
 8003086:	2b7e      	cmp	r3, #126	@ 0x7e
 8003088:	d901      	bls.n	800308e <ssd1306_WriteChar+0x22>
        return 0;
 800308a:	2300      	movs	r3, #0
 800308c:	e079      	b.n	8003182 <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <ssd1306_WriteChar+0x34>
 8003094:	68ba      	ldr	r2, [r7, #8]
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	3b20      	subs	r3, #32
 800309a:	4413      	add	r3, r2
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	e000      	b.n	80030a2 <ssd1306_WriteChar+0x36>
 80030a0:	783b      	ldrb	r3, [r7, #0]
 80030a2:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80030a4:	4b39      	ldr	r3, [pc, #228]	@ (800318c <ssd1306_WriteChar+0x120>)
 80030a6:	881b      	ldrh	r3, [r3, #0]
 80030a8:	461a      	mov	r2, r3
 80030aa:	7dfb      	ldrb	r3, [r7, #23]
 80030ac:	4413      	add	r3, r2
 80030ae:	2b80      	cmp	r3, #128	@ 0x80
 80030b0:	dc06      	bgt.n	80030c0 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80030b2:	4b36      	ldr	r3, [pc, #216]	@ (800318c <ssd1306_WriteChar+0x120>)
 80030b4:	885b      	ldrh	r3, [r3, #2]
 80030b6:	461a      	mov	r2, r3
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 80030bc:	2b40      	cmp	r3, #64	@ 0x40
 80030be:	dd01      	ble.n	80030c4 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 80030c0:	2300      	movs	r3, #0
 80030c2:	e05e      	b.n	8003182 <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80030c4:	2300      	movs	r3, #0
 80030c6:	61fb      	str	r3, [r7, #28]
 80030c8:	e04d      	b.n	8003166 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	7bfb      	ldrb	r3, [r7, #15]
 80030ce:	3b20      	subs	r3, #32
 80030d0:	7879      	ldrb	r1, [r7, #1]
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4619      	mov	r1, r3
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	440b      	add	r3, r1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	4413      	add	r3, r2
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 80030e4:	2300      	movs	r3, #0
 80030e6:	61bb      	str	r3, [r7, #24]
 80030e8:	e036      	b.n	8003158 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	69bb      	ldr	r3, [r7, #24]
 80030ee:	fa02 f303 	lsl.w	r3, r2, r3
 80030f2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d013      	beq.n	8003122 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80030fa:	4b24      	ldr	r3, [pc, #144]	@ (800318c <ssd1306_WriteChar+0x120>)
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	b2da      	uxtb	r2, r3
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	b2db      	uxtb	r3, r3
 8003104:	4413      	add	r3, r2
 8003106:	b2d8      	uxtb	r0, r3
 8003108:	4b20      	ldr	r3, [pc, #128]	@ (800318c <ssd1306_WriteChar+0x120>)
 800310a:	885b      	ldrh	r3, [r3, #2]
 800310c:	b2da      	uxtb	r2, r3
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	b2db      	uxtb	r3, r3
 8003112:	4413      	add	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 800311a:	4619      	mov	r1, r3
 800311c:	f7ff ff54 	bl	8002fc8 <ssd1306_DrawPixel>
 8003120:	e017      	b.n	8003152 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8003122:	4b1a      	ldr	r3, [pc, #104]	@ (800318c <ssd1306_WriteChar+0x120>)
 8003124:	881b      	ldrh	r3, [r3, #0]
 8003126:	b2da      	uxtb	r2, r3
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	4413      	add	r3, r2
 800312e:	b2d8      	uxtb	r0, r3
 8003130:	4b16      	ldr	r3, [pc, #88]	@ (800318c <ssd1306_WriteChar+0x120>)
 8003132:	885b      	ldrh	r3, [r3, #2]
 8003134:	b2da      	uxtb	r2, r3
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	b2db      	uxtb	r3, r3
 800313a:	4413      	add	r3, r2
 800313c:	b2d9      	uxtb	r1, r3
 800313e:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8003142:	2b00      	cmp	r3, #0
 8003144:	bf0c      	ite	eq
 8003146:	2301      	moveq	r3, #1
 8003148:	2300      	movne	r3, #0
 800314a:	b2db      	uxtb	r3, r3
 800314c:	461a      	mov	r2, r3
 800314e:	f7ff ff3b 	bl	8002fc8 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	3301      	adds	r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d3c4      	bcc.n	80030ea <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	3301      	adds	r3, #1
 8003164:	61fb      	str	r3, [r7, #28]
 8003166:	787b      	ldrb	r3, [r7, #1]
 8003168:	461a      	mov	r2, r3
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	4293      	cmp	r3, r2
 800316e:	d3ac      	bcc.n	80030ca <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8003170:	4b06      	ldr	r3, [pc, #24]	@ (800318c <ssd1306_WriteChar+0x120>)
 8003172:	881a      	ldrh	r2, [r3, #0]
 8003174:	7dfb      	ldrb	r3, [r7, #23]
 8003176:	b29b      	uxth	r3, r3
 8003178:	4413      	add	r3, r2
 800317a:	b29a      	uxth	r2, r3
 800317c:	4b03      	ldr	r3, [pc, #12]	@ (800318c <ssd1306_WriteChar+0x120>)
 800317e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8003180:	7bfb      	ldrb	r3, [r7, #15]
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	@ 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	bd90      	pop	{r4, r7, pc}
 800318a:	bf00      	nop
 800318c:	200007b0 	.word	0x200007b0

08003190 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af02      	add	r7, sp, #8
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	4638      	mov	r0, r7
 800319a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800319e:	e013      	b.n	80031c8 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	7818      	ldrb	r0, [r3, #0]
 80031a4:	7e3b      	ldrb	r3, [r7, #24]
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	463b      	mov	r3, r7
 80031aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ac:	f7ff ff5e 	bl	800306c <ssd1306_WriteChar>
 80031b0:	4603      	mov	r3, r0
 80031b2:	461a      	mov	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d002      	beq.n	80031c2 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	e008      	b.n	80031d4 <ssd1306_WriteString+0x44>
        }
        str++;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e7      	bne.n	80031a0 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	781b      	ldrb	r3, [r3, #0]
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	4603      	mov	r3, r0
 80031e4:	460a      	mov	r2, r1
 80031e6:	71fb      	strb	r3, [r7, #7]
 80031e8:	4613      	mov	r3, r2
 80031ea:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80031ec:	79fb      	ldrb	r3, [r7, #7]
 80031ee:	b29a      	uxth	r2, r3
 80031f0:	4b05      	ldr	r3, [pc, #20]	@ (8003208 <ssd1306_SetCursor+0x2c>)
 80031f2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80031f4:	79bb      	ldrb	r3, [r7, #6]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	4b03      	ldr	r3, [pc, #12]	@ (8003208 <ssd1306_SetCursor+0x2c>)
 80031fa:	805a      	strh	r2, [r3, #2]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
 8003206:	bf00      	nop
 8003208:	200007b0 	.word	0x200007b0

0800320c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8003216:	2381      	movs	r3, #129	@ 0x81
 8003218:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	4618      	mov	r0, r3
 800321e:	f7ff fdf7 	bl	8002e10 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	4618      	mov	r0, r3
 8003226:	f7ff fdf3 	bl	8002e10 <ssd1306_WriteCommand>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d005      	beq.n	8003250 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8003244:	23af      	movs	r3, #175	@ 0xaf
 8003246:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8003248:	4b08      	ldr	r3, [pc, #32]	@ (800326c <ssd1306_SetDisplayOn+0x38>)
 800324a:	2201      	movs	r2, #1
 800324c:	715a      	strb	r2, [r3, #5]
 800324e:	e004      	b.n	800325a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8003250:	23ae      	movs	r3, #174	@ 0xae
 8003252:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8003254:	4b05      	ldr	r3, [pc, #20]	@ (800326c <ssd1306_SetDisplayOn+0x38>)
 8003256:	2200      	movs	r2, #0
 8003258:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800325a:	7bfb      	ldrb	r3, [r7, #15]
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fdd7 	bl	8002e10 <ssd1306_WriteCommand>
}
 8003262:	bf00      	nop
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	200007b0 	.word	0x200007b0

08003270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003276:	4b15      	ldr	r3, [pc, #84]	@ (80032cc <HAL_MspInit+0x5c>)
 8003278:	699b      	ldr	r3, [r3, #24]
 800327a:	4a14      	ldr	r2, [pc, #80]	@ (80032cc <HAL_MspInit+0x5c>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6193      	str	r3, [r2, #24]
 8003282:	4b12      	ldr	r3, [pc, #72]	@ (80032cc <HAL_MspInit+0x5c>)
 8003284:	699b      	ldr	r3, [r3, #24]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	60bb      	str	r3, [r7, #8]
 800328c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800328e:	4b0f      	ldr	r3, [pc, #60]	@ (80032cc <HAL_MspInit+0x5c>)
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	4a0e      	ldr	r2, [pc, #56]	@ (80032cc <HAL_MspInit+0x5c>)
 8003294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003298:	61d3      	str	r3, [r2, #28]
 800329a:	4b0c      	ldr	r3, [pc, #48]	@ (80032cc <HAL_MspInit+0x5c>)
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032a2:	607b      	str	r3, [r7, #4]
 80032a4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80032a6:	4b0a      	ldr	r3, [pc, #40]	@ (80032d0 <HAL_MspInit+0x60>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	60fb      	str	r3, [r7, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032ba:	60fb      	str	r3, [r7, #12]
 80032bc:	4a04      	ldr	r2, [pc, #16]	@ (80032d0 <HAL_MspInit+0x60>)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c2:	bf00      	nop
 80032c4:	3714      	adds	r7, #20
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40021000 	.word	0x40021000
 80032d0:	40010000 	.word	0x40010000

080032d4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b088      	sub	sp, #32
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032dc:	f107 0310 	add.w	r3, r7, #16
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
 80032e4:	605a      	str	r2, [r3, #4]
 80032e6:	609a      	str	r2, [r3, #8]
 80032e8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a14      	ldr	r2, [pc, #80]	@ (8003340 <HAL_ADC_MspInit+0x6c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d121      	bne.n	8003338 <HAL_ADC_MspInit+0x64>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80032f4:	4b13      	ldr	r3, [pc, #76]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 80032f6:	699b      	ldr	r3, [r3, #24]
 80032f8:	4a12      	ldr	r2, [pc, #72]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 80032fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032fe:	6193      	str	r3, [r2, #24]
 8003300:	4b10      	ldr	r3, [pc, #64]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003308:	60fb      	str	r3, [r7, #12]
 800330a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800330c:	4b0d      	ldr	r3, [pc, #52]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	4a0c      	ldr	r2, [pc, #48]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6193      	str	r3, [r2, #24]
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <HAL_ADC_MspInit+0x70>)
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	60bb      	str	r3, [r7, #8]
 8003322:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003324:	2330      	movs	r3, #48	@ 0x30
 8003326:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003328:	2303      	movs	r3, #3
 800332a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800332c:	f107 0310 	add.w	r3, r7, #16
 8003330:	4619      	mov	r1, r3
 8003332:	4805      	ldr	r0, [pc, #20]	@ (8003348 <HAL_ADC_MspInit+0x74>)
 8003334:	f001 f90a 	bl	800454c <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003338:	bf00      	nop
 800333a:	3720      	adds	r7, #32
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40012400 	.word	0x40012400
 8003344:	40021000 	.word	0x40021000
 8003348:	40010800 	.word	0x40010800

0800334c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b088      	sub	sp, #32
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003354:	f107 0310 	add.w	r3, r7, #16
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]
 800335c:	605a      	str	r2, [r3, #4]
 800335e:	609a      	str	r2, [r3, #8]
 8003360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a15      	ldr	r2, [pc, #84]	@ (80033bc <HAL_I2C_MspInit+0x70>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d123      	bne.n	80033b4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800336c:	4b14      	ldr	r3, [pc, #80]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 800336e:	699b      	ldr	r3, [r3, #24]
 8003370:	4a13      	ldr	r2, [pc, #76]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 8003372:	f043 0308 	orr.w	r3, r3, #8
 8003376:	6193      	str	r3, [r2, #24]
 8003378:	4b11      	ldr	r3, [pc, #68]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	f003 0308 	and.w	r3, r3, #8
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003384:	23c0      	movs	r3, #192	@ 0xc0
 8003386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003388:	2312      	movs	r3, #18
 800338a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800338c:	2303      	movs	r3, #3
 800338e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	4619      	mov	r1, r3
 8003396:	480b      	ldr	r0, [pc, #44]	@ (80033c4 <HAL_I2C_MspInit+0x78>)
 8003398:	f001 f8d8 	bl	800454c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800339c:	4b08      	ldr	r3, [pc, #32]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 800339e:	69db      	ldr	r3, [r3, #28]
 80033a0:	4a07      	ldr	r2, [pc, #28]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 80033a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033a6:	61d3      	str	r3, [r2, #28]
 80033a8:	4b05      	ldr	r3, [pc, #20]	@ (80033c0 <HAL_I2C_MspInit+0x74>)
 80033aa:	69db      	ldr	r3, [r3, #28]
 80033ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033b0:	60bb      	str	r3, [r7, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80033b4:	bf00      	nop
 80033b6:	3720      	adds	r7, #32
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40005400 	.word	0x40005400
 80033c0:	40021000 	.word	0x40021000
 80033c4:	40010c00 	.word	0x40010c00

080033c8 <HAL_TIM_OC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_oc: TIM_OC handle pointer
  * @retval None
  */
void HAL_TIM_OC_MspInit(TIM_HandleTypeDef* htim_oc)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  if(htim_oc->Instance==TIM1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a09      	ldr	r2, [pc, #36]	@ (80033fc <HAL_TIM_OC_MspInit+0x34>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10b      	bne.n	80033f2 <HAL_TIM_OC_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80033da:	4b09      	ldr	r3, [pc, #36]	@ (8003400 <HAL_TIM_OC_MspInit+0x38>)
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	4a08      	ldr	r2, [pc, #32]	@ (8003400 <HAL_TIM_OC_MspInit+0x38>)
 80033e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80033e4:	6193      	str	r3, [r2, #24]
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_TIM_OC_MspInit+0x38>)
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033ee:	60fb      	str	r3, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bc80      	pop	{r7}
 80033fa:	4770      	bx	lr
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800340c:	f107 0310 	add.w	r3, r7, #16
 8003410:	2200      	movs	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	605a      	str	r2, [r3, #4]
 8003416:	609a      	str	r2, [r3, #8]
 8003418:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a10      	ldr	r2, [pc, #64]	@ (8003460 <HAL_TIM_MspPostInit+0x5c>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d118      	bne.n	8003456 <HAL_TIM_MspPostInit+0x52>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003424:	4b0f      	ldr	r3, [pc, #60]	@ (8003464 <HAL_TIM_MspPostInit+0x60>)
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	4a0e      	ldr	r2, [pc, #56]	@ (8003464 <HAL_TIM_MspPostInit+0x60>)
 800342a:	f043 0304 	orr.w	r3, r3, #4
 800342e:	6193      	str	r3, [r2, #24]
 8003430:	4b0c      	ldr	r3, [pc, #48]	@ (8003464 <HAL_TIM_MspPostInit+0x60>)
 8003432:	699b      	ldr	r3, [r3, #24]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800343c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003440:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003442:	2302      	movs	r3, #2
 8003444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2302      	movs	r3, #2
 8003448:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344a:	f107 0310 	add.w	r3, r7, #16
 800344e:	4619      	mov	r1, r3
 8003450:	4805      	ldr	r0, [pc, #20]	@ (8003468 <HAL_TIM_MspPostInit+0x64>)
 8003452:	f001 f87b 	bl	800454c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003456:	bf00      	nop
 8003458:	3720      	adds	r7, #32
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	40012c00 	.word	0x40012c00
 8003464:	40021000 	.word	0x40021000
 8003468:	40010800 	.word	0x40010800

0800346c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b08a      	sub	sp, #40	@ 0x28
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 0318 	add.w	r3, r7, #24
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a3b      	ldr	r2, [pc, #236]	@ (8003574 <HAL_UART_MspInit+0x108>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d132      	bne.n	80034f2 <HAL_UART_MspInit+0x86>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800348c:	4b3a      	ldr	r3, [pc, #232]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	4a39      	ldr	r2, [pc, #228]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 8003492:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003496:	6193      	str	r3, [r2, #24]
 8003498:	4b37      	ldr	r3, [pc, #220]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 800349a:	699b      	ldr	r3, [r3, #24]
 800349c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034a0:	617b      	str	r3, [r7, #20]
 80034a2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a4:	4b34      	ldr	r3, [pc, #208]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	4a33      	ldr	r2, [pc, #204]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 80034aa:	f043 0304 	orr.w	r3, r3, #4
 80034ae:	6193      	str	r3, [r2, #24]
 80034b0:	4b31      	ldr	r3, [pc, #196]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 80034b2:	699b      	ldr	r3, [r3, #24]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	613b      	str	r3, [r7, #16]
 80034ba:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80034bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80034c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c2:	2302      	movs	r3, #2
 80034c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80034c6:	2303      	movs	r3, #3
 80034c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034ca:	f107 0318 	add.w	r3, r7, #24
 80034ce:	4619      	mov	r1, r3
 80034d0:	482a      	ldr	r0, [pc, #168]	@ (800357c <HAL_UART_MspInit+0x110>)
 80034d2:	f001 f83b 	bl	800454c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80034d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80034da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034e0:	2300      	movs	r3, #0
 80034e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034e4:	f107 0318 	add.w	r3, r7, #24
 80034e8:	4619      	mov	r1, r3
 80034ea:	4824      	ldr	r0, [pc, #144]	@ (800357c <HAL_UART_MspInit+0x110>)
 80034ec:	f001 f82e 	bl	800454c <HAL_GPIO_Init>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 80034f0:	e03c      	b.n	800356c <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART2)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a22      	ldr	r2, [pc, #136]	@ (8003580 <HAL_UART_MspInit+0x114>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d137      	bne.n	800356c <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART2_CLK_ENABLE();
 80034fc:	4b1e      	ldr	r3, [pc, #120]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	4a1d      	ldr	r2, [pc, #116]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 8003502:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003506:	61d3      	str	r3, [r2, #28]
 8003508:	4b1b      	ldr	r3, [pc, #108]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	60fb      	str	r3, [r7, #12]
 8003512:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003514:	4b18      	ldr	r3, [pc, #96]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	4a17      	ldr	r2, [pc, #92]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 800351a:	f043 0304 	orr.w	r3, r3, #4
 800351e:	6193      	str	r3, [r2, #24]
 8003520:	4b15      	ldr	r3, [pc, #84]	@ (8003578 <HAL_UART_MspInit+0x10c>)
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	60bb      	str	r3, [r7, #8]
 800352a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352c:	2304      	movs	r3, #4
 800352e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003530:	2302      	movs	r3, #2
 8003532:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003534:	2303      	movs	r3, #3
 8003536:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003538:	f107 0318 	add.w	r3, r7, #24
 800353c:	4619      	mov	r1, r3
 800353e:	480f      	ldr	r0, [pc, #60]	@ (800357c <HAL_UART_MspInit+0x110>)
 8003540:	f001 f804 	bl	800454c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003544:	2308      	movs	r3, #8
 8003546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003548:	2300      	movs	r3, #0
 800354a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800354c:	2300      	movs	r3, #0
 800354e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003550:	f107 0318 	add.w	r3, r7, #24
 8003554:	4619      	mov	r1, r3
 8003556:	4809      	ldr	r0, [pc, #36]	@ (800357c <HAL_UART_MspInit+0x110>)
 8003558:	f000 fff8 	bl	800454c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800355c:	2200      	movs	r2, #0
 800355e:	2100      	movs	r1, #0
 8003560:	2026      	movs	r0, #38	@ 0x26
 8003562:	f000 ff0a 	bl	800437a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003566:	2026      	movs	r0, #38	@ 0x26
 8003568:	f000 ff23 	bl	80043b2 <HAL_NVIC_EnableIRQ>
}
 800356c:	bf00      	nop
 800356e:	3728      	adds	r7, #40	@ 0x28
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}
 8003574:	40013800 	.word	0x40013800
 8003578:	40021000 	.word	0x40021000
 800357c:	40010800 	.word	0x40010800
 8003580:	40004400 	.word	0x40004400

08003584 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003584:	b480      	push	{r7}
 8003586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003588:	bf00      	nop
 800358a:	e7fd      	b.n	8003588 <NMI_Handler+0x4>

0800358c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800358c:	b480      	push	{r7}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003590:	bf00      	nop
 8003592:	e7fd      	b.n	8003590 <HardFault_Handler+0x4>

08003594 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003594:	b480      	push	{r7}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <MemManage_Handler+0x4>

0800359c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <BusFault_Handler+0x4>

080035a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a4:	b480      	push	{r7}
 80035a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035a8:	bf00      	nop
 80035aa:	e7fd      	b.n	80035a8 <UsageFault_Handler+0x4>

080035ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80035ac:	b480      	push	{r7}
 80035ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80035b0:	bf00      	nop
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035bc:	bf00      	nop
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035c8:	bf00      	nop
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bc80      	pop	{r7}
 80035ce:	4770      	bx	lr

080035d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035d4:	f000 f8b4 	bl	8003740 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035d8:	bf00      	nop
 80035da:	bd80      	pop	{r7, pc}

080035dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035e0:	4802      	ldr	r0, [pc, #8]	@ (80035ec <USART2_IRQHandler+0x10>)
 80035e2:	f003 f82b 	bl	800663c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	20000368 	.word	0x20000368

080035f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80035f8:	4a14      	ldr	r2, [pc, #80]	@ (800364c <_sbrk+0x5c>)
 80035fa:	4b15      	ldr	r3, [pc, #84]	@ (8003650 <_sbrk+0x60>)
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003604:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <_sbrk+0x64>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d102      	bne.n	8003612 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800360c:	4b11      	ldr	r3, [pc, #68]	@ (8003654 <_sbrk+0x64>)
 800360e:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <_sbrk+0x68>)
 8003610:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003612:	4b10      	ldr	r3, [pc, #64]	@ (8003654 <_sbrk+0x64>)
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4413      	add	r3, r2
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	429a      	cmp	r2, r3
 800361e:	d207      	bcs.n	8003630 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003620:	f004 fd06 	bl	8008030 <__errno>
 8003624:	4603      	mov	r3, r0
 8003626:	220c      	movs	r2, #12
 8003628:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295
 800362e:	e009      	b.n	8003644 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003630:	4b08      	ldr	r3, [pc, #32]	@ (8003654 <_sbrk+0x64>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003636:	4b07      	ldr	r3, [pc, #28]	@ (8003654 <_sbrk+0x64>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4413      	add	r3, r2
 800363e:	4a05      	ldr	r2, [pc, #20]	@ (8003654 <_sbrk+0x64>)
 8003640:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003642:	68fb      	ldr	r3, [r7, #12]
}
 8003644:	4618      	mov	r0, r3
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	20005000 	.word	0x20005000
 8003650:	00000400 	.word	0x00000400
 8003654:	200007b8 	.word	0x200007b8
 8003658:	20000908 	.word	0x20000908

0800365c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800365c:	b480      	push	{r7}
 800365e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003660:	bf00      	nop
 8003662:	46bd      	mov	sp, r7
 8003664:	bc80      	pop	{r7}
 8003666:	4770      	bx	lr

08003668 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003668:	f7ff fff8 	bl	800365c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800366c:	480b      	ldr	r0, [pc, #44]	@ (800369c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800366e:	490c      	ldr	r1, [pc, #48]	@ (80036a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8003670:	4a0c      	ldr	r2, [pc, #48]	@ (80036a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8003672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003674:	e002      	b.n	800367c <LoopCopyDataInit>

08003676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800367a:	3304      	adds	r3, #4

0800367c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800367c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800367e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003680:	d3f9      	bcc.n	8003676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003682:	4a09      	ldr	r2, [pc, #36]	@ (80036a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003684:	4c09      	ldr	r4, [pc, #36]	@ (80036ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003688:	e001      	b.n	800368e <LoopFillZerobss>

0800368a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800368a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800368c:	3204      	adds	r2, #4

0800368e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800368e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003690:	d3fb      	bcc.n	800368a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003692:	f004 fcd3 	bl	800803c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003696:	f7ff f985 	bl	80029a4 <main>
  bx lr
 800369a:	4770      	bx	lr
  ldr r0, =_sdata
 800369c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036a0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80036a4:	08009684 	.word	0x08009684
  ldr r2, =_sbss
 80036a8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80036ac:	20000908 	.word	0x20000908

080036b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80036b0:	e7fe      	b.n	80036b0 <ADC1_2_IRQHandler>
	...

080036b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036b8:	4b08      	ldr	r3, [pc, #32]	@ (80036dc <HAL_Init+0x28>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a07      	ldr	r2, [pc, #28]	@ (80036dc <HAL_Init+0x28>)
 80036be:	f043 0310 	orr.w	r3, r3, #16
 80036c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036c4:	2003      	movs	r0, #3
 80036c6:	f000 fe4d 	bl	8004364 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036ca:	200f      	movs	r0, #15
 80036cc:	f000 f808 	bl	80036e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036d0:	f7ff fdce 	bl	8003270 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	40022000 	.word	0x40022000

080036e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036e8:	4b12      	ldr	r3, [pc, #72]	@ (8003734 <HAL_InitTick+0x54>)
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	4b12      	ldr	r3, [pc, #72]	@ (8003738 <HAL_InitTick+0x58>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	4619      	mov	r1, r3
 80036f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80036f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80036fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fe65 	bl	80043ce <HAL_SYSTICK_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00e      	b.n	800372c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b0f      	cmp	r3, #15
 8003712:	d80a      	bhi.n	800372a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003714:	2200      	movs	r2, #0
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	f000 fe2d 	bl	800437a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003720:	4a06      	ldr	r2, [pc, #24]	@ (800373c <HAL_InitTick+0x5c>)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}
 8003734:	20000000 	.word	0x20000000
 8003738:	20000008 	.word	0x20000008
 800373c:	20000004 	.word	0x20000004

08003740 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003744:	4b05      	ldr	r3, [pc, #20]	@ (800375c <HAL_IncTick+0x1c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	461a      	mov	r2, r3
 800374a:	4b05      	ldr	r3, [pc, #20]	@ (8003760 <HAL_IncTick+0x20>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4413      	add	r3, r2
 8003750:	4a03      	ldr	r2, [pc, #12]	@ (8003760 <HAL_IncTick+0x20>)
 8003752:	6013      	str	r3, [r2, #0]
}
 8003754:	bf00      	nop
 8003756:	46bd      	mov	sp, r7
 8003758:	bc80      	pop	{r7}
 800375a:	4770      	bx	lr
 800375c:	20000008 	.word	0x20000008
 8003760:	200007bc 	.word	0x200007bc

08003764 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003764:	b480      	push	{r7}
 8003766:	af00      	add	r7, sp, #0
  return uwTick;
 8003768:	4b02      	ldr	r3, [pc, #8]	@ (8003774 <HAL_GetTick+0x10>)
 800376a:	681b      	ldr	r3, [r3, #0]
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	bc80      	pop	{r7}
 8003772:	4770      	bx	lr
 8003774:	200007bc 	.word	0x200007bc

08003778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003780:	f7ff fff0 	bl	8003764 <HAL_GetTick>
 8003784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003790:	d005      	beq.n	800379e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_Delay+0x44>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800379e:	bf00      	nop
 80037a0:	f7ff ffe0 	bl	8003764 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d8f7      	bhi.n	80037a0 <HAL_Delay+0x28>
  {
  }
}
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20000008 	.word	0x20000008

080037c0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b086      	sub	sp, #24
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e0be      	b.n	8003960 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d109      	bne.n	8003804 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2200      	movs	r2, #0
 80037f4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7ff fd68 	bl	80032d4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f000 fbf1 	bl	8003fec <ADC_ConversionStop_Disable>
 800380a:	4603      	mov	r3, r0
 800380c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b00      	cmp	r3, #0
 8003818:	f040 8099 	bne.w	800394e <HAL_ADC_Init+0x18e>
 800381c:	7dfb      	ldrb	r3, [r7, #23]
 800381e:	2b00      	cmp	r3, #0
 8003820:	f040 8095 	bne.w	800394e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003828:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800382c:	f023 0302 	bic.w	r3, r3, #2
 8003830:	f043 0202 	orr.w	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003840:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	7b1b      	ldrb	r3, [r3, #12]
 8003846:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003848:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800384a:	68ba      	ldr	r2, [r7, #8]
 800384c:	4313      	orrs	r3, r2
 800384e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003858:	d003      	beq.n	8003862 <HAL_ADC_Init+0xa2>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d102      	bne.n	8003868 <HAL_ADC_Init+0xa8>
 8003862:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003866:	e000      	b.n	800386a <HAL_ADC_Init+0xaa>
 8003868:	2300      	movs	r3, #0
 800386a:	693a      	ldr	r2, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	7d1b      	ldrb	r3, [r3, #20]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d119      	bne.n	80038ac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7b1b      	ldrb	r3, [r3, #12]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d109      	bne.n	8003894 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	3b01      	subs	r3, #1
 8003886:	035a      	lsls	r2, r3, #13
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003890:	613b      	str	r3, [r7, #16]
 8003892:	e00b      	b.n	80038ac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003898:	f043 0220 	orr.w	r2, r3, #32
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038a4:	f043 0201 	orr.w	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	693a      	ldr	r2, [r7, #16]
 80038bc:	430a      	orrs	r2, r1
 80038be:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689a      	ldr	r2, [r3, #8]
 80038c6:	4b28      	ldr	r3, [pc, #160]	@ (8003968 <HAL_ADC_Init+0x1a8>)
 80038c8:	4013      	ands	r3, r2
 80038ca:	687a      	ldr	r2, [r7, #4]
 80038cc:	6812      	ldr	r2, [r2, #0]
 80038ce:	68b9      	ldr	r1, [r7, #8]
 80038d0:	430b      	orrs	r3, r1
 80038d2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80038dc:	d003      	beq.n	80038e6 <HAL_ADC_Init+0x126>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d104      	bne.n	80038f0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	691b      	ldr	r3, [r3, #16]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	051b      	lsls	r3, r3, #20
 80038ee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	430a      	orrs	r2, r1
 8003902:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	4b18      	ldr	r3, [pc, #96]	@ (800396c <HAL_ADC_Init+0x1ac>)
 800390c:	4013      	ands	r3, r2
 800390e:	68ba      	ldr	r2, [r7, #8]
 8003910:	429a      	cmp	r2, r3
 8003912:	d10b      	bne.n	800392c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800391e:	f023 0303 	bic.w	r3, r3, #3
 8003922:	f043 0201 	orr.w	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800392a:	e018      	b.n	800395e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003930:	f023 0312 	bic.w	r3, r3, #18
 8003934:	f043 0210 	orr.w	r2, r3, #16
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003940:	f043 0201 	orr.w	r2, r3, #1
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8003948:	2301      	movs	r3, #1
 800394a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800394c:	e007      	b.n	800395e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	f043 0210 	orr.w	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800395e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	ffe1f7fd 	.word	0xffe1f7fd
 800396c:	ff1f0efe 	.word	0xff1f0efe

08003970 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003978:	2300      	movs	r3, #0
 800397a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADC_Start+0x1a>
 8003986:	2302      	movs	r3, #2
 8003988:	e098      	b.n	8003abc <HAL_ADC_Start+0x14c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 fad0 	bl	8003f38 <ADC_Enable>
 8003998:	4603      	mov	r3, r0
 800399a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800399c:	7bfb      	ldrb	r3, [r7, #15]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f040 8087 	bne.w	8003ab2 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039ac:	f023 0301 	bic.w	r3, r3, #1
 80039b0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a41      	ldr	r2, [pc, #260]	@ (8003ac4 <HAL_ADC_Start+0x154>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d105      	bne.n	80039ce <HAL_ADC_Start+0x5e>
 80039c2:	4b41      	ldr	r3, [pc, #260]	@ (8003ac8 <HAL_ADC_Start+0x158>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d115      	bne.n	80039fa <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d026      	beq.n	8003a36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80039f0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80039f8:	e01d      	b.n	8003a36 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039fe:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003ac8 <HAL_ADC_Start+0x158>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d004      	beq.n	8003a1a <HAL_ADC_Start+0xaa>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a2b      	ldr	r2, [pc, #172]	@ (8003ac4 <HAL_ADC_Start+0x154>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d10d      	bne.n	8003a36 <HAL_ADC_Start+0xc6>
 8003a1a:	4b2b      	ldr	r3, [pc, #172]	@ (8003ac8 <HAL_ADC_Start+0x158>)
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a2a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003a2e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d006      	beq.n	8003a50 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a46:	f023 0206 	bic.w	r2, r3, #6
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003a4e:	e002      	b.n	8003a56 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0202 	mvn.w	r2, #2
 8003a66:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003a72:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003a76:	d113      	bne.n	8003aa0 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a7c:	4a11      	ldr	r2, [pc, #68]	@ (8003ac4 <HAL_ADC_Start+0x154>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d105      	bne.n	8003a8e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003a82:	4b11      	ldr	r3, [pc, #68]	@ (8003ac8 <HAL_ADC_Start+0x158>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d108      	bne.n	8003aa0 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e00c      	b.n	8003aba <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689a      	ldr	r2, [r3, #8]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8003aae:	609a      	str	r2, [r3, #8]
 8003ab0:	e003      	b.n	8003aba <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40012800 	.word	0x40012800
 8003ac8:	40012400 	.word	0x40012400

08003acc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d101      	bne.n	8003ae6 <HAL_ADC_Stop+0x1a>
 8003ae2:	2302      	movs	r3, #2
 8003ae4:	e01a      	b.n	8003b1c <HAL_ADC_Stop+0x50>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fa7c 	bl	8003fec <ADC_ConversionStop_Disable>
 8003af4:	4603      	mov	r3, r0
 8003af6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003af8:	7bfb      	ldrb	r3, [r7, #15]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d109      	bne.n	8003b12 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	f043 0201 	orr.w	r2, r3, #1
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003b1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3710      	adds	r7, #16
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}

08003b24 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003b24:	b590      	push	{r4, r7, lr}
 8003b26:	b087      	sub	sp, #28
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8003b3a:	f7ff fe13 	bl	8003764 <HAL_GetTick>
 8003b3e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00b      	beq.n	8003b66 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b52:	f043 0220 	orr.w	r2, r3, #32
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e0d3      	b.n	8003d0e <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d131      	bne.n	8003bd8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d12a      	bne.n	8003bd8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003b82:	e021      	b.n	8003bc8 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d01d      	beq.n	8003bc8 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <HAL_ADC_PollForConversion+0x7e>
 8003b92:	f7ff fde7 	bl	8003764 <HAL_GetTick>
 8003b96:	4602      	mov	r2, r0
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	1ad3      	subs	r3, r2, r3
 8003b9c:	683a      	ldr	r2, [r7, #0]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d212      	bcs.n	8003bc8 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f003 0302 	and.w	r3, r3, #2
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10b      	bne.n	8003bc8 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb4:	f043 0204 	orr.w	r2, r3, #4
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8003bc4:	2303      	movs	r3, #3
 8003bc6:	e0a2      	b.n	8003d0e <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0302 	and.w	r3, r3, #2
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0d6      	beq.n	8003b84 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8003bd6:	e070      	b.n	8003cba <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	@ (8003d18 <HAL_ADC_PollForConversion+0x1f4>)
 8003bda:	681c      	ldr	r4, [r3, #0]
 8003bdc:	2002      	movs	r0, #2
 8003bde:	f001 ffdb 	bl	8005b98 <HAL_RCCEx_GetPeriphCLKFreq>
 8003be2:	4603      	mov	r3, r0
 8003be4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6919      	ldr	r1, [r3, #16]
 8003bee:	4b4b      	ldr	r3, [pc, #300]	@ (8003d1c <HAL_ADC_PollForConversion+0x1f8>)
 8003bf0:	400b      	ands	r3, r1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d118      	bne.n	8003c28 <HAL_ADC_PollForConversion+0x104>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68d9      	ldr	r1, [r3, #12]
 8003bfc:	4b48      	ldr	r3, [pc, #288]	@ (8003d20 <HAL_ADC_PollForConversion+0x1fc>)
 8003bfe:	400b      	ands	r3, r1
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d111      	bne.n	8003c28 <HAL_ADC_PollForConversion+0x104>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6919      	ldr	r1, [r3, #16]
 8003c0a:	4b46      	ldr	r3, [pc, #280]	@ (8003d24 <HAL_ADC_PollForConversion+0x200>)
 8003c0c:	400b      	ands	r3, r1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_ADC_PollForConversion+0x100>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68d9      	ldr	r1, [r3, #12]
 8003c18:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_ADC_PollForConversion+0x204>)
 8003c1a:	400b      	ands	r3, r1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ADC_PollForConversion+0x100>
 8003c20:	2314      	movs	r3, #20
 8003c22:	e020      	b.n	8003c66 <HAL_ADC_PollForConversion+0x142>
 8003c24:	2329      	movs	r3, #41	@ 0x29
 8003c26:	e01e      	b.n	8003c66 <HAL_ADC_PollForConversion+0x142>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	6919      	ldr	r1, [r3, #16]
 8003c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d24 <HAL_ADC_PollForConversion+0x200>)
 8003c30:	400b      	ands	r3, r1
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d106      	bne.n	8003c44 <HAL_ADC_PollForConversion+0x120>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
 8003c3c:	4b3a      	ldr	r3, [pc, #232]	@ (8003d28 <HAL_ADC_PollForConversion+0x204>)
 8003c3e:	400b      	ands	r3, r1
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_ADC_PollForConversion+0x13c>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6919      	ldr	r1, [r3, #16]
 8003c4a:	4b38      	ldr	r3, [pc, #224]	@ (8003d2c <HAL_ADC_PollForConversion+0x208>)
 8003c4c:	400b      	ands	r3, r1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d108      	bne.n	8003c64 <HAL_ADC_PollForConversion+0x140>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68d9      	ldr	r1, [r3, #12]
 8003c58:	4b34      	ldr	r3, [pc, #208]	@ (8003d2c <HAL_ADC_PollForConversion+0x208>)
 8003c5a:	400b      	ands	r3, r1
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d101      	bne.n	8003c64 <HAL_ADC_PollForConversion+0x140>
 8003c60:	2354      	movs	r3, #84	@ 0x54
 8003c62:	e000      	b.n	8003c66 <HAL_ADC_PollForConversion+0x142>
 8003c64:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8003c66:	fb02 f303 	mul.w	r3, r2, r3
 8003c6a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c6c:	e021      	b.n	8003cb2 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c74:	d01a      	beq.n	8003cac <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d007      	beq.n	8003c8c <HAL_ADC_PollForConversion+0x168>
 8003c7c:	f7ff fd72 	bl	8003764 <HAL_GetTick>
 8003c80:	4602      	mov	r2, r0
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	1ad3      	subs	r3, r2, r3
 8003c86:	683a      	ldr	r2, [r7, #0]
 8003c88:	429a      	cmp	r2, r3
 8003c8a:	d20f      	bcs.n	8003cac <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	693a      	ldr	r2, [r7, #16]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d90b      	bls.n	8003cac <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	f043 0204 	orr.w	r2, r3, #4
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	e030      	b.n	8003d0e <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d8d9      	bhi.n	8003c6e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0212 	mvn.w	r2, #18
 8003cc2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8003cda:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8003cde:	d115      	bne.n	8003d0c <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d111      	bne.n	8003d0c <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d105      	bne.n	8003d0c <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d04:	f043 0201 	orr.w	r2, r3, #1
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd90      	pop	{r4, r7, pc}
 8003d16:	bf00      	nop
 8003d18:	20000000 	.word	0x20000000
 8003d1c:	24924924 	.word	0x24924924
 8003d20:	00924924 	.word	0x00924924
 8003d24:	12492492 	.word	0x12492492
 8003d28:	00492492 	.word	0x00492492
 8003d2c:	00249249 	.word	0x00249249

08003d30 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	370c      	adds	r7, #12
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bc80      	pop	{r7}
 8003d46:	4770      	bx	lr

08003d48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003d48:	b480      	push	{r7}
 8003d4a:	b085      	sub	sp, #20
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
 8003d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d101      	bne.n	8003d68 <HAL_ADC_ConfigChannel+0x20>
 8003d64:	2302      	movs	r3, #2
 8003d66:	e0dc      	b.n	8003f22 <HAL_ADC_ConfigChannel+0x1da>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	2b06      	cmp	r3, #6
 8003d76:	d81c      	bhi.n	8003db2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	3b05      	subs	r3, #5
 8003d8a:	221f      	movs	r2, #31
 8003d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d90:	43db      	mvns	r3, r3
 8003d92:	4019      	ands	r1, r3
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	3b05      	subs	r3, #5
 8003da4:	fa00 f203 	lsl.w	r2, r0, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	430a      	orrs	r2, r1
 8003dae:	635a      	str	r2, [r3, #52]	@ 0x34
 8003db0:	e03c      	b.n	8003e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	2b0c      	cmp	r3, #12
 8003db8:	d81c      	bhi.n	8003df4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	3b23      	subs	r3, #35	@ 0x23
 8003dcc:	221f      	movs	r2, #31
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	4019      	ands	r1, r3
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b23      	subs	r3, #35	@ 0x23
 8003de6:	fa00 f203 	lsl.w	r2, r0, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	430a      	orrs	r2, r1
 8003df0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003df2:	e01b      	b.n	8003e2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4413      	add	r3, r2
 8003e04:	3b41      	subs	r3, #65	@ 0x41
 8003e06:	221f      	movs	r2, #31
 8003e08:	fa02 f303 	lsl.w	r3, r2, r3
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	4019      	ands	r1, r3
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3b41      	subs	r3, #65	@ 0x41
 8003e20:	fa00 f203 	lsl.w	r2, r0, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	2b09      	cmp	r3, #9
 8003e32:	d91c      	bls.n	8003e6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68d9      	ldr	r1, [r3, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	005b      	lsls	r3, r3, #1
 8003e42:	4413      	add	r3, r2
 8003e44:	3b1e      	subs	r3, #30
 8003e46:	2207      	movs	r2, #7
 8003e48:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4c:	43db      	mvns	r3, r3
 8003e4e:	4019      	ands	r1, r3
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	6898      	ldr	r0, [r3, #8]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3b1e      	subs	r3, #30
 8003e60:	fa00 f203 	lsl.w	r2, r0, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	60da      	str	r2, [r3, #12]
 8003e6c:	e019      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6919      	ldr	r1, [r3, #16]
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	2207      	movs	r2, #7
 8003e80:	fa02 f303 	lsl.w	r3, r2, r3
 8003e84:	43db      	mvns	r3, r3
 8003e86:	4019      	ands	r1, r3
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	6898      	ldr	r0, [r3, #8]
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	005b      	lsls	r3, r3, #1
 8003e94:	4413      	add	r3, r2
 8003e96:	fa00 f203 	lsl.w	r2, r0, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	430a      	orrs	r2, r1
 8003ea0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	2b10      	cmp	r3, #16
 8003ea8:	d003      	beq.n	8003eb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003eae:	2b11      	cmp	r3, #17
 8003eb0:	d132      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a1d      	ldr	r2, [pc, #116]	@ (8003f2c <HAL_ADC_ConfigChannel+0x1e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d125      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d126      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003ed8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b10      	cmp	r3, #16
 8003ee0:	d11a      	bne.n	8003f18 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ee2:	4b13      	ldr	r3, [pc, #76]	@ (8003f30 <HAL_ADC_ConfigChannel+0x1e8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a13      	ldr	r2, [pc, #76]	@ (8003f34 <HAL_ADC_ConfigChannel+0x1ec>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	0c9a      	lsrs	r2, r3, #18
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x1b2>
 8003f06:	e007      	b.n	8003f18 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f0c:	f043 0220 	orr.w	r2, r3, #32
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bc80      	pop	{r7}
 8003f2a:	4770      	bx	lr
 8003f2c:	40012400 	.word	0x40012400
 8003f30:	20000000 	.word	0x20000000
 8003f34:	431bde83 	.word	0x431bde83

08003f38 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003f40:	2300      	movs	r3, #0
 8003f42:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d040      	beq.n	8003fd8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	689a      	ldr	r2, [r3, #8]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f042 0201 	orr.w	r2, r2, #1
 8003f64:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003f66:	4b1f      	ldr	r3, [pc, #124]	@ (8003fe4 <ADC_Enable+0xac>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8003fe8 <ADC_Enable+0xb0>)
 8003f6c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f70:	0c9b      	lsrs	r3, r3, #18
 8003f72:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f74:	e002      	b.n	8003f7c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	3b01      	subs	r3, #1
 8003f7a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f9      	bne.n	8003f76 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f82:	f7ff fbef 	bl	8003764 <HAL_GetTick>
 8003f86:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003f88:	e01f      	b.n	8003fca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003f8a:	f7ff fbeb 	bl	8003764 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d918      	bls.n	8003fca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d011      	beq.n	8003fca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003faa:	f043 0210 	orr.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb6:	f043 0201 	orr.w	r2, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e007      	b.n	8003fda <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	689b      	ldr	r3, [r3, #8]
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d1d8      	bne.n	8003f8a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	20000000 	.word	0x20000000
 8003fe8:	431bde83 	.word	0x431bde83

08003fec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12e      	bne.n	8004064 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689a      	ldr	r2, [r3, #8]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f022 0201 	bic.w	r2, r2, #1
 8004014:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004016:	f7ff fba5 	bl	8003764 <HAL_GetTick>
 800401a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800401c:	e01b      	b.n	8004056 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800401e:	f7ff fba1 	bl	8003764 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	2b02      	cmp	r3, #2
 800402a:	d914      	bls.n	8004056 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10d      	bne.n	8004056 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403e:	f043 0210 	orr.w	r2, r3, #16
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800404a:	f043 0201 	orr.w	r2, r3, #1
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e007      	b.n	8004066 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	f003 0301 	and.w	r3, r3, #1
 8004060:	2b01      	cmp	r3, #1
 8004062:	d0dc      	beq.n	800401e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8004070:	b590      	push	{r4, r7, lr}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 800407c:	2300      	movs	r3, #0
 800407e:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004086:	2b01      	cmp	r3, #1
 8004088:	d101      	bne.n	800408e <HAL_ADCEx_Calibration_Start+0x1e>
 800408a:	2302      	movs	r3, #2
 800408c:	e097      	b.n	80041be <HAL_ADCEx_Calibration_Start+0x14e>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffa8 	bl	8003fec <ADC_ConversionStop_Disable>
 800409c:	4603      	mov	r3, r0
 800409e:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff ff49 	bl	8003f38 <ADC_Enable>
 80040a6:	4603      	mov	r3, r0
 80040a8:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 8081 	bne.w	80041b4 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040b6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80040ba:	f023 0302 	bic.w	r3, r3, #2
 80040be:	f043 0202 	orr.w	r2, r3, #2
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80040c6:	4b40      	ldr	r3, [pc, #256]	@ (80041c8 <HAL_ADCEx_Calibration_Start+0x158>)
 80040c8:	681c      	ldr	r4, [r3, #0]
 80040ca:	2002      	movs	r0, #2
 80040cc:	f001 fd64 	bl	8005b98 <HAL_RCCEx_GetPeriphCLKFreq>
 80040d0:	4603      	mov	r3, r0
 80040d2:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80040d6:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80040d8:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80040da:	e002      	b.n	80040e2 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	3b01      	subs	r3, #1
 80040e0:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f9      	bne.n	80040dc <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f042 0208 	orr.w	r2, r2, #8
 80040f6:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80040f8:	f7ff fb34 	bl	8003764 <HAL_GetTick>
 80040fc:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80040fe:	e01b      	b.n	8004138 <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8004100:	f7ff fb30 	bl	8003764 <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	1ad3      	subs	r3, r2, r3
 800410a:	2b0a      	cmp	r3, #10
 800410c:	d914      	bls.n	8004138 <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0308 	and.w	r3, r3, #8
 8004118:	2b00      	cmp	r3, #0
 800411a:	d00d      	beq.n	8004138 <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004120:	f023 0312 	bic.w	r3, r3, #18
 8004124:	f043 0210 	orr.w	r2, r3, #16
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e042      	b.n	80041be <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1dc      	bne.n	8004100 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f042 0204 	orr.w	r2, r2, #4
 8004154:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8004156:	f7ff fb05 	bl	8003764 <HAL_GetTick>
 800415a:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800415c:	e01b      	b.n	8004196 <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800415e:	f7ff fb01 	bl	8003764 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b0a      	cmp	r3, #10
 800416a:	d914      	bls.n	8004196 <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00d      	beq.n	8004196 <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417e:	f023 0312 	bic.w	r3, r3, #18
 8004182:	f043 0210 	orr.w	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e013      	b.n	80041be <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 0304 	and.w	r3, r3, #4
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1dc      	bne.n	800415e <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a8:	f023 0303 	bic.w	r3, r3, #3
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80041bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041be:	4618      	mov	r0, r3
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd90      	pop	{r4, r7, pc}
 80041c6:	bf00      	nop
 80041c8:	20000000 	.word	0x20000000

080041cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041dc:	4b0c      	ldr	r3, [pc, #48]	@ (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041e8:	4013      	ands	r3, r2
 80041ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80041fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041fe:	4a04      	ldr	r2, [pc, #16]	@ (8004210 <__NVIC_SetPriorityGrouping+0x44>)
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	60d3      	str	r3, [r2, #12]
}
 8004204:	bf00      	nop
 8004206:	3714      	adds	r7, #20
 8004208:	46bd      	mov	sp, r7
 800420a:	bc80      	pop	{r7}
 800420c:	4770      	bx	lr
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00

08004214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004214:	b480      	push	{r7}
 8004216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004218:	4b04      	ldr	r3, [pc, #16]	@ (800422c <__NVIC_GetPriorityGrouping+0x18>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	0a1b      	lsrs	r3, r3, #8
 800421e:	f003 0307 	and.w	r3, r3, #7
}
 8004222:	4618      	mov	r0, r3
 8004224:	46bd      	mov	sp, r7
 8004226:	bc80      	pop	{r7}
 8004228:	4770      	bx	lr
 800422a:	bf00      	nop
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800423e:	2b00      	cmp	r3, #0
 8004240:	db0b      	blt.n	800425a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004242:	79fb      	ldrb	r3, [r7, #7]
 8004244:	f003 021f 	and.w	r2, r3, #31
 8004248:	4906      	ldr	r1, [pc, #24]	@ (8004264 <__NVIC_EnableIRQ+0x34>)
 800424a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	2001      	movs	r0, #1
 8004252:	fa00 f202 	lsl.w	r2, r0, r2
 8004256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	bc80      	pop	{r7}
 8004262:	4770      	bx	lr
 8004264:	e000e100 	.word	0xe000e100

08004268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004268:	b480      	push	{r7}
 800426a:	b083      	sub	sp, #12
 800426c:	af00      	add	r7, sp, #0
 800426e:	4603      	mov	r3, r0
 8004270:	6039      	str	r1, [r7, #0]
 8004272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004278:	2b00      	cmp	r3, #0
 800427a:	db0a      	blt.n	8004292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	b2da      	uxtb	r2, r3
 8004280:	490c      	ldr	r1, [pc, #48]	@ (80042b4 <__NVIC_SetPriority+0x4c>)
 8004282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	b2d2      	uxtb	r2, r2
 800428a:	440b      	add	r3, r1
 800428c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004290:	e00a      	b.n	80042a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	b2da      	uxtb	r2, r3
 8004296:	4908      	ldr	r1, [pc, #32]	@ (80042b8 <__NVIC_SetPriority+0x50>)
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	f003 030f 	and.w	r3, r3, #15
 800429e:	3b04      	subs	r3, #4
 80042a0:	0112      	lsls	r2, r2, #4
 80042a2:	b2d2      	uxtb	r2, r2
 80042a4:	440b      	add	r3, r1
 80042a6:	761a      	strb	r2, [r3, #24]
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	e000e100 	.word	0xe000e100
 80042b8:	e000ed00 	.word	0xe000ed00

080042bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042bc:	b480      	push	{r7}
 80042be:	b089      	sub	sp, #36	@ 0x24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	f1c3 0307 	rsb	r3, r3, #7
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	bf28      	it	cs
 80042da:	2304      	movcs	r3, #4
 80042dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	3304      	adds	r3, #4
 80042e2:	2b06      	cmp	r3, #6
 80042e4:	d902      	bls.n	80042ec <NVIC_EncodePriority+0x30>
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3b03      	subs	r3, #3
 80042ea:	e000      	b.n	80042ee <NVIC_EncodePriority+0x32>
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f0:	f04f 32ff 	mov.w	r2, #4294967295
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	fa02 f303 	lsl.w	r3, r2, r3
 80042fa:	43da      	mvns	r2, r3
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	401a      	ands	r2, r3
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004304:	f04f 31ff 	mov.w	r1, #4294967295
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa01 f303 	lsl.w	r3, r1, r3
 800430e:	43d9      	mvns	r1, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	4313      	orrs	r3, r2
         );
}
 8004316:	4618      	mov	r0, r3
 8004318:	3724      	adds	r7, #36	@ 0x24
 800431a:	46bd      	mov	sp, r7
 800431c:	bc80      	pop	{r7}
 800431e:	4770      	bx	lr

08004320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	3b01      	subs	r3, #1
 800432c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004330:	d301      	bcc.n	8004336 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004332:	2301      	movs	r3, #1
 8004334:	e00f      	b.n	8004356 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004336:	4a0a      	ldr	r2, [pc, #40]	@ (8004360 <SysTick_Config+0x40>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	3b01      	subs	r3, #1
 800433c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433e:	210f      	movs	r1, #15
 8004340:	f04f 30ff 	mov.w	r0, #4294967295
 8004344:	f7ff ff90 	bl	8004268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004348:	4b05      	ldr	r3, [pc, #20]	@ (8004360 <SysTick_Config+0x40>)
 800434a:	2200      	movs	r2, #0
 800434c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434e:	4b04      	ldr	r3, [pc, #16]	@ (8004360 <SysTick_Config+0x40>)
 8004350:	2207      	movs	r2, #7
 8004352:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	e000e010 	.word	0xe000e010

08004364 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b082      	sub	sp, #8
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff ff2d 	bl	80041cc <__NVIC_SetPriorityGrouping>
}
 8004372:	bf00      	nop
 8004374:	3708      	adds	r7, #8
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800437a:	b580      	push	{r7, lr}
 800437c:	b086      	sub	sp, #24
 800437e:	af00      	add	r7, sp, #0
 8004380:	4603      	mov	r3, r0
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	607a      	str	r2, [r7, #4]
 8004386:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800438c:	f7ff ff42 	bl	8004214 <__NVIC_GetPriorityGrouping>
 8004390:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	68b9      	ldr	r1, [r7, #8]
 8004396:	6978      	ldr	r0, [r7, #20]
 8004398:	f7ff ff90 	bl	80042bc <NVIC_EncodePriority>
 800439c:	4602      	mov	r2, r0
 800439e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f7ff ff5f 	bl	8004268 <__NVIC_SetPriority>
}
 80043aa:	bf00      	nop
 80043ac:	3718      	adds	r7, #24
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bd80      	pop	{r7, pc}

080043b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043b2:	b580      	push	{r7, lr}
 80043b4:	b082      	sub	sp, #8
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	4603      	mov	r3, r0
 80043ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7ff ff35 	bl	8004230 <__NVIC_EnableIRQ>
}
 80043c6:	bf00      	nop
 80043c8:	3708      	adds	r7, #8
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}

080043ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7ff ffa2 	bl	8004320 <SysTick_Config>
 80043dc:	4603      	mov	r3, r0
}
 80043de:	4618      	mov	r0, r3
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043e6:	b480      	push	{r7}
 80043e8:	b085      	sub	sp, #20
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d008      	beq.n	8004410 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2204      	movs	r2, #4
 8004402:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e020      	b.n	8004452 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f022 020e 	bic.w	r2, r2, #14
 800441e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004438:	2101      	movs	r1, #1
 800443a:	fa01 f202 	lsl.w	r2, r1, r2
 800443e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2201      	movs	r2, #1
 8004444:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8004450:	7bfb      	ldrb	r3, [r7, #15]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	bc80      	pop	{r7}
 800445a:	4770      	bx	lr

0800445c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004464:	2300      	movs	r3, #0
 8004466:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d005      	beq.n	8004480 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2204      	movs	r2, #4
 8004478:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	73fb      	strb	r3, [r7, #15]
 800447e:	e051      	b.n	8004524 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 020e 	bic.w	r2, r2, #14
 800448e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a22      	ldr	r2, [pc, #136]	@ (8004530 <HAL_DMA_Abort_IT+0xd4>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d029      	beq.n	80044fe <HAL_DMA_Abort_IT+0xa2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a21      	ldr	r2, [pc, #132]	@ (8004534 <HAL_DMA_Abort_IT+0xd8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d022      	beq.n	80044fa <HAL_DMA_Abort_IT+0x9e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004538 <HAL_DMA_Abort_IT+0xdc>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d01a      	beq.n	80044f4 <HAL_DMA_Abort_IT+0x98>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1e      	ldr	r2, [pc, #120]	@ (800453c <HAL_DMA_Abort_IT+0xe0>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d012      	beq.n	80044ee <HAL_DMA_Abort_IT+0x92>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004540 <HAL_DMA_Abort_IT+0xe4>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d00a      	beq.n	80044e8 <HAL_DMA_Abort_IT+0x8c>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004544 <HAL_DMA_Abort_IT+0xe8>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d102      	bne.n	80044e2 <HAL_DMA_Abort_IT+0x86>
 80044dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80044e0:	e00e      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80044e6:	e00b      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044ec:	e008      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044f2:	e005      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044f8:	e002      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044fa:	2310      	movs	r3, #16
 80044fc:	e000      	b.n	8004500 <HAL_DMA_Abort_IT+0xa4>
 80044fe:	2301      	movs	r3, #1
 8004500:	4a11      	ldr	r2, [pc, #68]	@ (8004548 <HAL_DMA_Abort_IT+0xec>)
 8004502:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004518:	2b00      	cmp	r3, #0
 800451a:	d003      	beq.n	8004524 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
    } 
  }
  return status;
 8004524:	7bfb      	ldrb	r3, [r7, #15]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40020008 	.word	0x40020008
 8004534:	4002001c 	.word	0x4002001c
 8004538:	40020030 	.word	0x40020030
 800453c:	40020044 	.word	0x40020044
 8004540:	40020058 	.word	0x40020058
 8004544:	4002006c 	.word	0x4002006c
 8004548:	40020000 	.word	0x40020000

0800454c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800454c:	b480      	push	{r7}
 800454e:	b08b      	sub	sp, #44	@ 0x2c
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004556:	2300      	movs	r3, #0
 8004558:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455e:	e169      	b.n	8004834 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004560:	2201      	movs	r2, #1
 8004562:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004564:	fa02 f303 	lsl.w	r3, r2, r3
 8004568:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69fa      	ldr	r2, [r7, #28]
 8004570:	4013      	ands	r3, r2
 8004572:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	f040 8158 	bne.w	800482e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	4a9a      	ldr	r2, [pc, #616]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d05e      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004588:	4a98      	ldr	r2, [pc, #608]	@ (80047ec <HAL_GPIO_Init+0x2a0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d875      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800458e:	4a98      	ldr	r2, [pc, #608]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d058      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 8004594:	4a96      	ldr	r2, [pc, #600]	@ (80047f0 <HAL_GPIO_Init+0x2a4>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d86f      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 800459a:	4a96      	ldr	r2, [pc, #600]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d052      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045a0:	4a94      	ldr	r2, [pc, #592]	@ (80047f4 <HAL_GPIO_Init+0x2a8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d869      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045a6:	4a94      	ldr	r2, [pc, #592]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045a8:	4293      	cmp	r3, r2
 80045aa:	d04c      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045ac:	4a92      	ldr	r2, [pc, #584]	@ (80047f8 <HAL_GPIO_Init+0x2ac>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d863      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045b2:	4a92      	ldr	r2, [pc, #584]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d046      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
 80045b8:	4a90      	ldr	r2, [pc, #576]	@ (80047fc <HAL_GPIO_Init+0x2b0>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d85d      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045be:	2b12      	cmp	r3, #18
 80045c0:	d82a      	bhi.n	8004618 <HAL_GPIO_Init+0xcc>
 80045c2:	2b12      	cmp	r3, #18
 80045c4:	d859      	bhi.n	800467a <HAL_GPIO_Init+0x12e>
 80045c6:	a201      	add	r2, pc, #4	@ (adr r2, 80045cc <HAL_GPIO_Init+0x80>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004647 	.word	0x08004647
 80045d0:	08004621 	.word	0x08004621
 80045d4:	08004633 	.word	0x08004633
 80045d8:	08004675 	.word	0x08004675
 80045dc:	0800467b 	.word	0x0800467b
 80045e0:	0800467b 	.word	0x0800467b
 80045e4:	0800467b 	.word	0x0800467b
 80045e8:	0800467b 	.word	0x0800467b
 80045ec:	0800467b 	.word	0x0800467b
 80045f0:	0800467b 	.word	0x0800467b
 80045f4:	0800467b 	.word	0x0800467b
 80045f8:	0800467b 	.word	0x0800467b
 80045fc:	0800467b 	.word	0x0800467b
 8004600:	0800467b 	.word	0x0800467b
 8004604:	0800467b 	.word	0x0800467b
 8004608:	0800467b 	.word	0x0800467b
 800460c:	0800467b 	.word	0x0800467b
 8004610:	08004629 	.word	0x08004629
 8004614:	0800463d 	.word	0x0800463d
 8004618:	4a79      	ldr	r2, [pc, #484]	@ (8004800 <HAL_GPIO_Init+0x2b4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d013      	beq.n	8004646 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800461e:	e02c      	b.n	800467a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	623b      	str	r3, [r7, #32]
          break;
 8004626:	e029      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	68db      	ldr	r3, [r3, #12]
 800462c:	3304      	adds	r3, #4
 800462e:	623b      	str	r3, [r7, #32]
          break;
 8004630:	e024      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	3308      	adds	r3, #8
 8004638:	623b      	str	r3, [r7, #32]
          break;
 800463a:	e01f      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	330c      	adds	r3, #12
 8004642:	623b      	str	r3, [r7, #32]
          break;
 8004644:	e01a      	b.n	800467c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d102      	bne.n	8004654 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800464e:	2304      	movs	r3, #4
 8004650:	623b      	str	r3, [r7, #32]
          break;
 8004652:	e013      	b.n	800467c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d105      	bne.n	8004668 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800465c:	2308      	movs	r3, #8
 800465e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69fa      	ldr	r2, [r7, #28]
 8004664:	611a      	str	r2, [r3, #16]
          break;
 8004666:	e009      	b.n	800467c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004668:	2308      	movs	r3, #8
 800466a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69fa      	ldr	r2, [r7, #28]
 8004670:	615a      	str	r2, [r3, #20]
          break;
 8004672:	e003      	b.n	800467c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004674:	2300      	movs	r3, #0
 8004676:	623b      	str	r3, [r7, #32]
          break;
 8004678:	e000      	b.n	800467c <HAL_GPIO_Init+0x130>
          break;
 800467a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	2bff      	cmp	r3, #255	@ 0xff
 8004680:	d801      	bhi.n	8004686 <HAL_GPIO_Init+0x13a>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	e001      	b.n	800468a <HAL_GPIO_Init+0x13e>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	3304      	adds	r3, #4
 800468a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2bff      	cmp	r3, #255	@ 0xff
 8004690:	d802      	bhi.n	8004698 <HAL_GPIO_Init+0x14c>
 8004692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	e002      	b.n	800469e <HAL_GPIO_Init+0x152>
 8004698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469a:	3b08      	subs	r3, #8
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	210f      	movs	r1, #15
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	fa01 f303 	lsl.w	r3, r1, r3
 80046ac:	43db      	mvns	r3, r3
 80046ae:	401a      	ands	r2, r3
 80046b0:	6a39      	ldr	r1, [r7, #32]
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	fa01 f303 	lsl.w	r3, r1, r3
 80046b8:	431a      	orrs	r2, r3
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 80b1 	beq.w	800482e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80046cc:	4b4d      	ldr	r3, [pc, #308]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046d2:	f043 0301 	orr.w	r3, r3, #1
 80046d6:	6193      	str	r3, [r2, #24]
 80046d8:	4b4a      	ldr	r3, [pc, #296]	@ (8004804 <HAL_GPIO_Init+0x2b8>)
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80046e4:	4a48      	ldr	r2, [pc, #288]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 80046e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	3302      	adds	r3, #2
 80046ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046f0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80046f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046f4:	f003 0303 	and.w	r3, r3, #3
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	220f      	movs	r2, #15
 80046fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004700:	43db      	mvns	r3, r3
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	4013      	ands	r3, r2
 8004706:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4a40      	ldr	r2, [pc, #256]	@ (800480c <HAL_GPIO_Init+0x2c0>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d013      	beq.n	8004738 <HAL_GPIO_Init+0x1ec>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	4a3f      	ldr	r2, [pc, #252]	@ (8004810 <HAL_GPIO_Init+0x2c4>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d00d      	beq.n	8004734 <HAL_GPIO_Init+0x1e8>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	4a3e      	ldr	r2, [pc, #248]	@ (8004814 <HAL_GPIO_Init+0x2c8>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d007      	beq.n	8004730 <HAL_GPIO_Init+0x1e4>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a3d      	ldr	r2, [pc, #244]	@ (8004818 <HAL_GPIO_Init+0x2cc>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d101      	bne.n	800472c <HAL_GPIO_Init+0x1e0>
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 800472c:	2304      	movs	r3, #4
 800472e:	e004      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004730:	2302      	movs	r3, #2
 8004732:	e002      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <HAL_GPIO_Init+0x1ee>
 8004738:	2300      	movs	r3, #0
 800473a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800473c:	f002 0203 	and.w	r2, r2, #3
 8004740:	0092      	lsls	r2, r2, #2
 8004742:	4093      	lsls	r3, r2
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800474a:	492f      	ldr	r1, [pc, #188]	@ (8004808 <HAL_GPIO_Init+0x2bc>)
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d006      	beq.n	8004772 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004764:	4b2d      	ldr	r3, [pc, #180]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	492c      	ldr	r1, [pc, #176]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	4313      	orrs	r3, r2
 800476e:	608b      	str	r3, [r1, #8]
 8004770:	e006      	b.n	8004780 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004772:	4b2a      	ldr	r3, [pc, #168]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	43db      	mvns	r3, r3
 800477a:	4928      	ldr	r1, [pc, #160]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800477c:	4013      	ands	r3, r2
 800477e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004788:	2b00      	cmp	r3, #0
 800478a:	d006      	beq.n	800479a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800478c:	4b23      	ldr	r3, [pc, #140]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	4922      	ldr	r1, [pc, #136]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	60cb      	str	r3, [r1, #12]
 8004798:	e006      	b.n	80047a8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800479a:	4b20      	ldr	r3, [pc, #128]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69bb      	ldr	r3, [r7, #24]
 80047a0:	43db      	mvns	r3, r3
 80047a2:	491e      	ldr	r1, [pc, #120]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d006      	beq.n	80047c2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80047b4:	4b19      	ldr	r3, [pc, #100]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	4918      	ldr	r1, [pc, #96]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4313      	orrs	r3, r2
 80047be:	604b      	str	r3, [r1, #4]
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80047c2:	4b16      	ldr	r3, [pc, #88]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	43db      	mvns	r3, r3
 80047ca:	4914      	ldr	r1, [pc, #80]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d021      	beq.n	8004820 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80047dc:	4b0f      	ldr	r3, [pc, #60]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	490e      	ldr	r1, [pc, #56]	@ (800481c <HAL_GPIO_Init+0x2d0>)
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]
 80047e8:	e021      	b.n	800482e <HAL_GPIO_Init+0x2e2>
 80047ea:	bf00      	nop
 80047ec:	10320000 	.word	0x10320000
 80047f0:	10310000 	.word	0x10310000
 80047f4:	10220000 	.word	0x10220000
 80047f8:	10210000 	.word	0x10210000
 80047fc:	10120000 	.word	0x10120000
 8004800:	10110000 	.word	0x10110000
 8004804:	40021000 	.word	0x40021000
 8004808:	40010000 	.word	0x40010000
 800480c:	40010800 	.word	0x40010800
 8004810:	40010c00 	.word	0x40010c00
 8004814:	40011000 	.word	0x40011000
 8004818:	40011400 	.word	0x40011400
 800481c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004820:	4b0b      	ldr	r3, [pc, #44]	@ (8004850 <HAL_GPIO_Init+0x304>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	43db      	mvns	r3, r3
 8004828:	4909      	ldr	r1, [pc, #36]	@ (8004850 <HAL_GPIO_Init+0x304>)
 800482a:	4013      	ands	r3, r2
 800482c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800482e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004830:	3301      	adds	r3, #1
 8004832:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800483a:	fa22 f303 	lsr.w	r3, r2, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	f47f ae8e 	bne.w	8004560 <HAL_GPIO_Init+0x14>
  }
}
 8004844:	bf00      	nop
 8004846:	bf00      	nop
 8004848:	372c      	adds	r7, #44	@ 0x2c
 800484a:	46bd      	mov	sp, r7
 800484c:	bc80      	pop	{r7}
 800484e:	4770      	bx	lr
 8004850:	40010400 	.word	0x40010400

08004854 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	460b      	mov	r3, r1
 800485e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689a      	ldr	r2, [r3, #8]
 8004864:	887b      	ldrh	r3, [r7, #2]
 8004866:	4013      	ands	r3, r2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d002      	beq.n	8004872 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800486c:	2301      	movs	r3, #1
 800486e:	73fb      	strb	r3, [r7, #15]
 8004870:	e001      	b.n	8004876 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004872:	2300      	movs	r3, #0
 8004874:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004876:	7bfb      	ldrb	r3, [r7, #15]
}
 8004878:	4618      	mov	r0, r3
 800487a:	3714      	adds	r7, #20
 800487c:	46bd      	mov	sp, r7
 800487e:	bc80      	pop	{r7}
 8004880:	4770      	bx	lr

08004882 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004882:	b480      	push	{r7}
 8004884:	b083      	sub	sp, #12
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
 800488e:	4613      	mov	r3, r2
 8004890:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004892:	787b      	ldrb	r3, [r7, #1]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004898:	887a      	ldrh	r2, [r7, #2]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800489e:	e003      	b.n	80048a8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80048a0:	887b      	ldrh	r3, [r7, #2]
 80048a2:	041a      	lsls	r2, r3, #16
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	611a      	str	r2, [r3, #16]
}
 80048a8:	bf00      	nop
 80048aa:	370c      	adds	r7, #12
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bc80      	pop	{r7}
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d101      	bne.n	80048c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	e12b      	b.n	8004b1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d106      	bne.n	80048e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f7fe fd36 	bl	800334c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2224      	movs	r2, #36	@ 0x24
 80048e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004906:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681a      	ldr	r2, [r3, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004916:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004918:	f001 f842 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 800491c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	4a81      	ldr	r2, [pc, #516]	@ (8004b28 <HAL_I2C_Init+0x274>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d807      	bhi.n	8004938 <HAL_I2C_Init+0x84>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	4a80      	ldr	r2, [pc, #512]	@ (8004b2c <HAL_I2C_Init+0x278>)
 800492c:	4293      	cmp	r3, r2
 800492e:	bf94      	ite	ls
 8004930:	2301      	movls	r3, #1
 8004932:	2300      	movhi	r3, #0
 8004934:	b2db      	uxtb	r3, r3
 8004936:	e006      	b.n	8004946 <HAL_I2C_Init+0x92>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4a7d      	ldr	r2, [pc, #500]	@ (8004b30 <HAL_I2C_Init+0x27c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	bf94      	ite	ls
 8004940:	2301      	movls	r3, #1
 8004942:	2300      	movhi	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e0e7      	b.n	8004b1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a78      	ldr	r2, [pc, #480]	@ (8004b34 <HAL_I2C_Init+0x280>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0c9b      	lsrs	r3, r3, #18
 8004958:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68ba      	ldr	r2, [r7, #8]
 800496a:	430a      	orrs	r2, r1
 800496c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a6a      	ldr	r2, [pc, #424]	@ (8004b28 <HAL_I2C_Init+0x274>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d802      	bhi.n	8004988 <HAL_I2C_Init+0xd4>
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	3301      	adds	r3, #1
 8004986:	e009      	b.n	800499c <HAL_I2C_Init+0xe8>
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800498e:	fb02 f303 	mul.w	r3, r2, r3
 8004992:	4a69      	ldr	r2, [pc, #420]	@ (8004b38 <HAL_I2C_Init+0x284>)
 8004994:	fba2 2303 	umull	r2, r3, r2, r3
 8004998:	099b      	lsrs	r3, r3, #6
 800499a:	3301      	adds	r3, #1
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6812      	ldr	r2, [r2, #0]
 80049a0:	430b      	orrs	r3, r1
 80049a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69db      	ldr	r3, [r3, #28]
 80049aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80049ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	495c      	ldr	r1, [pc, #368]	@ (8004b28 <HAL_I2C_Init+0x274>)
 80049b8:	428b      	cmp	r3, r1
 80049ba:	d819      	bhi.n	80049f0 <HAL_I2C_Init+0x13c>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	1e59      	subs	r1, r3, #1
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	005b      	lsls	r3, r3, #1
 80049c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80049ca:	1c59      	adds	r1, r3, #1
 80049cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80049d0:	400b      	ands	r3, r1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_I2C_Init+0x138>
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1e59      	subs	r1, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	005b      	lsls	r3, r3, #1
 80049e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	e051      	b.n	8004a90 <HAL_I2C_Init+0x1dc>
 80049ec:	2304      	movs	r3, #4
 80049ee:	e04f      	b.n	8004a90 <HAL_I2C_Init+0x1dc>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d111      	bne.n	8004a1c <HAL_I2C_Init+0x168>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1e58      	subs	r0, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6859      	ldr	r1, [r3, #4]
 8004a00:	460b      	mov	r3, r1
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	440b      	add	r3, r1
 8004a06:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bf0c      	ite	eq
 8004a14:	2301      	moveq	r3, #1
 8004a16:	2300      	movne	r3, #0
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	e012      	b.n	8004a42 <HAL_I2C_Init+0x18e>
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	1e58      	subs	r0, r3, #1
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6859      	ldr	r1, [r3, #4]
 8004a24:	460b      	mov	r3, r1
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	0099      	lsls	r1, r3, #2
 8004a2c:	440b      	add	r3, r1
 8004a2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a32:	3301      	adds	r3, #1
 8004a34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2301      	moveq	r3, #1
 8004a3e:	2300      	movne	r3, #0
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_I2C_Init+0x196>
 8004a46:	2301      	movs	r3, #1
 8004a48:	e022      	b.n	8004a90 <HAL_I2C_Init+0x1dc>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d10e      	bne.n	8004a70 <HAL_I2C_Init+0x1bc>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	1e58      	subs	r0, r3, #1
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6859      	ldr	r1, [r3, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	440b      	add	r3, r1
 8004a60:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a64:	3301      	adds	r3, #1
 8004a66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004a6e:	e00f      	b.n	8004a90 <HAL_I2C_Init+0x1dc>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1e58      	subs	r0, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6859      	ldr	r1, [r3, #4]
 8004a78:	460b      	mov	r3, r1
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	440b      	add	r3, r1
 8004a7e:	0099      	lsls	r1, r3, #2
 8004a80:	440b      	add	r3, r1
 8004a82:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a86:	3301      	adds	r3, #1
 8004a88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a8c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a90:	6879      	ldr	r1, [r7, #4]
 8004a92:	6809      	ldr	r1, [r1, #0]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69da      	ldr	r2, [r3, #28]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a1b      	ldr	r3, [r3, #32]
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	430a      	orrs	r2, r1
 8004ab2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004abe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	6911      	ldr	r1, [r2, #16]
 8004ac6:	687a      	ldr	r2, [r7, #4]
 8004ac8:	68d2      	ldr	r2, [r2, #12]
 8004aca:	4311      	orrs	r1, r2
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	6812      	ldr	r2, [r2, #0]
 8004ad0:	430b      	orrs	r3, r1
 8004ad2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681a      	ldr	r2, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	000186a0 	.word	0x000186a0
 8004b2c:	001e847f 	.word	0x001e847f
 8004b30:	003d08ff 	.word	0x003d08ff
 8004b34:	431bde83 	.word	0x431bde83
 8004b38:	10624dd3 	.word	0x10624dd3

08004b3c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b088      	sub	sp, #32
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	4608      	mov	r0, r1
 8004b46:	4611      	mov	r1, r2
 8004b48:	461a      	mov	r2, r3
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	817b      	strh	r3, [r7, #10]
 8004b4e:	460b      	mov	r3, r1
 8004b50:	813b      	strh	r3, [r7, #8]
 8004b52:	4613      	mov	r3, r2
 8004b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b56:	f7fe fe05 	bl	8003764 <HAL_GetTick>
 8004b5a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b62:	b2db      	uxtb	r3, r3
 8004b64:	2b20      	cmp	r3, #32
 8004b66:	f040 80d9 	bne.w	8004d1c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	2319      	movs	r3, #25
 8004b70:	2201      	movs	r2, #1
 8004b72:	496d      	ldr	r1, [pc, #436]	@ (8004d28 <HAL_I2C_Mem_Write+0x1ec>)
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f971 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b80:	2302      	movs	r3, #2
 8004b82:	e0cc      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Mem_Write+0x56>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0c5      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d007      	beq.n	8004bb8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f042 0201 	orr.w	r2, r2, #1
 8004bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2221      	movs	r2, #33	@ 0x21
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2240      	movs	r2, #64	@ 0x40
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6a3a      	ldr	r2, [r7, #32]
 8004be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bee:	b29a      	uxth	r2, r3
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a4d      	ldr	r2, [pc, #308]	@ (8004d2c <HAL_I2C_Mem_Write+0x1f0>)
 8004bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004bfa:	88f8      	ldrh	r0, [r7, #6]
 8004bfc:	893a      	ldrh	r2, [r7, #8]
 8004bfe:	8979      	ldrh	r1, [r7, #10]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	9301      	str	r3, [sp, #4]
 8004c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c06:	9300      	str	r3, [sp, #0]
 8004c08:	4603      	mov	r3, r0
 8004c0a:	68f8      	ldr	r0, [r7, #12]
 8004c0c:	f000 f890 	bl	8004d30 <I2C_RequestMemoryWrite>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d052      	beq.n	8004cbc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e081      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f000 fa36 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00d      	beq.n	8004c46 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2e:	2b04      	cmp	r3, #4
 8004c30:	d107      	bne.n	8004c42 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e06b      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c56:	1c5a      	adds	r2, r3, #1
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29a      	uxth	r2, r3
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695b      	ldr	r3, [r3, #20]
 8004c7c:	f003 0304 	and.w	r3, r3, #4
 8004c80:	2b04      	cmp	r3, #4
 8004c82:	d11b      	bne.n	8004cbc <HAL_I2C_Mem_Write+0x180>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c90:	781a      	ldrb	r2, [r3, #0]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1aa      	bne.n	8004c1a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004cc4:	697a      	ldr	r2, [r7, #20]
 8004cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 fa29 	bl	8005120 <I2C_WaitOnBTFFlagUntilTimeout>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00d      	beq.n	8004cf0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d107      	bne.n	8004cec <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cea:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e016      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	e000      	b.n	8004d1e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004d1c:	2302      	movs	r3, #2
  }
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	3718      	adds	r7, #24
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bd80      	pop	{r7, pc}
 8004d26:	bf00      	nop
 8004d28:	00100002 	.word	0x00100002
 8004d2c:	ffff0000 	.word	0xffff0000

08004d30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af02      	add	r7, sp, #8
 8004d36:	60f8      	str	r0, [r7, #12]
 8004d38:	4608      	mov	r0, r1
 8004d3a:	4611      	mov	r1, r2
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	4603      	mov	r3, r0
 8004d40:	817b      	strh	r3, [r7, #10]
 8004d42:	460b      	mov	r3, r1
 8004d44:	813b      	strh	r3, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	6a3b      	ldr	r3, [r7, #32]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d66:	68f8      	ldr	r0, [r7, #12]
 8004d68:	f000 f878 	bl	8004e5c <I2C_WaitOnFlagUntilTimeout>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d00d      	beq.n	8004d8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d80:	d103      	bne.n	8004d8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e05f      	b.n	8004e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004d8e:	897b      	ldrh	r3, [r7, #10]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	461a      	mov	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004d9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da0:	6a3a      	ldr	r2, [r7, #32]
 8004da2:	492d      	ldr	r1, [pc, #180]	@ (8004e58 <I2C_RequestMemoryWrite+0x128>)
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f8d3 	bl	8004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d001      	beq.n	8004db4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e04c      	b.n	8004e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004db4:	2300      	movs	r3, #0
 8004db6:	617b      	str	r3, [r7, #20]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695b      	ldr	r3, [r3, #20]
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699b      	ldr	r3, [r3, #24]
 8004dc6:	617b      	str	r3, [r7, #20]
 8004dc8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dcc:	6a39      	ldr	r1, [r7, #32]
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f000 f95e 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00d      	beq.n	8004df6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dde:	2b04      	cmp	r3, #4
 8004de0:	d107      	bne.n	8004df2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004df0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e02b      	b.n	8004e4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004df6:	88fb      	ldrh	r3, [r7, #6]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004dfc:	893b      	ldrh	r3, [r7, #8]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	611a      	str	r2, [r3, #16]
 8004e06:	e021      	b.n	8004e4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004e08:	893b      	ldrh	r3, [r7, #8]
 8004e0a:	0a1b      	lsrs	r3, r3, #8
 8004e0c:	b29b      	uxth	r3, r3
 8004e0e:	b2da      	uxtb	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e18:	6a39      	ldr	r1, [r7, #32]
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f000 f938 	bl	8005090 <I2C_WaitOnTXEFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2a:	2b04      	cmp	r3, #4
 8004e2c:	d107      	bne.n	8004e3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e005      	b.n	8004e4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004e42:	893b      	ldrh	r3, [r7, #8]
 8004e44:	b2da      	uxtb	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3718      	adds	r7, #24
 8004e52:	46bd      	mov	sp, r7
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	00010002 	.word	0x00010002

08004e5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b084      	sub	sp, #16
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e6c:	e048      	b.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e74:	d044      	beq.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e76:	f7fe fc75 	bl	8003764 <HAL_GetTick>
 8004e7a:	4602      	mov	r2, r0
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d302      	bcc.n	8004e8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d139      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	0c1b      	lsrs	r3, r3, #16
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2b01      	cmp	r3, #1
 8004e94:	d10d      	bne.n	8004eb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	43da      	mvns	r2, r3
 8004e9e:	68bb      	ldr	r3, [r7, #8]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	bf0c      	ite	eq
 8004ea8:	2301      	moveq	r3, #1
 8004eaa:	2300      	movne	r3, #0
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	461a      	mov	r2, r3
 8004eb0:	e00c      	b.n	8004ecc <I2C_WaitOnFlagUntilTimeout+0x70>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	699b      	ldr	r3, [r3, #24]
 8004eb8:	43da      	mvns	r2, r3
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	b29b      	uxth	r3, r3
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	bf0c      	ite	eq
 8004ec4:	2301      	moveq	r3, #1
 8004ec6:	2300      	movne	r3, #0
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	461a      	mov	r2, r3
 8004ecc:	79fb      	ldrb	r3, [r7, #7]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d116      	bne.n	8004f00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	f043 0220 	orr.w	r2, r3, #32
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e023      	b.n	8004f48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	0c1b      	lsrs	r3, r3, #16
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b01      	cmp	r3, #1
 8004f08:	d10d      	bne.n	8004f26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	43da      	mvns	r2, r3
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	4013      	ands	r3, r2
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	bf0c      	ite	eq
 8004f1c:	2301      	moveq	r3, #1
 8004f1e:	2300      	movne	r3, #0
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	461a      	mov	r2, r3
 8004f24:	e00c      	b.n	8004f40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	43da      	mvns	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	4013      	ands	r3, r2
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	bf0c      	ite	eq
 8004f38:	2301      	moveq	r3, #1
 8004f3a:	2300      	movne	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	461a      	mov	r2, r3
 8004f40:	79fb      	ldrb	r3, [r7, #7]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d093      	beq.n	8004e6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f46:	2300      	movs	r3, #0
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f5e:	e071      	b.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	695b      	ldr	r3, [r3, #20]
 8004f66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f6e:	d123      	bne.n	8004fb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fa4:	f043 0204 	orr.w	r2, r3, #4
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e067      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d041      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fc0:	f7fe fbd0 	bl	8003764 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d302      	bcc.n	8004fd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d136      	bne.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	0c1b      	lsrs	r3, r3, #16
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d10c      	bne.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	43da      	mvns	r2, r3
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	4013      	ands	r3, r2
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	bf14      	ite	ne
 8004ff2:	2301      	movne	r3, #1
 8004ff4:	2300      	moveq	r3, #0
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	e00b      	b.n	8005012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	43da      	mvns	r2, r3
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	b29b      	uxth	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	bf14      	ite	ne
 800500c:	2301      	movne	r3, #1
 800500e:	2300      	moveq	r3, #0
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d016      	beq.n	8005044 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005030:	f043 0220 	orr.w	r2, r3, #32
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e021      	b.n	8005088 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005044:	68bb      	ldr	r3, [r7, #8]
 8005046:	0c1b      	lsrs	r3, r3, #16
 8005048:	b2db      	uxtb	r3, r3
 800504a:	2b01      	cmp	r3, #1
 800504c:	d10c      	bne.n	8005068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	695b      	ldr	r3, [r3, #20]
 8005054:	43da      	mvns	r2, r3
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	4013      	ands	r3, r2
 800505a:	b29b      	uxth	r3, r3
 800505c:	2b00      	cmp	r3, #0
 800505e:	bf14      	ite	ne
 8005060:	2301      	movne	r3, #1
 8005062:	2300      	moveq	r3, #0
 8005064:	b2db      	uxtb	r3, r3
 8005066:	e00b      	b.n	8005080 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	699b      	ldr	r3, [r3, #24]
 800506e:	43da      	mvns	r2, r3
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4013      	ands	r3, r2
 8005074:	b29b      	uxth	r3, r3
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b00      	cmp	r3, #0
 8005082:	f47f af6d 	bne.w	8004f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005086:	2300      	movs	r3, #0
}
 8005088:	4618      	mov	r0, r3
 800508a:	3710      	adds	r7, #16
 800508c:	46bd      	mov	sp, r7
 800508e:	bd80      	pop	{r7, pc}

08005090 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800509c:	e034      	b.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800509e:	68f8      	ldr	r0, [r7, #12]
 80050a0:	f000 f886 	bl	80051b0 <I2C_IsAcknowledgeFailed>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e034      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b4:	d028      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050b6:	f7fe fb55 	bl	8003764 <HAL_GetTick>
 80050ba:	4602      	mov	r2, r0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d302      	bcc.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d11d      	bne.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050d6:	2b80      	cmp	r3, #128	@ 0x80
 80050d8:	d016      	beq.n	8005108 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	e007      	b.n	8005118 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005112:	2b80      	cmp	r3, #128	@ 0x80
 8005114:	d1c3      	bne.n	800509e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800512c:	e034      	b.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800512e:	68f8      	ldr	r0, [r7, #12]
 8005130:	f000 f83e 	bl	80051b0 <I2C_IsAcknowledgeFailed>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e034      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005144:	d028      	beq.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005146:	f7fe fb0d 	bl	8003764 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	429a      	cmp	r2, r3
 8005154:	d302      	bcc.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d11d      	bne.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	f003 0304 	and.w	r3, r3, #4
 8005166:	2b04      	cmp	r3, #4
 8005168:	d016      	beq.n	8005198 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	2200      	movs	r2, #0
 800516e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2220      	movs	r2, #32
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2200      	movs	r2, #0
 800517c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e007      	b.n	80051a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f003 0304 	and.w	r3, r3, #4
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d1c3      	bne.n	800512e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3710      	adds	r7, #16
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	695b      	ldr	r3, [r3, #20]
 80051be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c6:	d11b      	bne.n	8005200 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80051d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051ec:	f043 0204 	orr.w	r2, r3, #4
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80051fc:	2301      	movs	r3, #1
 80051fe:	e000      	b.n	8005202 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	370c      	adds	r7, #12
 8005206:	46bd      	mov	sp, r7
 8005208:	bc80      	pop	{r7}
 800520a:	4770      	bx	lr

0800520c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b086      	sub	sp, #24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d101      	bne.n	800521e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e272      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	f000 8087 	beq.w	800533a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800522c:	4b92      	ldr	r3, [pc, #584]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b04      	cmp	r3, #4
 8005236:	d00c      	beq.n	8005252 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8005238:	4b8f      	ldr	r3, [pc, #572]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f003 030c 	and.w	r3, r3, #12
 8005240:	2b08      	cmp	r3, #8
 8005242:	d112      	bne.n	800526a <HAL_RCC_OscConfig+0x5e>
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800524c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005250:	d10b      	bne.n	800526a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005252:	4b89      	ldr	r3, [pc, #548]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d06c      	beq.n	8005338 <HAL_RCC_OscConfig+0x12c>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d168      	bne.n	8005338 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e24c      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005272:	d106      	bne.n	8005282 <HAL_RCC_OscConfig+0x76>
 8005274:	4b80      	ldr	r3, [pc, #512]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a7f      	ldr	r2, [pc, #508]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800527a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	e02e      	b.n	80052e0 <HAL_RCC_OscConfig+0xd4>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10c      	bne.n	80052a4 <HAL_RCC_OscConfig+0x98>
 800528a:	4b7b      	ldr	r3, [pc, #492]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a7a      	ldr	r2, [pc, #488]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005290:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	4b78      	ldr	r3, [pc, #480]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a77      	ldr	r2, [pc, #476]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800529c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	e01d      	b.n	80052e0 <HAL_RCC_OscConfig+0xd4>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCC_OscConfig+0xbc>
 80052ae:	4b72      	ldr	r3, [pc, #456]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a71      	ldr	r2, [pc, #452]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b8:	6013      	str	r3, [r2, #0]
 80052ba:	4b6f      	ldr	r3, [pc, #444]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a6e      	ldr	r2, [pc, #440]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c4:	6013      	str	r3, [r2, #0]
 80052c6:	e00b      	b.n	80052e0 <HAL_RCC_OscConfig+0xd4>
 80052c8:	4b6b      	ldr	r3, [pc, #428]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a6a      	ldr	r2, [pc, #424]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052d2:	6013      	str	r3, [r2, #0]
 80052d4:	4b68      	ldr	r3, [pc, #416]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a67      	ldr	r2, [pc, #412]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80052da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e8:	f7fe fa3c 	bl	8003764 <HAL_GetTick>
 80052ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ee:	e008      	b.n	8005302 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052f0:	f7fe fa38 	bl	8003764 <HAL_GetTick>
 80052f4:	4602      	mov	r2, r0
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	1ad3      	subs	r3, r2, r3
 80052fa:	2b64      	cmp	r3, #100	@ 0x64
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e200      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005302:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d0f0      	beq.n	80052f0 <HAL_RCC_OscConfig+0xe4>
 800530e:	e014      	b.n	800533a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005310:	f7fe fa28 	bl	8003764 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005316:	e008      	b.n	800532a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005318:	f7fe fa24 	bl	8003764 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	2b64      	cmp	r3, #100	@ 0x64
 8005324:	d901      	bls.n	800532a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005326:	2303      	movs	r3, #3
 8005328:	e1ec      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800532a:	4b53      	ldr	r3, [pc, #332]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f0      	bne.n	8005318 <HAL_RCC_OscConfig+0x10c>
 8005336:	e000      	b.n	800533a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d063      	beq.n	800540e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005346:	4b4c      	ldr	r3, [pc, #304]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 030c 	and.w	r3, r3, #12
 800534e:	2b00      	cmp	r3, #0
 8005350:	d00b      	beq.n	800536a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8005352:	4b49      	ldr	r3, [pc, #292]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	f003 030c 	and.w	r3, r3, #12
 800535a:	2b08      	cmp	r3, #8
 800535c:	d11c      	bne.n	8005398 <HAL_RCC_OscConfig+0x18c>
 800535e:	4b46      	ldr	r3, [pc, #280]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005360:	685b      	ldr	r3, [r3, #4]
 8005362:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d116      	bne.n	8005398 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800536a:	4b43      	ldr	r3, [pc, #268]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d005      	beq.n	8005382 <HAL_RCC_OscConfig+0x176>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d001      	beq.n	8005382 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e1c0      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005382:	4b3d      	ldr	r3, [pc, #244]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	695b      	ldr	r3, [r3, #20]
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	4939      	ldr	r1, [pc, #228]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005392:	4313      	orrs	r3, r2
 8005394:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005396:	e03a      	b.n	800540e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	691b      	ldr	r3, [r3, #16]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d020      	beq.n	80053e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053a0:	4b36      	ldr	r3, [pc, #216]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053a2:	2201      	movs	r2, #1
 80053a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053a6:	f7fe f9dd 	bl	8003764 <HAL_GetTick>
 80053aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053ac:	e008      	b.n	80053c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053ae:	f7fe f9d9 	bl	8003764 <HAL_GetTick>
 80053b2:	4602      	mov	r2, r0
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	1ad3      	subs	r3, r2, r3
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d901      	bls.n	80053c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	e1a1      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053c0:	4b2d      	ldr	r3, [pc, #180]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d0f0      	beq.n	80053ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053cc:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	00db      	lsls	r3, r3, #3
 80053da:	4927      	ldr	r1, [pc, #156]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 80053dc:	4313      	orrs	r3, r2
 80053de:	600b      	str	r3, [r1, #0]
 80053e0:	e015      	b.n	800540e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053e2:	4b26      	ldr	r3, [pc, #152]	@ (800547c <HAL_RCC_OscConfig+0x270>)
 80053e4:	2200      	movs	r2, #0
 80053e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e8:	f7fe f9bc 	bl	8003764 <HAL_GetTick>
 80053ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f0:	f7fe f9b8 	bl	8003764 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e180      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005402:	4b1d      	ldr	r3, [pc, #116]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1f0      	bne.n	80053f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d03a      	beq.n	8005490 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	699b      	ldr	r3, [r3, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d019      	beq.n	8005456 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005422:	4b17      	ldr	r3, [pc, #92]	@ (8005480 <HAL_RCC_OscConfig+0x274>)
 8005424:	2201      	movs	r2, #1
 8005426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005428:	f7fe f99c 	bl	8003764 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005430:	f7fe f998 	bl	8003764 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e160      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005442:	4b0d      	ldr	r3, [pc, #52]	@ (8005478 <HAL_RCC_OscConfig+0x26c>)
 8005444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005446:	f003 0302 	and.w	r3, r3, #2
 800544a:	2b00      	cmp	r3, #0
 800544c:	d0f0      	beq.n	8005430 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800544e:	2001      	movs	r0, #1
 8005450:	f000 face 	bl	80059f0 <RCC_Delay>
 8005454:	e01c      	b.n	8005490 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005456:	4b0a      	ldr	r3, [pc, #40]	@ (8005480 <HAL_RCC_OscConfig+0x274>)
 8005458:	2200      	movs	r2, #0
 800545a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800545c:	f7fe f982 	bl	8003764 <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005462:	e00f      	b.n	8005484 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005464:	f7fe f97e 	bl	8003764 <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b02      	cmp	r3, #2
 8005470:	d908      	bls.n	8005484 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e146      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
 8005476:	bf00      	nop
 8005478:	40021000 	.word	0x40021000
 800547c:	42420000 	.word	0x42420000
 8005480:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005484:	4b92      	ldr	r3, [pc, #584]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f003 0302 	and.w	r3, r3, #2
 800548c:	2b00      	cmp	r3, #0
 800548e:	d1e9      	bne.n	8005464 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80a6 	beq.w	80055ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800549e:	2300      	movs	r3, #0
 80054a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054a2:	4b8b      	ldr	r3, [pc, #556]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80054a4:	69db      	ldr	r3, [r3, #28]
 80054a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10d      	bne.n	80054ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80054ae:	4b88      	ldr	r3, [pc, #544]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80054b0:	69db      	ldr	r3, [r3, #28]
 80054b2:	4a87      	ldr	r2, [pc, #540]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80054b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80054b8:	61d3      	str	r3, [r2, #28]
 80054ba:	4b85      	ldr	r3, [pc, #532]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054c2:	60bb      	str	r3, [r7, #8]
 80054c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80054c6:	2301      	movs	r3, #1
 80054c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054ca:	4b82      	ldr	r3, [pc, #520]	@ (80056d4 <HAL_RCC_OscConfig+0x4c8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d118      	bne.n	8005508 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054d6:	4b7f      	ldr	r3, [pc, #508]	@ (80056d4 <HAL_RCC_OscConfig+0x4c8>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4a7e      	ldr	r2, [pc, #504]	@ (80056d4 <HAL_RCC_OscConfig+0x4c8>)
 80054dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80054e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054e2:	f7fe f93f 	bl	8003764 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054ea:	f7fe f93b 	bl	8003764 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b64      	cmp	r3, #100	@ 0x64
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e103      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054fc:	4b75      	ldr	r3, [pc, #468]	@ (80056d4 <HAL_RCC_OscConfig+0x4c8>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0f0      	beq.n	80054ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	2b01      	cmp	r3, #1
 800550e:	d106      	bne.n	800551e <HAL_RCC_OscConfig+0x312>
 8005510:	4b6f      	ldr	r3, [pc, #444]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005512:	6a1b      	ldr	r3, [r3, #32]
 8005514:	4a6e      	ldr	r2, [pc, #440]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005516:	f043 0301 	orr.w	r3, r3, #1
 800551a:	6213      	str	r3, [r2, #32]
 800551c:	e02d      	b.n	800557a <HAL_RCC_OscConfig+0x36e>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <HAL_RCC_OscConfig+0x334>
 8005526:	4b6a      	ldr	r3, [pc, #424]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	4a69      	ldr	r2, [pc, #420]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800552c:	f023 0301 	bic.w	r3, r3, #1
 8005530:	6213      	str	r3, [r2, #32]
 8005532:	4b67      	ldr	r3, [pc, #412]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	4a66      	ldr	r2, [pc, #408]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005538:	f023 0304 	bic.w	r3, r3, #4
 800553c:	6213      	str	r3, [r2, #32]
 800553e:	e01c      	b.n	800557a <HAL_RCC_OscConfig+0x36e>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	2b05      	cmp	r3, #5
 8005546:	d10c      	bne.n	8005562 <HAL_RCC_OscConfig+0x356>
 8005548:	4b61      	ldr	r3, [pc, #388]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800554a:	6a1b      	ldr	r3, [r3, #32]
 800554c:	4a60      	ldr	r2, [pc, #384]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800554e:	f043 0304 	orr.w	r3, r3, #4
 8005552:	6213      	str	r3, [r2, #32]
 8005554:	4b5e      	ldr	r3, [pc, #376]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	4a5d      	ldr	r2, [pc, #372]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800555a:	f043 0301 	orr.w	r3, r3, #1
 800555e:	6213      	str	r3, [r2, #32]
 8005560:	e00b      	b.n	800557a <HAL_RCC_OscConfig+0x36e>
 8005562:	4b5b      	ldr	r3, [pc, #364]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	4a5a      	ldr	r2, [pc, #360]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6213      	str	r3, [r2, #32]
 800556e:	4b58      	ldr	r3, [pc, #352]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	4a57      	ldr	r2, [pc, #348]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005574:	f023 0304 	bic.w	r3, r3, #4
 8005578:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d015      	beq.n	80055ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005582:	f7fe f8ef 	bl	8003764 <HAL_GetTick>
 8005586:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005588:	e00a      	b.n	80055a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800558a:	f7fe f8eb 	bl	8003764 <HAL_GetTick>
 800558e:	4602      	mov	r2, r0
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	1ad3      	subs	r3, r2, r3
 8005594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005598:	4293      	cmp	r3, r2
 800559a:	d901      	bls.n	80055a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800559c:	2303      	movs	r3, #3
 800559e:	e0b1      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055a0:	4b4b      	ldr	r3, [pc, #300]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80055a2:	6a1b      	ldr	r3, [r3, #32]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d0ee      	beq.n	800558a <HAL_RCC_OscConfig+0x37e>
 80055ac:	e014      	b.n	80055d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ae:	f7fe f8d9 	bl	8003764 <HAL_GetTick>
 80055b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055b4:	e00a      	b.n	80055cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055b6:	f7fe f8d5 	bl	8003764 <HAL_GetTick>
 80055ba:	4602      	mov	r2, r0
 80055bc:	693b      	ldr	r3, [r7, #16]
 80055be:	1ad3      	subs	r3, r2, r3
 80055c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e09b      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80055cc:	4b40      	ldr	r3, [pc, #256]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ee      	bne.n	80055b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80055d8:	7dfb      	ldrb	r3, [r7, #23]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d105      	bne.n	80055ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80055de:	4b3c      	ldr	r3, [pc, #240]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80055e0:	69db      	ldr	r3, [r3, #28]
 80055e2:	4a3b      	ldr	r2, [pc, #236]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80055e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80055e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 8087 	beq.w	8005702 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80055f4:	4b36      	ldr	r3, [pc, #216]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f003 030c 	and.w	r3, r3, #12
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d061      	beq.n	80056c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	69db      	ldr	r3, [r3, #28]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d146      	bne.n	8005696 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005608:	4b33      	ldr	r3, [pc, #204]	@ (80056d8 <HAL_RCC_OscConfig+0x4cc>)
 800560a:	2200      	movs	r2, #0
 800560c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560e:	f7fe f8a9 	bl	8003764 <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005616:	f7fe f8a5 	bl	8003764 <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e06d      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005628:	4b29      	ldr	r3, [pc, #164]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f0      	bne.n	8005616 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6a1b      	ldr	r3, [r3, #32]
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d108      	bne.n	8005650 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800563e:	4b24      	ldr	r3, [pc, #144]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	4921      	ldr	r1, [pc, #132]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800564c:	4313      	orrs	r3, r2
 800564e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005650:	4b1f      	ldr	r3, [pc, #124]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6a19      	ldr	r1, [r3, #32]
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	430b      	orrs	r3, r1
 8005662:	491b      	ldr	r1, [pc, #108]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 8005664:	4313      	orrs	r3, r2
 8005666:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005668:	4b1b      	ldr	r3, [pc, #108]	@ (80056d8 <HAL_RCC_OscConfig+0x4cc>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800566e:	f7fe f879 	bl	8003764 <HAL_GetTick>
 8005672:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005674:	e008      	b.n	8005688 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005676:	f7fe f875 	bl	8003764 <HAL_GetTick>
 800567a:	4602      	mov	r2, r0
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	1ad3      	subs	r3, r2, r3
 8005680:	2b02      	cmp	r3, #2
 8005682:	d901      	bls.n	8005688 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8005684:	2303      	movs	r3, #3
 8005686:	e03d      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8005688:	4b11      	ldr	r3, [pc, #68]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d0f0      	beq.n	8005676 <HAL_RCC_OscConfig+0x46a>
 8005694:	e035      	b.n	8005702 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005696:	4b10      	ldr	r3, [pc, #64]	@ (80056d8 <HAL_RCC_OscConfig+0x4cc>)
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800569c:	f7fe f862 	bl	8003764 <HAL_GetTick>
 80056a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a4:	f7fe f85e 	bl	8003764 <HAL_GetTick>
 80056a8:	4602      	mov	r2, r0
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	2b02      	cmp	r3, #2
 80056b0:	d901      	bls.n	80056b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e026      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80056b6:	4b06      	ldr	r3, [pc, #24]	@ (80056d0 <HAL_RCC_OscConfig+0x4c4>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f0      	bne.n	80056a4 <HAL_RCC_OscConfig+0x498>
 80056c2:	e01e      	b.n	8005702 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e019      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
 80056d0:	40021000 	.word	0x40021000
 80056d4:	40007000 	.word	0x40007000
 80056d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80056dc:	4b0b      	ldr	r3, [pc, #44]	@ (800570c <HAL_RCC_OscConfig+0x500>)
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	429a      	cmp	r2, r3
 80056ee:	d106      	bne.n	80056fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056fa:	429a      	cmp	r2, r3
 80056fc:	d001      	beq.n	8005702 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	40021000 	.word	0x40021000

08005710 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e0d0      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005724:	4b6a      	ldr	r3, [pc, #424]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	683a      	ldr	r2, [r7, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d910      	bls.n	8005754 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005732:	4b67      	ldr	r3, [pc, #412]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f023 0207 	bic.w	r2, r3, #7
 800573a:	4965      	ldr	r1, [pc, #404]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	4313      	orrs	r3, r2
 8005740:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005742:	4b63      	ldr	r3, [pc, #396]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f003 0307 	and.w	r3, r3, #7
 800574a:	683a      	ldr	r2, [r7, #0]
 800574c:	429a      	cmp	r2, r3
 800574e:	d001      	beq.n	8005754 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e0b8      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0302 	and.w	r3, r3, #2
 800575c:	2b00      	cmp	r3, #0
 800575e:	d020      	beq.n	80057a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d005      	beq.n	8005778 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800576c:	4b59      	ldr	r3, [pc, #356]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	4a58      	ldr	r2, [pc, #352]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005772:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005776:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f003 0308 	and.w	r3, r3, #8
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005784:	4b53      	ldr	r3, [pc, #332]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	4a52      	ldr	r2, [pc, #328]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800578a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800578e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005790:	4b50      	ldr	r3, [pc, #320]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	494d      	ldr	r1, [pc, #308]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800579e:	4313      	orrs	r3, r2
 80057a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d040      	beq.n	8005830 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d107      	bne.n	80057c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80057b6:	4b47      	ldr	r3, [pc, #284]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d115      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e07f      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2b02      	cmp	r3, #2
 80057cc:	d107      	bne.n	80057de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	4b41      	ldr	r3, [pc, #260]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d109      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e073      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057de:	4b3d      	ldr	r3, [pc, #244]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d101      	bne.n	80057ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e06b      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ee:	4b39      	ldr	r3, [pc, #228]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	f023 0203 	bic.w	r2, r3, #3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	4936      	ldr	r1, [pc, #216]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005800:	f7fd ffb0 	bl	8003764 <HAL_GetTick>
 8005804:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005806:	e00a      	b.n	800581e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005808:	f7fd ffac 	bl	8003764 <HAL_GetTick>
 800580c:	4602      	mov	r2, r0
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005816:	4293      	cmp	r3, r2
 8005818:	d901      	bls.n	800581e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e053      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800581e:	4b2d      	ldr	r3, [pc, #180]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	f003 020c 	and.w	r2, r3, #12
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	009b      	lsls	r3, r3, #2
 800582c:	429a      	cmp	r2, r3
 800582e:	d1eb      	bne.n	8005808 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005830:	4b27      	ldr	r3, [pc, #156]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f003 0307 	and.w	r3, r3, #7
 8005838:	683a      	ldr	r2, [r7, #0]
 800583a:	429a      	cmp	r2, r3
 800583c:	d210      	bcs.n	8005860 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800583e:	4b24      	ldr	r3, [pc, #144]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f023 0207 	bic.w	r2, r3, #7
 8005846:	4922      	ldr	r1, [pc, #136]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	4313      	orrs	r3, r2
 800584c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800584e:	4b20      	ldr	r3, [pc, #128]	@ (80058d0 <HAL_RCC_ClockConfig+0x1c0>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0307 	and.w	r3, r3, #7
 8005856:	683a      	ldr	r2, [r7, #0]
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e032      	b.n	80058c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d008      	beq.n	800587e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800586c:	4b19      	ldr	r3, [pc, #100]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	68db      	ldr	r3, [r3, #12]
 8005878:	4916      	ldr	r1, [pc, #88]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800587a:	4313      	orrs	r3, r2
 800587c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 0308 	and.w	r3, r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	d009      	beq.n	800589e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800588a:	4b12      	ldr	r3, [pc, #72]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	490e      	ldr	r1, [pc, #56]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 800589a:	4313      	orrs	r3, r2
 800589c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800589e:	f000 f821 	bl	80058e4 <HAL_RCC_GetSysClockFreq>
 80058a2:	4602      	mov	r2, r0
 80058a4:	4b0b      	ldr	r3, [pc, #44]	@ (80058d4 <HAL_RCC_ClockConfig+0x1c4>)
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	091b      	lsrs	r3, r3, #4
 80058aa:	f003 030f 	and.w	r3, r3, #15
 80058ae:	490a      	ldr	r1, [pc, #40]	@ (80058d8 <HAL_RCC_ClockConfig+0x1c8>)
 80058b0:	5ccb      	ldrb	r3, [r1, r3]
 80058b2:	fa22 f303 	lsr.w	r3, r2, r3
 80058b6:	4a09      	ldr	r2, [pc, #36]	@ (80058dc <HAL_RCC_ClockConfig+0x1cc>)
 80058b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80058ba:	4b09      	ldr	r3, [pc, #36]	@ (80058e0 <HAL_RCC_ClockConfig+0x1d0>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fd ff0e 	bl	80036e0 <HAL_InitTick>

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
 80058ce:	bf00      	nop
 80058d0:	40022000 	.word	0x40022000
 80058d4:	40021000 	.word	0x40021000
 80058d8:	080095c0 	.word	0x080095c0
 80058dc:	20000000 	.word	0x20000000
 80058e0:	20000004 	.word	0x20000004

080058e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80058ea:	2300      	movs	r3, #0
 80058ec:	60fb      	str	r3, [r7, #12]
 80058ee:	2300      	movs	r3, #0
 80058f0:	60bb      	str	r3, [r7, #8]
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]
 80058f6:	2300      	movs	r3, #0
 80058f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80058fa:	2300      	movs	r3, #0
 80058fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80058fe:	4b1e      	ldr	r3, [pc, #120]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x94>)
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f003 030c 	and.w	r3, r3, #12
 800590a:	2b04      	cmp	r3, #4
 800590c:	d002      	beq.n	8005914 <HAL_RCC_GetSysClockFreq+0x30>
 800590e:	2b08      	cmp	r3, #8
 8005910:	d003      	beq.n	800591a <HAL_RCC_GetSysClockFreq+0x36>
 8005912:	e027      	b.n	8005964 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005914:	4b19      	ldr	r3, [pc, #100]	@ (800597c <HAL_RCC_GetSysClockFreq+0x98>)
 8005916:	613b      	str	r3, [r7, #16]
      break;
 8005918:	e027      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	0c9b      	lsrs	r3, r3, #18
 800591e:	f003 030f 	and.w	r3, r3, #15
 8005922:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <HAL_RCC_GetSysClockFreq+0x9c>)
 8005924:	5cd3      	ldrb	r3, [r2, r3]
 8005926:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800592e:	2b00      	cmp	r3, #0
 8005930:	d010      	beq.n	8005954 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005932:	4b11      	ldr	r3, [pc, #68]	@ (8005978 <HAL_RCC_GetSysClockFreq+0x94>)
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	0c5b      	lsrs	r3, r3, #17
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	4a11      	ldr	r2, [pc, #68]	@ (8005984 <HAL_RCC_GetSysClockFreq+0xa0>)
 800593e:	5cd3      	ldrb	r3, [r2, r3]
 8005940:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a0d      	ldr	r2, [pc, #52]	@ (800597c <HAL_RCC_GetSysClockFreq+0x98>)
 8005946:	fb03 f202 	mul.w	r2, r3, r2
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	e004      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a0c      	ldr	r2, [pc, #48]	@ (8005988 <HAL_RCC_GetSysClockFreq+0xa4>)
 8005958:	fb02 f303 	mul.w	r3, r2, r3
 800595c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	613b      	str	r3, [r7, #16]
      break;
 8005962:	e002      	b.n	800596a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8005964:	4b05      	ldr	r3, [pc, #20]	@ (800597c <HAL_RCC_GetSysClockFreq+0x98>)
 8005966:	613b      	str	r3, [r7, #16]
      break;
 8005968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800596a:	693b      	ldr	r3, [r7, #16]
}
 800596c:	4618      	mov	r0, r3
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr
 8005976:	bf00      	nop
 8005978:	40021000 	.word	0x40021000
 800597c:	007a1200 	.word	0x007a1200
 8005980:	080095d8 	.word	0x080095d8
 8005984:	080095e8 	.word	0x080095e8
 8005988:	003d0900 	.word	0x003d0900

0800598c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800598c:	b480      	push	{r7}
 800598e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005990:	4b02      	ldr	r3, [pc, #8]	@ (800599c <HAL_RCC_GetHCLKFreq+0x10>)
 8005992:	681b      	ldr	r3, [r3, #0]
}
 8005994:	4618      	mov	r0, r3
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr
 800599c:	20000000 	.word	0x20000000

080059a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80059a4:	f7ff fff2 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059a8:	4602      	mov	r2, r0
 80059aa:	4b05      	ldr	r3, [pc, #20]	@ (80059c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	0a1b      	lsrs	r3, r3, #8
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	4903      	ldr	r1, [pc, #12]	@ (80059c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059b6:	5ccb      	ldrb	r3, [r1, r3]
 80059b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059bc:	4618      	mov	r0, r3
 80059be:	bd80      	pop	{r7, pc}
 80059c0:	40021000 	.word	0x40021000
 80059c4:	080095d0 	.word	0x080095d0

080059c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80059cc:	f7ff ffde 	bl	800598c <HAL_RCC_GetHCLKFreq>
 80059d0:	4602      	mov	r2, r0
 80059d2:	4b05      	ldr	r3, [pc, #20]	@ (80059e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	0adb      	lsrs	r3, r3, #11
 80059d8:	f003 0307 	and.w	r3, r3, #7
 80059dc:	4903      	ldr	r1, [pc, #12]	@ (80059ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80059de:	5ccb      	ldrb	r3, [r1, r3]
 80059e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	40021000 	.word	0x40021000
 80059ec:	080095d0 	.word	0x080095d0

080059f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80059f8:	4b0a      	ldr	r3, [pc, #40]	@ (8005a24 <RCC_Delay+0x34>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a0a      	ldr	r2, [pc, #40]	@ (8005a28 <RCC_Delay+0x38>)
 80059fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005a02:	0a5b      	lsrs	r3, r3, #9
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005a0c:	bf00      	nop
  }
  while (Delay --);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	1e5a      	subs	r2, r3, #1
 8005a12:	60fa      	str	r2, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d1f9      	bne.n	8005a0c <RCC_Delay+0x1c>
}
 8005a18:	bf00      	nop
 8005a1a:	bf00      	nop
 8005a1c:	3714      	adds	r7, #20
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bc80      	pop	{r7}
 8005a22:	4770      	bx	lr
 8005a24:	20000000 	.word	0x20000000
 8005a28:	10624dd3 	.word	0x10624dd3

08005a2c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b086      	sub	sp, #24
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8005a34:	2300      	movs	r3, #0
 8005a36:	613b      	str	r3, [r7, #16]
 8005a38:	2300      	movs	r3, #0
 8005a3a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0301 	and.w	r3, r3, #1
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d07d      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a4e:	69db      	ldr	r3, [r3, #28]
 8005a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10d      	bne.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a58:	4b4c      	ldr	r3, [pc, #304]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5a:	69db      	ldr	r3, [r3, #28]
 8005a5c:	4a4b      	ldr	r2, [pc, #300]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a62:	61d3      	str	r3, [r2, #28]
 8005a64:	4b49      	ldr	r3, [pc, #292]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005a66:	69db      	ldr	r3, [r3, #28]
 8005a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a6c:	60bb      	str	r3, [r7, #8]
 8005a6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a70:	2301      	movs	r3, #1
 8005a72:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a74:	4b46      	ldr	r3, [pc, #280]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d118      	bne.n	8005ab2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a80:	4b43      	ldr	r3, [pc, #268]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a42      	ldr	r2, [pc, #264]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005a86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a8a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a8c:	f7fd fe6a 	bl	8003764 <HAL_GetTick>
 8005a90:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a92:	e008      	b.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a94:	f7fd fe66 	bl	8003764 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b64      	cmp	r3, #100	@ 0x64
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e06d      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005aa6:	4b3a      	ldr	r3, [pc, #232]	@ (8005b90 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ab2:	4b36      	ldr	r3, [pc, #216]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aba:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02e      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aca:	68fa      	ldr	r2, [r7, #12]
 8005acc:	429a      	cmp	r2, r3
 8005ace:	d027      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ada:	4b2e      	ldr	r3, [pc, #184]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005adc:	2201      	movs	r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ae0:	4b2c      	ldr	r3, [pc, #176]	@ (8005b94 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8005ae6:	4a29      	ldr	r2, [pc, #164]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f003 0301 	and.w	r3, r3, #1
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d014      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af6:	f7fd fe35 	bl	8003764 <HAL_GetTick>
 8005afa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afc:	e00a      	b.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005afe:	f7fd fe31 	bl	8003764 <HAL_GetTick>
 8005b02:	4602      	mov	r2, r0
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	1ad3      	subs	r3, r2, r3
 8005b08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d901      	bls.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8005b10:	2303      	movs	r3, #3
 8005b12:	e036      	b.n	8005b82 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b14:	4b1d      	ldr	r3, [pc, #116]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b16:	6a1b      	ldr	r3, [r3, #32]
 8005b18:	f003 0302 	and.w	r3, r3, #2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d0ee      	beq.n	8005afe <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b20:	4b1a      	ldr	r3, [pc, #104]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	4917      	ldr	r1, [pc, #92]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005b32:	7dfb      	ldrb	r3, [r7, #23]
 8005b34:	2b01      	cmp	r3, #1
 8005b36:	d105      	bne.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b38:	4b14      	ldr	r3, [pc, #80]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	4a13      	ldr	r2, [pc, #76]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005b42:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0302 	and.w	r3, r3, #2
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d008      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b50:	4b0e      	ldr	r3, [pc, #56]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	490b      	ldr	r1, [pc, #44]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d008      	beq.n	8005b80 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b6e:	4b07      	ldr	r3, [pc, #28]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b70:	685b      	ldr	r3, [r3, #4]
 8005b72:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	68db      	ldr	r3, [r3, #12]
 8005b7a:	4904      	ldr	r1, [pc, #16]	@ (8005b8c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	40007000 	.word	0x40007000
 8005b94:	42420440 	.word	0x42420440

08005b98 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	617b      	str	r3, [r7, #20]
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	61fb      	str	r3, [r7, #28]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d00a      	beq.n	8005bd0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b10      	cmp	r3, #16
 8005bbe:	f200 808a 	bhi.w	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d045      	beq.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b02      	cmp	r3, #2
 8005bcc:	d075      	beq.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8005bce:	e082      	b.n	8005cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8005bd0:	4b46      	ldr	r3, [pc, #280]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8005bd6:	4b45      	ldr	r3, [pc, #276]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d07b      	beq.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	0c9b      	lsrs	r3, r3, #18
 8005be6:	f003 030f 	and.w	r3, r3, #15
 8005bea:	4a41      	ldr	r2, [pc, #260]	@ (8005cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8005bec:	5cd3      	ldrb	r3, [r2, r3]
 8005bee:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d015      	beq.n	8005c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8005bfa:	4b3c      	ldr	r3, [pc, #240]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	0c5b      	lsrs	r3, r3, #17
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	4a3b      	ldr	r2, [pc, #236]	@ (8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8005c06:	5cd3      	ldrb	r3, [r2, r3]
 8005c08:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00d      	beq.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8005c14:	4a38      	ldr	r2, [pc, #224]	@ (8005cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	fb02 f303 	mul.w	r3, r2, r3
 8005c22:	61fb      	str	r3, [r7, #28]
 8005c24:	e004      	b.n	8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	4a34      	ldr	r2, [pc, #208]	@ (8005cfc <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8005c2a:	fb02 f303 	mul.w	r3, r2, r3
 8005c2e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8005c30:	4b2e      	ldr	r3, [pc, #184]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c3c:	d102      	bne.n	8005c44 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	61bb      	str	r3, [r7, #24]
      break;
 8005c42:	e04a      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4a2d      	ldr	r2, [pc, #180]	@ (8005d00 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8005c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4e:	085b      	lsrs	r3, r3, #1
 8005c50:	61bb      	str	r3, [r7, #24]
      break;
 8005c52:	e042      	b.n	8005cda <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8005c54:	4b25      	ldr	r3, [pc, #148]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c56:	6a1b      	ldr	r3, [r3, #32]
 8005c58:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c64:	d108      	bne.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d003      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8005c70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c74:	61bb      	str	r3, [r7, #24]
 8005c76:	e01f      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c82:	d109      	bne.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8005c84:	4b19      	ldr	r3, [pc, #100]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005c86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d003      	beq.n	8005c98 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8005c90:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	e00f      	b.n	8005cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c9e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ca2:	d11c      	bne.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005ca4:	4b11      	ldr	r3, [pc, #68]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d016      	beq.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8005cb0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8005cb4:	61bb      	str	r3, [r7, #24]
      break;
 8005cb6:	e012      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8005cb8:	e011      	b.n	8005cde <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8005cba:	f7ff fe85 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8005cbe:	4602      	mov	r2, r0
 8005cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	0b9b      	lsrs	r3, r3, #14
 8005cc6:	f003 0303 	and.w	r3, r3, #3
 8005cca:	3301      	adds	r3, #1
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd2:	61bb      	str	r3, [r7, #24]
      break;
 8005cd4:	e004      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005cd6:	bf00      	nop
 8005cd8:	e002      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005cda:	bf00      	nop
 8005cdc:	e000      	b.n	8005ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8005cde:	bf00      	nop
    }
  }
  return (frequency);
 8005ce0:	69bb      	ldr	r3, [r7, #24]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3720      	adds	r7, #32
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	40021000 	.word	0x40021000
 8005cf0:	080095ec 	.word	0x080095ec
 8005cf4:	080095fc 	.word	0x080095fc
 8005cf8:	007a1200 	.word	0x007a1200
 8005cfc:	003d0900 	.word	0x003d0900
 8005d00:	aaaaaaab 	.word	0xaaaaaaab

08005d04 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d001      	beq.n	8005d1c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e032      	b.n	8005d82 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2202      	movs	r2, #2
 8005d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a18      	ldr	r2, [pc, #96]	@ (8005d8c <HAL_TIM_Base_Start+0x88>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d00e      	beq.n	8005d4c <HAL_TIM_Base_Start+0x48>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d36:	d009      	beq.n	8005d4c <HAL_TIM_Base_Start+0x48>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a14      	ldr	r2, [pc, #80]	@ (8005d90 <HAL_TIM_Base_Start+0x8c>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_Base_Start+0x48>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a13      	ldr	r2, [pc, #76]	@ (8005d94 <HAL_TIM_Base_Start+0x90>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d111      	bne.n	8005d70 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 0307 	and.w	r3, r3, #7
 8005d56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	2b06      	cmp	r3, #6
 8005d5c:	d010      	beq.n	8005d80 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	e007      	b.n	8005d80 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d80:	2300      	movs	r3, #0
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3714      	adds	r7, #20
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40000400 	.word	0x40000400
 8005d94:	40000800 	.word	0x40000800

08005d98 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d101      	bne.n	8005daa <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005da6:	2301      	movs	r3, #1
 8005da8:	e041      	b.n	8005e2e <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d106      	bne.n	8005dc4 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f7fd fb02 	bl	80033c8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2202      	movs	r2, #2
 8005dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4610      	mov	r0, r2
 8005dd8:	f000 f88a 	bl	8005ef0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2201      	movs	r2, #1
 8005e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3708      	adds	r7, #8
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
	...

08005e38 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e44:	2300      	movs	r3, #0
 8005e46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e048      	b.n	8005ee8 <HAL_TIM_OC_ConfigChannel+0xb0>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2b0c      	cmp	r3, #12
 8005e62:	d839      	bhi.n	8005ed8 <HAL_TIM_OC_ConfigChannel+0xa0>
 8005e64:	a201      	add	r2, pc, #4	@ (adr r2, 8005e6c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e6a:	bf00      	nop
 8005e6c:	08005ea1 	.word	0x08005ea1
 8005e70:	08005ed9 	.word	0x08005ed9
 8005e74:	08005ed9 	.word	0x08005ed9
 8005e78:	08005ed9 	.word	0x08005ed9
 8005e7c:	08005eaf 	.word	0x08005eaf
 8005e80:	08005ed9 	.word	0x08005ed9
 8005e84:	08005ed9 	.word	0x08005ed9
 8005e88:	08005ed9 	.word	0x08005ed9
 8005e8c:	08005ebd 	.word	0x08005ebd
 8005e90:	08005ed9 	.word	0x08005ed9
 8005e94:	08005ed9 	.word	0x08005ed9
 8005e98:	08005ed9 	.word	0x08005ed9
 8005e9c:	08005ecb 	.word	0x08005ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68b9      	ldr	r1, [r7, #8]
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	f000 f890 	bl	8005fcc <TIM_OC1_SetConfig>
      break;
 8005eac:	e017      	b.n	8005ede <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f000 f8ef 	bl	8006098 <TIM_OC2_SetConfig>
      break;
 8005eba:	e010      	b.n	8005ede <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 f952 	bl	800616c <TIM_OC3_SetConfig>
      break;
 8005ec8:	e009      	b.n	8005ede <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68b9      	ldr	r1, [r7, #8]
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	f000 f9b5 	bl	8006240 <TIM_OC4_SetConfig>
      break;
 8005ed6:	e002      	b.n	8005ede <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8005ed8:	2301      	movs	r3, #1
 8005eda:	75fb      	strb	r3, [r7, #23]
      break;
 8005edc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3718      	adds	r7, #24
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	4a2f      	ldr	r2, [pc, #188]	@ (8005fc0 <TIM_Base_SetConfig+0xd0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d00b      	beq.n	8005f20 <TIM_Base_SetConfig+0x30>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f0e:	d007      	beq.n	8005f20 <TIM_Base_SetConfig+0x30>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a2c      	ldr	r2, [pc, #176]	@ (8005fc4 <TIM_Base_SetConfig+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d003      	beq.n	8005f20 <TIM_Base_SetConfig+0x30>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8005fc8 <TIM_Base_SetConfig+0xd8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	4a22      	ldr	r2, [pc, #136]	@ (8005fc0 <TIM_Base_SetConfig+0xd0>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d00b      	beq.n	8005f52 <TIM_Base_SetConfig+0x62>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f40:	d007      	beq.n	8005f52 <TIM_Base_SetConfig+0x62>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	4a1f      	ldr	r2, [pc, #124]	@ (8005fc4 <TIM_Base_SetConfig+0xd4>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d003      	beq.n	8005f52 <TIM_Base_SetConfig+0x62>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fc8 <TIM_Base_SetConfig+0xd8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d108      	bne.n	8005f64 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	695b      	ldr	r3, [r3, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	4a0d      	ldr	r2, [pc, #52]	@ (8005fc0 <TIM_Base_SetConfig+0xd0>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d103      	bne.n	8005f98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f003 0301 	and.w	r3, r3, #1
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f023 0201 	bic.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	611a      	str	r2, [r3, #16]
  }
}
 8005fb6:	bf00      	nop
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bc80      	pop	{r7}
 8005fbe:	4770      	bx	lr
 8005fc0:	40012c00 	.word	0x40012c00
 8005fc4:	40000400 	.word	0x40000400
 8005fc8:	40000800 	.word	0x40000800

08005fcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b087      	sub	sp, #28
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a1b      	ldr	r3, [r3, #32]
 8005fe0:	f023 0201 	bic.w	r2, r3, #1
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	699b      	ldr	r3, [r3, #24]
 8005ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ffa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f023 0303 	bic.w	r3, r3, #3
 8006002:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f023 0302 	bic.w	r3, r3, #2
 8006014:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	697a      	ldr	r2, [r7, #20]
 800601c:	4313      	orrs	r3, r2
 800601e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <TIM_OC1_SetConfig+0xc8>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d10c      	bne.n	8006042 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f023 0308 	bic.w	r3, r3, #8
 800602e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	68db      	ldr	r3, [r3, #12]
 8006034:	697a      	ldr	r2, [r7, #20]
 8006036:	4313      	orrs	r3, r2
 8006038:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	4a13      	ldr	r2, [pc, #76]	@ (8006094 <TIM_OC1_SetConfig+0xc8>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d111      	bne.n	800606e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006050:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006058:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	693a      	ldr	r2, [r7, #16]
 8006060:	4313      	orrs	r3, r2
 8006062:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	693a      	ldr	r2, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	693a      	ldr	r2, [r7, #16]
 8006072:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	68fa      	ldr	r2, [r7, #12]
 8006078:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	685a      	ldr	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	621a      	str	r2, [r3, #32]
}
 8006088:	bf00      	nop
 800608a:	371c      	adds	r7, #28
 800608c:	46bd      	mov	sp, r7
 800608e:	bc80      	pop	{r7}
 8006090:	4770      	bx	lr
 8006092:	bf00      	nop
 8006094:	40012c00 	.word	0x40012c00

08006098 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006098:	b480      	push	{r7}
 800609a:	b087      	sub	sp, #28
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a1b      	ldr	r3, [r3, #32]
 80060a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6a1b      	ldr	r3, [r3, #32]
 80060ac:	f023 0210 	bic.w	r2, r3, #16
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80060c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	021b      	lsls	r3, r3, #8
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	f023 0320 	bic.w	r3, r3, #32
 80060e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	011b      	lsls	r3, r3, #4
 80060ea:	697a      	ldr	r2, [r7, #20]
 80060ec:	4313      	orrs	r3, r2
 80060ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a1d      	ldr	r2, [pc, #116]	@ (8006168 <TIM_OC2_SetConfig+0xd0>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d10d      	bne.n	8006114 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060f8:	697b      	ldr	r3, [r7, #20]
 80060fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4313      	orrs	r3, r2
 800610a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006112:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	4a14      	ldr	r2, [pc, #80]	@ (8006168 <TIM_OC2_SetConfig+0xd0>)
 8006118:	4293      	cmp	r3, r2
 800611a:	d113      	bne.n	8006144 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800612a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	695b      	ldr	r3, [r3, #20]
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	693a      	ldr	r2, [r7, #16]
 8006134:	4313      	orrs	r3, r2
 8006136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	699b      	ldr	r3, [r3, #24]
 800613c:	009b      	lsls	r3, r3, #2
 800613e:	693a      	ldr	r2, [r7, #16]
 8006140:	4313      	orrs	r3, r2
 8006142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	697a      	ldr	r2, [r7, #20]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	bc80      	pop	{r7}
 8006166:	4770      	bx	lr
 8006168:	40012c00 	.word	0x40012c00

0800616c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a1b      	ldr	r3, [r3, #32]
 8006180:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	69db      	ldr	r3, [r3, #28]
 8006192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800619a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f023 0303 	bic.w	r3, r3, #3
 80061a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	4313      	orrs	r3, r2
 80061ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80061b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	021b      	lsls	r3, r3, #8
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	4313      	orrs	r3, r2
 80061c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1d      	ldr	r2, [pc, #116]	@ (800623c <TIM_OC3_SetConfig+0xd0>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d10d      	bne.n	80061e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80061ca:	697b      	ldr	r3, [r7, #20]
 80061cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80061d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	021b      	lsls	r3, r3, #8
 80061d8:	697a      	ldr	r2, [r7, #20]
 80061da:	4313      	orrs	r3, r2
 80061dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80061e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a14      	ldr	r2, [pc, #80]	@ (800623c <TIM_OC3_SetConfig+0xd0>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d113      	bne.n	8006216 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80061fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	693a      	ldr	r2, [r7, #16]
 8006212:	4313      	orrs	r3, r2
 8006214:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	68fa      	ldr	r2, [r7, #12]
 8006220:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	697a      	ldr	r2, [r7, #20]
 800622e:	621a      	str	r2, [r3, #32]
}
 8006230:	bf00      	nop
 8006232:	371c      	adds	r7, #28
 8006234:	46bd      	mov	sp, r7
 8006236:	bc80      	pop	{r7}
 8006238:	4770      	bx	lr
 800623a:	bf00      	nop
 800623c:	40012c00 	.word	0x40012c00

08006240 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006240:	b480      	push	{r7}
 8006242:	b087      	sub	sp, #28
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6a1b      	ldr	r3, [r3, #32]
 800624e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a1b      	ldr	r3, [r3, #32]
 8006254:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69db      	ldr	r3, [r3, #28]
 8006266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800626e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006276:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	021b      	lsls	r3, r3, #8
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800628a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	031b      	lsls	r3, r3, #12
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	4313      	orrs	r3, r2
 8006296:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a0f      	ldr	r2, [pc, #60]	@ (80062d8 <TIM_OC4_SetConfig+0x98>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d109      	bne.n	80062b4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80062a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	695b      	ldr	r3, [r3, #20]
 80062ac:	019b      	lsls	r3, r3, #6
 80062ae:	697a      	ldr	r2, [r7, #20]
 80062b0:	4313      	orrs	r3, r2
 80062b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	621a      	str	r2, [r3, #32]
}
 80062ce:	bf00      	nop
 80062d0:	371c      	adds	r7, #28
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bc80      	pop	{r7}
 80062d6:	4770      	bx	lr
 80062d8:	40012c00 	.word	0x40012c00

080062dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062dc:	b480      	push	{r7}
 80062de:	b085      	sub	sp, #20
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e046      	b.n	8006382 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689b      	ldr	r3, [r3, #8]
 8006312:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d00e      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006340:	d009      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a12      	ldr	r2, [pc, #72]	@ (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d004      	beq.n	8006356 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a10      	ldr	r2, [pc, #64]	@ (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d10c      	bne.n	8006370 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800635c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	4313      	orrs	r3, r2
 8006366:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006380:	2300      	movs	r3, #0
}
 8006382:	4618      	mov	r0, r3
 8006384:	3714      	adds	r7, #20
 8006386:	46bd      	mov	sp, r7
 8006388:	bc80      	pop	{r7}
 800638a:	4770      	bx	lr
 800638c:	40012c00 	.word	0x40012c00
 8006390:	40000400 	.word	0x40000400
 8006394:	40000800 	.word	0x40000800

08006398 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006398:	b480      	push	{r7}
 800639a:	b085      	sub	sp, #20
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
 80063a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d101      	bne.n	80063b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063b0:	2302      	movs	r3, #2
 80063b2:	e03d      	b.n	8006430 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	68db      	ldr	r3, [r3, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	691b      	ldr	r3, [r3, #16]
 80063fe:	4313      	orrs	r3, r2
 8006400:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	695b      	ldr	r3, [r3, #20]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	69db      	ldr	r3, [r3, #28]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	bc80      	pop	{r7}
 8006438:	4770      	bx	lr

0800643a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800643a:	b580      	push	{r7, lr}
 800643c:	b082      	sub	sp, #8
 800643e:	af00      	add	r7, sp, #0
 8006440:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d101      	bne.n	800644c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e042      	b.n	80064d2 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006452:	b2db      	uxtb	r3, r3
 8006454:	2b00      	cmp	r3, #0
 8006456:	d106      	bne.n	8006466 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f7fd f803 	bl	800346c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	@ 0x24
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68da      	ldr	r2, [r3, #12]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800647c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fdb0 	bl	8006fe4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	691a      	ldr	r2, [r3, #16]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006492:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	695a      	ldr	r2, [r3, #20]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064a2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	68da      	ldr	r2, [r3, #12]
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064b2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2220      	movs	r2, #32
 80064be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2220      	movs	r2, #32
 80064c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2200      	movs	r2, #0
 80064ce:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80064d0:	2300      	movs	r3, #0
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3708      	adds	r7, #8
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}

080064da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064da:	b580      	push	{r7, lr}
 80064dc:	b08a      	sub	sp, #40	@ 0x28
 80064de:	af02      	add	r7, sp, #8
 80064e0:	60f8      	str	r0, [r7, #12]
 80064e2:	60b9      	str	r1, [r7, #8]
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	4613      	mov	r3, r2
 80064e8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80064f4:	b2db      	uxtb	r3, r3
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d175      	bne.n	80065e6 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_UART_Transmit+0x2c>
 8006500:	88fb      	ldrh	r3, [r7, #6]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e06e      	b.n	80065e8 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2221      	movs	r2, #33	@ 0x21
 8006514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006518:	f7fd f924 	bl	8003764 <HAL_GetTick>
 800651c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	689b      	ldr	r3, [r3, #8]
 800652e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006532:	d108      	bne.n	8006546 <HAL_UART_Transmit+0x6c>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	691b      	ldr	r3, [r3, #16]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800653c:	2300      	movs	r3, #0
 800653e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	e003      	b.n	800654e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800654e:	e02e      	b.n	80065ae <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	2180      	movs	r1, #128	@ 0x80
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 fb14 	bl	8006b88 <UART_WaitOnFlagUntilTimeout>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d005      	beq.n	8006572 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e03a      	b.n	80065e8 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d10b      	bne.n	8006590 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	461a      	mov	r2, r3
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006586:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	3302      	adds	r3, #2
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	e007      	b.n	80065a0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	781a      	ldrb	r2, [r3, #0]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800659a:	69fb      	ldr	r3, [r7, #28]
 800659c:	3301      	adds	r3, #1
 800659e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	3b01      	subs	r3, #1
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d1cb      	bne.n	8006550 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	2200      	movs	r2, #0
 80065c0:	2140      	movs	r1, #64	@ 0x40
 80065c2:	68f8      	ldr	r0, [r7, #12]
 80065c4:	f000 fae0 	bl	8006b88 <UART_WaitOnFlagUntilTimeout>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d005      	beq.n	80065da <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80065d6:	2303      	movs	r3, #3
 80065d8:	e006      	b.n	80065e8 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2220      	movs	r2, #32
 80065de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80065e2:	2300      	movs	r3, #0
 80065e4:	e000      	b.n	80065e8 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80065e6:	2302      	movs	r3, #2
  }
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3720      	adds	r7, #32
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b084      	sub	sp, #16
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60f8      	str	r0, [r7, #12]
 80065f8:	60b9      	str	r1, [r7, #8]
 80065fa:	4613      	mov	r3, r2
 80065fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b20      	cmp	r3, #32
 8006608:	d112      	bne.n	8006630 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_UART_Receive_IT+0x26>
 8006610:	88fb      	ldrh	r3, [r7, #6]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e00b      	b.n	8006632 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	2200      	movs	r2, #0
 800661e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006620:	88fb      	ldrh	r3, [r7, #6]
 8006622:	461a      	mov	r2, r3
 8006624:	68b9      	ldr	r1, [r7, #8]
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fb07 	bl	8006c3a <UART_Start_Receive_IT>
 800662c:	4603      	mov	r3, r0
 800662e:	e000      	b.n	8006632 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006630:	2302      	movs	r3, #2
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
	...

0800663c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b0ba      	sub	sp, #232	@ 0xe8
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8006662:	2300      	movs	r3, #0
 8006664:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006668:	2300      	movs	r3, #0
 800666a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800666e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006672:	f003 030f 	and.w	r3, r3, #15
 8006676:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800667a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10f      	bne.n	80066a2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006686:	f003 0320 	and.w	r3, r3, #32
 800668a:	2b00      	cmp	r3, #0
 800668c:	d009      	beq.n	80066a2 <HAL_UART_IRQHandler+0x66>
 800668e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006692:	f003 0320 	and.w	r3, r3, #32
 8006696:	2b00      	cmp	r3, #0
 8006698:	d003      	beq.n	80066a2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 fbe3 	bl	8006e66 <UART_Receive_IT>
      return;
 80066a0:	e25b      	b.n	8006b5a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80066a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	f000 80de 	beq.w	8006868 <HAL_UART_IRQHandler+0x22c>
 80066ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066b0:	f003 0301 	and.w	r3, r3, #1
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d106      	bne.n	80066c6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80066b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066bc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80d1 	beq.w	8006868 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80066c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_UART_IRQHandler+0xae>
 80066d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d005      	beq.n	80066ea <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e2:	f043 0201 	orr.w	r2, r3, #1
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80066ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066ee:	f003 0304 	and.w	r3, r3, #4
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00b      	beq.n	800670e <HAL_UART_IRQHandler+0xd2>
 80066f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d005      	beq.n	800670e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006706:	f043 0202 	orr.w	r2, r3, #2
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800670e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006712:	f003 0302 	and.w	r3, r3, #2
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00b      	beq.n	8006732 <HAL_UART_IRQHandler+0xf6>
 800671a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d005      	beq.n	8006732 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800672a:	f043 0204 	orr.w	r2, r3, #4
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006736:	f003 0308 	and.w	r3, r3, #8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d011      	beq.n	8006762 <HAL_UART_IRQHandler+0x126>
 800673e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006742:	f003 0320 	and.w	r3, r3, #32
 8006746:	2b00      	cmp	r3, #0
 8006748:	d105      	bne.n	8006756 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800674a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800674e:	f003 0301 	and.w	r3, r3, #1
 8006752:	2b00      	cmp	r3, #0
 8006754:	d005      	beq.n	8006762 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800675a:	f043 0208 	orr.w	r2, r3, #8
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 81f2 	beq.w	8006b50 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800676c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006770:	f003 0320 	and.w	r3, r3, #32
 8006774:	2b00      	cmp	r3, #0
 8006776:	d008      	beq.n	800678a <HAL_UART_IRQHandler+0x14e>
 8006778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800677c:	f003 0320 	and.w	r3, r3, #32
 8006780:	2b00      	cmp	r3, #0
 8006782:	d002      	beq.n	800678a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006784:	6878      	ldr	r0, [r7, #4]
 8006786:	f000 fb6e 	bl	8006e66 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	695b      	ldr	r3, [r3, #20]
 8006790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	bf14      	ite	ne
 8006798:	2301      	movne	r3, #1
 800679a:	2300      	moveq	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	f003 0308 	and.w	r3, r3, #8
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_UART_IRQHandler+0x17a>
 80067ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d04f      	beq.n	8006856 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 fa78 	bl	8006cac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d041      	beq.n	800684e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3314      	adds	r3, #20
 80067d0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80067e0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80067e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3314      	adds	r3, #20
 80067f2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80067f6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80067fa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067fe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006802:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006806:	e841 2300 	strex	r3, r2, [r1]
 800680a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800680e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1d9      	bne.n	80067ca <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800681a:	2b00      	cmp	r3, #0
 800681c:	d013      	beq.n	8006846 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	4a7e      	ldr	r2, [pc, #504]	@ (8006a1c <HAL_UART_IRQHandler+0x3e0>)
 8006824:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800682a:	4618      	mov	r0, r3
 800682c:	f7fd fe16 	bl	800445c <HAL_DMA_Abort_IT>
 8006830:	4603      	mov	r3, r0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d016      	beq.n	8006864 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800683a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800683c:	687a      	ldr	r2, [r7, #4]
 800683e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006840:	4610      	mov	r0, r2
 8006842:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006844:	e00e      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f7fc f88e 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800684c:	e00a      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7fc f88a 	bl	8002968 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006854:	e006      	b.n	8006864 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f7fc f886 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8006862:	e175      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	bf00      	nop
    return;
 8006866:	e173      	b.n	8006b50 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 814f 	bne.w	8006b10 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006872:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006876:	f003 0310 	and.w	r3, r3, #16
 800687a:	2b00      	cmp	r3, #0
 800687c:	f000 8148 	beq.w	8006b10 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	f000 8141 	beq.w	8006b10 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	60bb      	str	r3, [r7, #8]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	60bb      	str	r3, [r7, #8]
 80068a2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80b6 	beq.w	8006a20 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8145 	beq.w	8006b54 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80068ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068d2:	429a      	cmp	r2, r3
 80068d4:	f080 813e 	bcs.w	8006b54 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80068de:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	2b20      	cmp	r3, #32
 80068e8:	f000 8088 	beq.w	80069fc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	330c      	adds	r3, #12
 80068f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80068fa:	e853 3f00 	ldrex	r3, [r3]
 80068fe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006902:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006906:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800690a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	330c      	adds	r3, #12
 8006914:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006918:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800691c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006920:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006924:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006928:	e841 2300 	strex	r3, r2, [r1]
 800692c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006930:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1d9      	bne.n	80068ec <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	3314      	adds	r3, #20
 800693e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006940:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006942:	e853 3f00 	ldrex	r3, [r3]
 8006946:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006948:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800694a:	f023 0301 	bic.w	r3, r3, #1
 800694e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	3314      	adds	r3, #20
 8006958:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800695c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006960:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006962:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006964:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006968:	e841 2300 	strex	r3, r2, [r1]
 800696c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800696e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006970:	2b00      	cmp	r3, #0
 8006972:	d1e1      	bne.n	8006938 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3314      	adds	r3, #20
 800697a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800697e:	e853 3f00 	ldrex	r3, [r3]
 8006982:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006984:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006986:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800698a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	3314      	adds	r3, #20
 8006994:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006998:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800699a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800699e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80069a0:	e841 2300 	strex	r3, r2, [r1]
 80069a4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80069a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d1e3      	bne.n	8006974 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2220      	movs	r2, #32
 80069b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	330c      	adds	r3, #12
 80069c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c4:	e853 3f00 	ldrex	r3, [r3]
 80069c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80069ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80069cc:	f023 0310 	bic.w	r3, r3, #16
 80069d0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	330c      	adds	r3, #12
 80069da:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80069de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80069e0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069e2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80069e4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80069e6:	e841 2300 	strex	r3, r2, [r1]
 80069ea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80069ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d1e3      	bne.n	80069ba <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fd fcf5 	bl	80043e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2202      	movs	r2, #2
 8006a00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	1ad3      	subs	r3, r2, r3
 8006a0e:	b29b      	uxth	r3, r3
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f8ad 	bl	8006b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006a18:	e09c      	b.n	8006b54 <HAL_UART_IRQHandler+0x518>
 8006a1a:	bf00      	nop
 8006a1c:	08006d71 	.word	0x08006d71
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	f000 808e 	beq.w	8006b58 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006a3c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	f000 8089 	beq.w	8006b58 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a50:	e853 3f00 	ldrex	r3, [r3]
 8006a54:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a5c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	330c      	adds	r3, #12
 8006a66:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006a6a:	647a      	str	r2, [r7, #68]	@ 0x44
 8006a6c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a6e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a70:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a72:	e841 2300 	strex	r3, r2, [r1]
 8006a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d1e3      	bne.n	8006a46 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	3314      	adds	r3, #20
 8006a84:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a88:	e853 3f00 	ldrex	r3, [r3]
 8006a8c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	f023 0301 	bic.w	r3, r3, #1
 8006a94:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	3314      	adds	r3, #20
 8006a9e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006aa2:	633a      	str	r2, [r7, #48]	@ 0x30
 8006aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006aa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006aaa:	e841 2300 	strex	r3, r2, [r1]
 8006aae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ab0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d1e3      	bne.n	8006a7e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	330c      	adds	r3, #12
 8006aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	e853 3f00 	ldrex	r3, [r3]
 8006ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f023 0310 	bic.w	r3, r3, #16
 8006ada:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006ae8:	61fa      	str	r2, [r7, #28]
 8006aea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aec:	69b9      	ldr	r1, [r7, #24]
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	e841 2300 	strex	r3, r2, [r1]
 8006af4:	617b      	str	r3, [r7, #20]
   return(result);
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1e3      	bne.n	8006ac4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2202      	movs	r2, #2
 8006b00:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b02:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b06:	4619      	mov	r1, r3
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f832 	bl	8006b72 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006b0e:	e023      	b.n	8006b58 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d009      	beq.n	8006b30 <HAL_UART_IRQHandler+0x4f4>
 8006b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d003      	beq.n	8006b30 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 f935 	bl	8006d98 <UART_Transmit_IT>
    return;
 8006b2e:	e014      	b.n	8006b5a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006b30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d00e      	beq.n	8006b5a <HAL_UART_IRQHandler+0x51e>
 8006b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d008      	beq.n	8006b5a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f974 	bl	8006e36 <UART_EndTransmit_IT>
    return;
 8006b4e:	e004      	b.n	8006b5a <HAL_UART_IRQHandler+0x51e>
    return;
 8006b50:	bf00      	nop
 8006b52:	e002      	b.n	8006b5a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b54:	bf00      	nop
 8006b56:	e000      	b.n	8006b5a <HAL_UART_IRQHandler+0x51e>
      return;
 8006b58:	bf00      	nop
  }
}
 8006b5a:	37e8      	adds	r7, #232	@ 0xe8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr

08006b72 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b083      	sub	sp, #12
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
 8006b7a:	460b      	mov	r3, r1
 8006b7c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b7e:	bf00      	nop
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bc80      	pop	{r7}
 8006b86:	4770      	bx	lr

08006b88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006b88:	b580      	push	{r7, lr}
 8006b8a:	b086      	sub	sp, #24
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	60f8      	str	r0, [r7, #12]
 8006b90:	60b9      	str	r1, [r7, #8]
 8006b92:	603b      	str	r3, [r7, #0]
 8006b94:	4613      	mov	r3, r2
 8006b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b98:	e03b      	b.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b9a:	6a3b      	ldr	r3, [r7, #32]
 8006b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ba0:	d037      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ba2:	f7fc fddf 	bl	8003764 <HAL_GetTick>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	683b      	ldr	r3, [r7, #0]
 8006baa:	1ad3      	subs	r3, r2, r3
 8006bac:	6a3a      	ldr	r2, [r7, #32]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d302      	bcc.n	8006bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bb2:	6a3b      	ldr	r3, [r7, #32]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d101      	bne.n	8006bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e03a      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	f003 0304 	and.w	r3, r3, #4
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d023      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	2b80      	cmp	r3, #128	@ 0x80
 8006bce:	d020      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	2b40      	cmp	r3, #64	@ 0x40
 8006bd4:	d01d      	beq.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b08      	cmp	r3, #8
 8006be2:	d116      	bne.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006be4:	2300      	movs	r3, #0
 8006be6:	617b      	str	r3, [r7, #20]
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	617b      	str	r3, [r7, #20]
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bfa:	68f8      	ldr	r0, [r7, #12]
 8006bfc:	f000 f856 	bl	8006cac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2208      	movs	r2, #8
 8006c04:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e00f      	b.n	8006c32 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	bf0c      	ite	eq
 8006c22:	2301      	moveq	r3, #1
 8006c24:	2300      	movne	r3, #0
 8006c26:	b2db      	uxtb	r3, r3
 8006c28:	461a      	mov	r2, r3
 8006c2a:	79fb      	ldrb	r3, [r7, #7]
 8006c2c:	429a      	cmp	r2, r3
 8006c2e:	d0b4      	beq.n	8006b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c30:	2300      	movs	r3, #0
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}

08006c3a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b085      	sub	sp, #20
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	60f8      	str	r0, [r7, #12]
 8006c42:	60b9      	str	r1, [r7, #8]
 8006c44:	4613      	mov	r3, r2
 8006c46:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68ba      	ldr	r2, [r7, #8]
 8006c4c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	88fa      	ldrh	r2, [r7, #6]
 8006c52:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	88fa      	ldrh	r2, [r7, #6]
 8006c58:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2222      	movs	r2, #34	@ 0x22
 8006c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d007      	beq.n	8006c80 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006c7e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695a      	ldr	r2, [r3, #20]
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f042 0201 	orr.w	r2, r2, #1
 8006c8e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f042 0220 	orr.w	r2, r2, #32
 8006c9e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bc80      	pop	{r7}
 8006caa:	4770      	bx	lr

08006cac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b095      	sub	sp, #84	@ 0x54
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	330c      	adds	r3, #12
 8006cba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cbe:	e853 3f00 	ldrex	r3, [r3]
 8006cc2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	330c      	adds	r3, #12
 8006cd2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006cd4:	643a      	str	r2, [r7, #64]	@ 0x40
 8006cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cda:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e5      	bne.n	8006cb4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	3314      	adds	r3, #20
 8006cee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	e853 3f00 	ldrex	r3, [r3]
 8006cf6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	3314      	adds	r3, #20
 8006d06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006d08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d10:	e841 2300 	strex	r3, r2, [r1]
 8006d14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d1e5      	bne.n	8006ce8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d119      	bne.n	8006d58 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	330c      	adds	r3, #12
 8006d2a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	e853 3f00 	ldrex	r3, [r3]
 8006d32:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	f023 0310 	bic.w	r3, r3, #16
 8006d3a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	330c      	adds	r3, #12
 8006d42:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006d44:	61ba      	str	r2, [r7, #24]
 8006d46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d48:	6979      	ldr	r1, [r7, #20]
 8006d4a:	69ba      	ldr	r2, [r7, #24]
 8006d4c:	e841 2300 	strex	r3, r2, [r1]
 8006d50:	613b      	str	r3, [r7, #16]
   return(result);
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d1e5      	bne.n	8006d24 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006d66:	bf00      	nop
 8006d68:	3754      	adds	r7, #84	@ 0x54
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr

08006d70 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b084      	sub	sp, #16
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f7fb fdec 	bl	8002968 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b085      	sub	sp, #20
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006da6:	b2db      	uxtb	r3, r3
 8006da8:	2b21      	cmp	r3, #33	@ 0x21
 8006daa:	d13e      	bne.n	8006e2a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	689b      	ldr	r3, [r3, #8]
 8006db0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006db4:	d114      	bne.n	8006de0 <UART_Transmit_IT+0x48>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	691b      	ldr	r3, [r3, #16]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d110      	bne.n	8006de0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a1b      	ldr	r3, [r3, #32]
 8006dc2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	461a      	mov	r2, r3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dd2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6a1b      	ldr	r3, [r3, #32]
 8006dd8:	1c9a      	adds	r2, r3, #2
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	621a      	str	r2, [r3, #32]
 8006dde:	e008      	b.n	8006df2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	1c59      	adds	r1, r3, #1
 8006de6:	687a      	ldr	r2, [r7, #4]
 8006de8:	6211      	str	r1, [r2, #32]
 8006dea:	781a      	ldrb	r2, [r3, #0]
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006df6:	b29b      	uxth	r3, r3
 8006df8:	3b01      	subs	r3, #1
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	687a      	ldr	r2, [r7, #4]
 8006dfe:	4619      	mov	r1, r3
 8006e00:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d10f      	bne.n	8006e26 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68da      	ldr	r2, [r3, #12]
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006e14:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68da      	ldr	r2, [r3, #12]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e24:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e26:	2300      	movs	r3, #0
 8006e28:	e000      	b.n	8006e2c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006e2a:	2302      	movs	r3, #2
  }
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bc80      	pop	{r7}
 8006e34:	4770      	bx	lr

08006e36 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e4c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e56:	6878      	ldr	r0, [r7, #4]
 8006e58:	f7ff fe82 	bl	8006b60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}

08006e66 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e66:	b580      	push	{r7, lr}
 8006e68:	b08c      	sub	sp, #48	@ 0x30
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b22      	cmp	r3, #34	@ 0x22
 8006e78:	f040 80ae 	bne.w	8006fd8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e84:	d117      	bne.n	8006eb6 <UART_Receive_IT+0x50>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	691b      	ldr	r3, [r3, #16]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d113      	bne.n	8006eb6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e96:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eae:	1c9a      	adds	r2, r3, #2
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006eb4:	e026      	b.n	8006f04 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ec8:	d007      	beq.n	8006eda <UART_Receive_IT+0x74>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d10a      	bne.n	8006ee8 <UART_Receive_IT+0x82>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	691b      	ldr	r3, [r3, #16]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d106      	bne.n	8006ee8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	685b      	ldr	r3, [r3, #4]
 8006ee0:	b2da      	uxtb	r2, r3
 8006ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee4:	701a      	strb	r2, [r3, #0]
 8006ee6:	e008      	b.n	8006efa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ef4:	b2da      	uxtb	r2, r3
 8006ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ef8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4619      	mov	r1, r3
 8006f12:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d15d      	bne.n	8006fd4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f022 0220 	bic.w	r2, r2, #32
 8006f26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006f36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	695a      	ldr	r2, [r3, #20]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f022 0201 	bic.w	r2, r2, #1
 8006f46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2220      	movs	r2, #32
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d135      	bne.n	8006fca <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2200      	movs	r2, #0
 8006f62:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	330c      	adds	r3, #12
 8006f6a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	613b      	str	r3, [r7, #16]
   return(result);
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f023 0310 	bic.w	r3, r3, #16
 8006f7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	330c      	adds	r3, #12
 8006f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f84:	623a      	str	r2, [r7, #32]
 8006f86:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	69f9      	ldr	r1, [r7, #28]
 8006f8a:	6a3a      	ldr	r2, [r7, #32]
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f92:	69bb      	ldr	r3, [r7, #24]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e5      	bne.n	8006f64 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0310 	and.w	r3, r3, #16
 8006fa2:	2b10      	cmp	r3, #16
 8006fa4:	d10a      	bne.n	8006fbc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	60fb      	str	r3, [r7, #12]
 8006fba:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f7ff fdd5 	bl	8006b72 <HAL_UARTEx_RxEventCallback>
 8006fc8:	e002      	b.n	8006fd0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fb fb72 	bl	80026b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	e002      	b.n	8006fda <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	e000      	b.n	8006fda <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006fd8:	2302      	movs	r3, #2
  }
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3730      	adds	r7, #48	@ 0x30
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}
	...

08006fe4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	689a      	ldr	r2, [r3, #8]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	691b      	ldr	r3, [r3, #16]
 800700a:	431a      	orrs	r2, r3
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	695b      	ldr	r3, [r3, #20]
 8007010:	4313      	orrs	r3, r2
 8007012:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800701e:	f023 030c 	bic.w	r3, r3, #12
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	6812      	ldr	r2, [r2, #0]
 8007026:	68b9      	ldr	r1, [r7, #8]
 8007028:	430b      	orrs	r3, r1
 800702a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	699a      	ldr	r2, [r3, #24]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	430a      	orrs	r2, r1
 8007040:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a2c      	ldr	r2, [pc, #176]	@ (80070f8 <UART_SetConfig+0x114>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d103      	bne.n	8007054 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800704c:	f7fe fcbc 	bl	80059c8 <HAL_RCC_GetPCLK2Freq>
 8007050:	60f8      	str	r0, [r7, #12]
 8007052:	e002      	b.n	800705a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8007054:	f7fe fca4 	bl	80059a0 <HAL_RCC_GetPCLK1Freq>
 8007058:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4613      	mov	r3, r2
 800705e:	009b      	lsls	r3, r3, #2
 8007060:	4413      	add	r3, r2
 8007062:	009a      	lsls	r2, r3, #2
 8007064:	441a      	add	r2, r3
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007070:	4a22      	ldr	r2, [pc, #136]	@ (80070fc <UART_SetConfig+0x118>)
 8007072:	fba2 2303 	umull	r2, r3, r2, r3
 8007076:	095b      	lsrs	r3, r3, #5
 8007078:	0119      	lsls	r1, r3, #4
 800707a:	68fa      	ldr	r2, [r7, #12]
 800707c:	4613      	mov	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	4413      	add	r3, r2
 8007082:	009a      	lsls	r2, r3, #2
 8007084:	441a      	add	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	fbb2 f2f3 	udiv	r2, r2, r3
 8007090:	4b1a      	ldr	r3, [pc, #104]	@ (80070fc <UART_SetConfig+0x118>)
 8007092:	fba3 0302 	umull	r0, r3, r3, r2
 8007096:	095b      	lsrs	r3, r3, #5
 8007098:	2064      	movs	r0, #100	@ 0x64
 800709a:	fb00 f303 	mul.w	r3, r0, r3
 800709e:	1ad3      	subs	r3, r2, r3
 80070a0:	011b      	lsls	r3, r3, #4
 80070a2:	3332      	adds	r3, #50	@ 0x32
 80070a4:	4a15      	ldr	r2, [pc, #84]	@ (80070fc <UART_SetConfig+0x118>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	095b      	lsrs	r3, r3, #5
 80070ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070b0:	4419      	add	r1, r3
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	4613      	mov	r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	4413      	add	r3, r2
 80070ba:	009a      	lsls	r2, r3, #2
 80070bc:	441a      	add	r2, r3
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80070c8:	4b0c      	ldr	r3, [pc, #48]	@ (80070fc <UART_SetConfig+0x118>)
 80070ca:	fba3 0302 	umull	r0, r3, r3, r2
 80070ce:	095b      	lsrs	r3, r3, #5
 80070d0:	2064      	movs	r0, #100	@ 0x64
 80070d2:	fb00 f303 	mul.w	r3, r0, r3
 80070d6:	1ad3      	subs	r3, r2, r3
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	3332      	adds	r3, #50	@ 0x32
 80070dc:	4a07      	ldr	r2, [pc, #28]	@ (80070fc <UART_SetConfig+0x118>)
 80070de:	fba2 2303 	umull	r2, r3, r2, r3
 80070e2:	095b      	lsrs	r3, r3, #5
 80070e4:	f003 020f 	and.w	r2, r3, #15
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	440a      	add	r2, r1
 80070ee:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80070f0:	bf00      	nop
 80070f2:	3710      	adds	r7, #16
 80070f4:	46bd      	mov	sp, r7
 80070f6:	bd80      	pop	{r7, pc}
 80070f8:	40013800 	.word	0x40013800
 80070fc:	51eb851f 	.word	0x51eb851f

08007100 <pow>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	4614      	mov	r4, r2
 8007106:	461d      	mov	r5, r3
 8007108:	4680      	mov	r8, r0
 800710a:	4689      	mov	r9, r1
 800710c:	f000 f868 	bl	80071e0 <__ieee754_pow>
 8007110:	4622      	mov	r2, r4
 8007112:	4606      	mov	r6, r0
 8007114:	460f      	mov	r7, r1
 8007116:	462b      	mov	r3, r5
 8007118:	4620      	mov	r0, r4
 800711a:	4629      	mov	r1, r5
 800711c:	f7f9 fc80 	bl	8000a20 <__aeabi_dcmpun>
 8007120:	bbc8      	cbnz	r0, 8007196 <pow+0x96>
 8007122:	2200      	movs	r2, #0
 8007124:	2300      	movs	r3, #0
 8007126:	4640      	mov	r0, r8
 8007128:	4649      	mov	r1, r9
 800712a:	f7f9 fc47 	bl	80009bc <__aeabi_dcmpeq>
 800712e:	b1b8      	cbz	r0, 8007160 <pow+0x60>
 8007130:	2200      	movs	r2, #0
 8007132:	2300      	movs	r3, #0
 8007134:	4620      	mov	r0, r4
 8007136:	4629      	mov	r1, r5
 8007138:	f7f9 fc40 	bl	80009bc <__aeabi_dcmpeq>
 800713c:	2800      	cmp	r0, #0
 800713e:	d141      	bne.n	80071c4 <pow+0xc4>
 8007140:	4620      	mov	r0, r4
 8007142:	4629      	mov	r1, r5
 8007144:	f000 f844 	bl	80071d0 <finite>
 8007148:	b328      	cbz	r0, 8007196 <pow+0x96>
 800714a:	2200      	movs	r2, #0
 800714c:	2300      	movs	r3, #0
 800714e:	4620      	mov	r0, r4
 8007150:	4629      	mov	r1, r5
 8007152:	f7f9 fc3d 	bl	80009d0 <__aeabi_dcmplt>
 8007156:	b1f0      	cbz	r0, 8007196 <pow+0x96>
 8007158:	f000 ff6a 	bl	8008030 <__errno>
 800715c:	2322      	movs	r3, #34	@ 0x22
 800715e:	e019      	b.n	8007194 <pow+0x94>
 8007160:	4630      	mov	r0, r6
 8007162:	4639      	mov	r1, r7
 8007164:	f000 f834 	bl	80071d0 <finite>
 8007168:	b9c8      	cbnz	r0, 800719e <pow+0x9e>
 800716a:	4640      	mov	r0, r8
 800716c:	4649      	mov	r1, r9
 800716e:	f000 f82f 	bl	80071d0 <finite>
 8007172:	b1a0      	cbz	r0, 800719e <pow+0x9e>
 8007174:	4620      	mov	r0, r4
 8007176:	4629      	mov	r1, r5
 8007178:	f000 f82a 	bl	80071d0 <finite>
 800717c:	b178      	cbz	r0, 800719e <pow+0x9e>
 800717e:	4632      	mov	r2, r6
 8007180:	463b      	mov	r3, r7
 8007182:	4630      	mov	r0, r6
 8007184:	4639      	mov	r1, r7
 8007186:	f7f9 fc4b 	bl	8000a20 <__aeabi_dcmpun>
 800718a:	2800      	cmp	r0, #0
 800718c:	d0e4      	beq.n	8007158 <pow+0x58>
 800718e:	f000 ff4f 	bl	8008030 <__errno>
 8007192:	2321      	movs	r3, #33	@ 0x21
 8007194:	6003      	str	r3, [r0, #0]
 8007196:	4630      	mov	r0, r6
 8007198:	4639      	mov	r1, r7
 800719a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800719e:	2200      	movs	r2, #0
 80071a0:	2300      	movs	r3, #0
 80071a2:	4630      	mov	r0, r6
 80071a4:	4639      	mov	r1, r7
 80071a6:	f7f9 fc09 	bl	80009bc <__aeabi_dcmpeq>
 80071aa:	2800      	cmp	r0, #0
 80071ac:	d0f3      	beq.n	8007196 <pow+0x96>
 80071ae:	4640      	mov	r0, r8
 80071b0:	4649      	mov	r1, r9
 80071b2:	f000 f80d 	bl	80071d0 <finite>
 80071b6:	2800      	cmp	r0, #0
 80071b8:	d0ed      	beq.n	8007196 <pow+0x96>
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	f000 f807 	bl	80071d0 <finite>
 80071c2:	e7c8      	b.n	8007156 <pow+0x56>
 80071c4:	2600      	movs	r6, #0
 80071c6:	4f01      	ldr	r7, [pc, #4]	@ (80071cc <pow+0xcc>)
 80071c8:	e7e5      	b.n	8007196 <pow+0x96>
 80071ca:	bf00      	nop
 80071cc:	3ff00000 	.word	0x3ff00000

080071d0 <finite>:
 80071d0:	f041 4000 	orr.w	r0, r1, #2147483648	@ 0x80000000
 80071d4:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80071d8:	0fc0      	lsrs	r0, r0, #31
 80071da:	4770      	bx	lr
 80071dc:	0000      	movs	r0, r0
	...

080071e0 <__ieee754_pow>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	b091      	sub	sp, #68	@ 0x44
 80071e6:	e9cd 2300 	strd	r2, r3, [sp]
 80071ea:	468b      	mov	fp, r1
 80071ec:	e9dd 1800 	ldrd	r1, r8, [sp]
 80071f0:	f028 4700 	bic.w	r7, r8, #2147483648	@ 0x80000000
 80071f4:	4682      	mov	sl, r0
 80071f6:	ea57 0001 	orrs.w	r0, r7, r1
 80071fa:	d112      	bne.n	8007222 <__ieee754_pow+0x42>
 80071fc:	4653      	mov	r3, sl
 80071fe:	f48b 2200 	eor.w	r2, fp, #524288	@ 0x80000
 8007202:	18db      	adds	r3, r3, r3
 8007204:	4152      	adcs	r2, r2
 8007206:	4298      	cmp	r0, r3
 8007208:	4b93      	ldr	r3, [pc, #588]	@ (8007458 <__ieee754_pow+0x278>)
 800720a:	4193      	sbcs	r3, r2
 800720c:	f080 84cd 	bcs.w	8007baa <__ieee754_pow+0x9ca>
 8007210:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007214:	4650      	mov	r0, sl
 8007216:	4659      	mov	r1, fp
 8007218:	f7f8 ffb2 	bl	8000180 <__adddf3>
 800721c:	b011      	add	sp, #68	@ 0x44
 800721e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007222:	4b8e      	ldr	r3, [pc, #568]	@ (800745c <__ieee754_pow+0x27c>)
 8007224:	f02b 4500 	bic.w	r5, fp, #2147483648	@ 0x80000000
 8007228:	429d      	cmp	r5, r3
 800722a:	465e      	mov	r6, fp
 800722c:	46d1      	mov	r9, sl
 800722e:	d80b      	bhi.n	8007248 <__ieee754_pow+0x68>
 8007230:	d105      	bne.n	800723e <__ieee754_pow+0x5e>
 8007232:	f1ba 0f00 	cmp.w	sl, #0
 8007236:	d1eb      	bne.n	8007210 <__ieee754_pow+0x30>
 8007238:	42af      	cmp	r7, r5
 800723a:	d8e9      	bhi.n	8007210 <__ieee754_pow+0x30>
 800723c:	e001      	b.n	8007242 <__ieee754_pow+0x62>
 800723e:	429f      	cmp	r7, r3
 8007240:	d802      	bhi.n	8007248 <__ieee754_pow+0x68>
 8007242:	429f      	cmp	r7, r3
 8007244:	d10f      	bne.n	8007266 <__ieee754_pow+0x86>
 8007246:	b171      	cbz	r1, 8007266 <__ieee754_pow+0x86>
 8007248:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800724c:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 8007250:	ea56 0609 	orrs.w	r6, r6, r9
 8007254:	d1dc      	bne.n	8007210 <__ieee754_pow+0x30>
 8007256:	e9dd 3200 	ldrd	r3, r2, [sp]
 800725a:	18db      	adds	r3, r3, r3
 800725c:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8007260:	4152      	adcs	r2, r2
 8007262:	429e      	cmp	r6, r3
 8007264:	e7d0      	b.n	8007208 <__ieee754_pow+0x28>
 8007266:	2e00      	cmp	r6, #0
 8007268:	462b      	mov	r3, r5
 800726a:	da42      	bge.n	80072f2 <__ieee754_pow+0x112>
 800726c:	4a7c      	ldr	r2, [pc, #496]	@ (8007460 <__ieee754_pow+0x280>)
 800726e:	4297      	cmp	r7, r2
 8007270:	d856      	bhi.n	8007320 <__ieee754_pow+0x140>
 8007272:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8007276:	4297      	cmp	r7, r2
 8007278:	f240 84a6 	bls.w	8007bc8 <__ieee754_pow+0x9e8>
 800727c:	153a      	asrs	r2, r7, #20
 800727e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8007282:	2a14      	cmp	r2, #20
 8007284:	dd18      	ble.n	80072b8 <__ieee754_pow+0xd8>
 8007286:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800728a:	fa21 f402 	lsr.w	r4, r1, r2
 800728e:	fa04 f202 	lsl.w	r2, r4, r2
 8007292:	428a      	cmp	r2, r1
 8007294:	f040 8498 	bne.w	8007bc8 <__ieee754_pow+0x9e8>
 8007298:	f004 0401 	and.w	r4, r4, #1
 800729c:	f1c4 0402 	rsb	r4, r4, #2
 80072a0:	2900      	cmp	r1, #0
 80072a2:	d159      	bne.n	8007358 <__ieee754_pow+0x178>
 80072a4:	f1b8 4f80 	cmp.w	r8, #1073741824	@ 0x40000000
 80072a8:	d149      	bne.n	800733e <__ieee754_pow+0x15e>
 80072aa:	4652      	mov	r2, sl
 80072ac:	465b      	mov	r3, fp
 80072ae:	4650      	mov	r0, sl
 80072b0:	4659      	mov	r1, fp
 80072b2:	f7f9 f91b 	bl	80004ec <__aeabi_dmul>
 80072b6:	e7b1      	b.n	800721c <__ieee754_pow+0x3c>
 80072b8:	2900      	cmp	r1, #0
 80072ba:	d14c      	bne.n	8007356 <__ieee754_pow+0x176>
 80072bc:	f1c2 0214 	rsb	r2, r2, #20
 80072c0:	fa47 f402 	asr.w	r4, r7, r2
 80072c4:	fa04 f202 	lsl.w	r2, r4, r2
 80072c8:	42ba      	cmp	r2, r7
 80072ca:	f040 847a 	bne.w	8007bc2 <__ieee754_pow+0x9e2>
 80072ce:	f004 0401 	and.w	r4, r4, #1
 80072d2:	f1c4 0402 	rsb	r4, r4, #2
 80072d6:	4a63      	ldr	r2, [pc, #396]	@ (8007464 <__ieee754_pow+0x284>)
 80072d8:	4297      	cmp	r7, r2
 80072da:	d1e3      	bne.n	80072a4 <__ieee754_pow+0xc4>
 80072dc:	f1b8 0f00 	cmp.w	r8, #0
 80072e0:	f280 846b 	bge.w	8007bba <__ieee754_pow+0x9da>
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	2000      	movs	r0, #0
 80072ea:	495e      	ldr	r1, [pc, #376]	@ (8007464 <__ieee754_pow+0x284>)
 80072ec:	f7f9 fa28 	bl	8000740 <__aeabi_ddiv>
 80072f0:	e794      	b.n	800721c <__ieee754_pow+0x3c>
 80072f2:	2400      	movs	r4, #0
 80072f4:	bb81      	cbnz	r1, 8007358 <__ieee754_pow+0x178>
 80072f6:	4a59      	ldr	r2, [pc, #356]	@ (800745c <__ieee754_pow+0x27c>)
 80072f8:	4297      	cmp	r7, r2
 80072fa:	d1ec      	bne.n	80072d6 <__ieee754_pow+0xf6>
 80072fc:	f105 4340 	add.w	r3, r5, #3221225472	@ 0xc0000000
 8007300:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 8007304:	ea53 0309 	orrs.w	r3, r3, r9
 8007308:	f000 844f 	beq.w	8007baa <__ieee754_pow+0x9ca>
 800730c:	4b56      	ldr	r3, [pc, #344]	@ (8007468 <__ieee754_pow+0x288>)
 800730e:	429d      	cmp	r5, r3
 8007310:	d908      	bls.n	8007324 <__ieee754_pow+0x144>
 8007312:	f1b8 0f00 	cmp.w	r8, #0
 8007316:	f280 844c 	bge.w	8007bb2 <__ieee754_pow+0x9d2>
 800731a:	2000      	movs	r0, #0
 800731c:	2100      	movs	r1, #0
 800731e:	e77d      	b.n	800721c <__ieee754_pow+0x3c>
 8007320:	2402      	movs	r4, #2
 8007322:	e7e7      	b.n	80072f4 <__ieee754_pow+0x114>
 8007324:	f1b8 0f00 	cmp.w	r8, #0
 8007328:	f04f 0000 	mov.w	r0, #0
 800732c:	f04f 0100 	mov.w	r1, #0
 8007330:	f6bf af74 	bge.w	800721c <__ieee754_pow+0x3c>
 8007334:	e9dd 0300 	ldrd	r0, r3, [sp]
 8007338:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800733c:	e76e      	b.n	800721c <__ieee754_pow+0x3c>
 800733e:	4a4b      	ldr	r2, [pc, #300]	@ (800746c <__ieee754_pow+0x28c>)
 8007340:	4590      	cmp	r8, r2
 8007342:	d109      	bne.n	8007358 <__ieee754_pow+0x178>
 8007344:	2e00      	cmp	r6, #0
 8007346:	db07      	blt.n	8007358 <__ieee754_pow+0x178>
 8007348:	4650      	mov	r0, sl
 800734a:	4659      	mov	r1, fp
 800734c:	b011      	add	sp, #68	@ 0x44
 800734e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007352:	f000 bd0f 	b.w	8007d74 <__ieee754_sqrt>
 8007356:	2400      	movs	r4, #0
 8007358:	4650      	mov	r0, sl
 800735a:	4659      	mov	r1, fp
 800735c:	9302      	str	r3, [sp, #8]
 800735e:	f000 fc69 	bl	8007c34 <fabs>
 8007362:	9b02      	ldr	r3, [sp, #8]
 8007364:	f1b9 0f00 	cmp.w	r9, #0
 8007368:	d127      	bne.n	80073ba <__ieee754_pow+0x1da>
 800736a:	4a3e      	ldr	r2, [pc, #248]	@ (8007464 <__ieee754_pow+0x284>)
 800736c:	f026 4c40 	bic.w	ip, r6, #3221225472	@ 0xc0000000
 8007370:	4594      	cmp	ip, r2
 8007372:	d000      	beq.n	8007376 <__ieee754_pow+0x196>
 8007374:	bb0d      	cbnz	r5, 80073ba <__ieee754_pow+0x1da>
 8007376:	f1b8 0f00 	cmp.w	r8, #0
 800737a:	da05      	bge.n	8007388 <__ieee754_pow+0x1a8>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	2000      	movs	r0, #0
 8007382:	4938      	ldr	r1, [pc, #224]	@ (8007464 <__ieee754_pow+0x284>)
 8007384:	f7f9 f9dc 	bl	8000740 <__aeabi_ddiv>
 8007388:	2e00      	cmp	r6, #0
 800738a:	f6bf af47 	bge.w	800721c <__ieee754_pow+0x3c>
 800738e:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8007392:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8007396:	4325      	orrs	r5, r4
 8007398:	d108      	bne.n	80073ac <__ieee754_pow+0x1cc>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4610      	mov	r0, r2
 80073a0:	4619      	mov	r1, r3
 80073a2:	f7f8 feeb 	bl	800017c <__aeabi_dsub>
 80073a6:	4602      	mov	r2, r0
 80073a8:	460b      	mov	r3, r1
 80073aa:	e79f      	b.n	80072ec <__ieee754_pow+0x10c>
 80073ac:	2c01      	cmp	r4, #1
 80073ae:	f47f af35 	bne.w	800721c <__ieee754_pow+0x3c>
 80073b2:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80073b6:	4619      	mov	r1, r3
 80073b8:	e730      	b.n	800721c <__ieee754_pow+0x3c>
 80073ba:	0ff2      	lsrs	r2, r6, #31
 80073bc:	3a01      	subs	r2, #1
 80073be:	ea52 0c04 	orrs.w	ip, r2, r4
 80073c2:	d102      	bne.n	80073ca <__ieee754_pow+0x1ea>
 80073c4:	4652      	mov	r2, sl
 80073c6:	465b      	mov	r3, fp
 80073c8:	e7e9      	b.n	800739e <__ieee754_pow+0x1be>
 80073ca:	f04f 0900 	mov.w	r9, #0
 80073ce:	3c01      	subs	r4, #1
 80073d0:	4314      	orrs	r4, r2
 80073d2:	bf14      	ite	ne
 80073d4:	f8df a08c 	ldrne.w	sl, [pc, #140]	@ 8007464 <__ieee754_pow+0x284>
 80073d8:	f8df a094 	ldreq.w	sl, [pc, #148]	@ 8007470 <__ieee754_pow+0x290>
 80073dc:	f1b7 4f84 	cmp.w	r7, #1107296256	@ 0x42000000
 80073e0:	e9cd 9a02 	strd	r9, sl, [sp, #8]
 80073e4:	f240 8104 	bls.w	80075f0 <__ieee754_pow+0x410>
 80073e8:	4b22      	ldr	r3, [pc, #136]	@ (8007474 <__ieee754_pow+0x294>)
 80073ea:	429f      	cmp	r7, r3
 80073ec:	4b1e      	ldr	r3, [pc, #120]	@ (8007468 <__ieee754_pow+0x288>)
 80073ee:	d913      	bls.n	8007418 <__ieee754_pow+0x238>
 80073f0:	429d      	cmp	r5, r3
 80073f2:	d808      	bhi.n	8007406 <__ieee754_pow+0x226>
 80073f4:	f1b8 0f00 	cmp.w	r8, #0
 80073f8:	da08      	bge.n	800740c <__ieee754_pow+0x22c>
 80073fa:	2000      	movs	r0, #0
 80073fc:	b011      	add	sp, #68	@ 0x44
 80073fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007402:	f000 bcb1 	b.w	8007d68 <__math_oflow>
 8007406:	f1b8 0f00 	cmp.w	r8, #0
 800740a:	dcf6      	bgt.n	80073fa <__ieee754_pow+0x21a>
 800740c:	2000      	movs	r0, #0
 800740e:	b011      	add	sp, #68	@ 0x44
 8007410:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007414:	f000 bca3 	b.w	8007d5e <__math_uflow>
 8007418:	429d      	cmp	r5, r3
 800741a:	d20c      	bcs.n	8007436 <__ieee754_pow+0x256>
 800741c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007420:	2200      	movs	r2, #0
 8007422:	2300      	movs	r3, #0
 8007424:	f7f9 fad4 	bl	80009d0 <__aeabi_dcmplt>
 8007428:	3800      	subs	r0, #0
 800742a:	bf18      	it	ne
 800742c:	2001      	movne	r0, #1
 800742e:	f1b8 0f00 	cmp.w	r8, #0
 8007432:	daec      	bge.n	800740e <__ieee754_pow+0x22e>
 8007434:	e7e2      	b.n	80073fc <__ieee754_pow+0x21c>
 8007436:	4b0b      	ldr	r3, [pc, #44]	@ (8007464 <__ieee754_pow+0x284>)
 8007438:	2200      	movs	r2, #0
 800743a:	429d      	cmp	r5, r3
 800743c:	d91c      	bls.n	8007478 <__ieee754_pow+0x298>
 800743e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007442:	2300      	movs	r3, #0
 8007444:	f7f9 fac4 	bl	80009d0 <__aeabi_dcmplt>
 8007448:	3800      	subs	r0, #0
 800744a:	bf18      	it	ne
 800744c:	2001      	movne	r0, #1
 800744e:	f1b8 0f00 	cmp.w	r8, #0
 8007452:	dcd3      	bgt.n	80073fc <__ieee754_pow+0x21c>
 8007454:	e7db      	b.n	800740e <__ieee754_pow+0x22e>
 8007456:	bf00      	nop
 8007458:	fff00000 	.word	0xfff00000
 800745c:	7ff00000 	.word	0x7ff00000
 8007460:	433fffff 	.word	0x433fffff
 8007464:	3ff00000 	.word	0x3ff00000
 8007468:	3fefffff 	.word	0x3fefffff
 800746c:	3fe00000 	.word	0x3fe00000
 8007470:	bff00000 	.word	0xbff00000
 8007474:	43f00000 	.word	0x43f00000
 8007478:	4b59      	ldr	r3, [pc, #356]	@ (80075e0 <__ieee754_pow+0x400>)
 800747a:	f7f8 fe7f 	bl	800017c <__aeabi_dsub>
 800747e:	a350      	add	r3, pc, #320	@ (adr r3, 80075c0 <__ieee754_pow+0x3e0>)
 8007480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007484:	4604      	mov	r4, r0
 8007486:	460d      	mov	r5, r1
 8007488:	f7f9 f830 	bl	80004ec <__aeabi_dmul>
 800748c:	a34e      	add	r3, pc, #312	@ (adr r3, 80075c8 <__ieee754_pow+0x3e8>)
 800748e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007492:	4606      	mov	r6, r0
 8007494:	460f      	mov	r7, r1
 8007496:	4620      	mov	r0, r4
 8007498:	4629      	mov	r1, r5
 800749a:	f7f9 f827 	bl	80004ec <__aeabi_dmul>
 800749e:	2200      	movs	r2, #0
 80074a0:	4682      	mov	sl, r0
 80074a2:	468b      	mov	fp, r1
 80074a4:	4620      	mov	r0, r4
 80074a6:	4629      	mov	r1, r5
 80074a8:	4b4e      	ldr	r3, [pc, #312]	@ (80075e4 <__ieee754_pow+0x404>)
 80074aa:	f7f9 f81f 	bl	80004ec <__aeabi_dmul>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	a147      	add	r1, pc, #284	@ (adr r1, 80075d0 <__ieee754_pow+0x3f0>)
 80074b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074b8:	f7f8 fe60 	bl	800017c <__aeabi_dsub>
 80074bc:	4622      	mov	r2, r4
 80074be:	462b      	mov	r3, r5
 80074c0:	f7f9 f814 	bl	80004ec <__aeabi_dmul>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	2000      	movs	r0, #0
 80074ca:	4947      	ldr	r1, [pc, #284]	@ (80075e8 <__ieee754_pow+0x408>)
 80074cc:	f7f8 fe56 	bl	800017c <__aeabi_dsub>
 80074d0:	4622      	mov	r2, r4
 80074d2:	4680      	mov	r8, r0
 80074d4:	4689      	mov	r9, r1
 80074d6:	462b      	mov	r3, r5
 80074d8:	4620      	mov	r0, r4
 80074da:	4629      	mov	r1, r5
 80074dc:	f7f9 f806 	bl	80004ec <__aeabi_dmul>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	4640      	mov	r0, r8
 80074e6:	4649      	mov	r1, r9
 80074e8:	f7f9 f800 	bl	80004ec <__aeabi_dmul>
 80074ec:	a33a      	add	r3, pc, #232	@ (adr r3, 80075d8 <__ieee754_pow+0x3f8>)
 80074ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074f2:	f7f8 fffb 	bl	80004ec <__aeabi_dmul>
 80074f6:	4602      	mov	r2, r0
 80074f8:	460b      	mov	r3, r1
 80074fa:	4650      	mov	r0, sl
 80074fc:	4659      	mov	r1, fp
 80074fe:	f7f8 fe3d 	bl	800017c <__aeabi_dsub>
 8007502:	2400      	movs	r4, #0
 8007504:	4602      	mov	r2, r0
 8007506:	460b      	mov	r3, r1
 8007508:	4680      	mov	r8, r0
 800750a:	4689      	mov	r9, r1
 800750c:	4630      	mov	r0, r6
 800750e:	4639      	mov	r1, r7
 8007510:	f7f8 fe36 	bl	8000180 <__adddf3>
 8007514:	4632      	mov	r2, r6
 8007516:	463b      	mov	r3, r7
 8007518:	4620      	mov	r0, r4
 800751a:	460d      	mov	r5, r1
 800751c:	f7f8 fe2e 	bl	800017c <__aeabi_dsub>
 8007520:	4602      	mov	r2, r0
 8007522:	460b      	mov	r3, r1
 8007524:	4640      	mov	r0, r8
 8007526:	4649      	mov	r1, r9
 8007528:	f7f8 fe28 	bl	800017c <__aeabi_dsub>
 800752c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007530:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007534:	2300      	movs	r3, #0
 8007536:	9304      	str	r3, [sp, #16]
 8007538:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800753c:	4606      	mov	r6, r0
 800753e:	460f      	mov	r7, r1
 8007540:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007544:	465b      	mov	r3, fp
 8007546:	4652      	mov	r2, sl
 8007548:	f7f8 fe18 	bl	800017c <__aeabi_dsub>
 800754c:	4622      	mov	r2, r4
 800754e:	462b      	mov	r3, r5
 8007550:	f7f8 ffcc 	bl	80004ec <__aeabi_dmul>
 8007554:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007558:	4680      	mov	r8, r0
 800755a:	4689      	mov	r9, r1
 800755c:	4630      	mov	r0, r6
 800755e:	4639      	mov	r1, r7
 8007560:	f7f8 ffc4 	bl	80004ec <__aeabi_dmul>
 8007564:	4602      	mov	r2, r0
 8007566:	460b      	mov	r3, r1
 8007568:	4640      	mov	r0, r8
 800756a:	4649      	mov	r1, r9
 800756c:	f7f8 fe08 	bl	8000180 <__adddf3>
 8007570:	465b      	mov	r3, fp
 8007572:	4606      	mov	r6, r0
 8007574:	460f      	mov	r7, r1
 8007576:	4652      	mov	r2, sl
 8007578:	4620      	mov	r0, r4
 800757a:	4629      	mov	r1, r5
 800757c:	f7f8 ffb6 	bl	80004ec <__aeabi_dmul>
 8007580:	460b      	mov	r3, r1
 8007582:	4602      	mov	r2, r0
 8007584:	4680      	mov	r8, r0
 8007586:	4689      	mov	r9, r1
 8007588:	4630      	mov	r0, r6
 800758a:	4639      	mov	r1, r7
 800758c:	f7f8 fdf8 	bl	8000180 <__adddf3>
 8007590:	4b16      	ldr	r3, [pc, #88]	@ (80075ec <__ieee754_pow+0x40c>)
 8007592:	4604      	mov	r4, r0
 8007594:	4299      	cmp	r1, r3
 8007596:	460d      	mov	r5, r1
 8007598:	468b      	mov	fp, r1
 800759a:	f340 81fd 	ble.w	8007998 <__ieee754_pow+0x7b8>
 800759e:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 80075a2:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 80075a6:	4303      	orrs	r3, r0
 80075a8:	f000 81dc 	beq.w	8007964 <__ieee754_pow+0x784>
 80075ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	f7f9 fa0c 	bl	80009d0 <__aeabi_dcmplt>
 80075b8:	3800      	subs	r0, #0
 80075ba:	bf18      	it	ne
 80075bc:	2001      	movne	r0, #1
 80075be:	e71d      	b.n	80073fc <__ieee754_pow+0x21c>
 80075c0:	60000000 	.word	0x60000000
 80075c4:	3ff71547 	.word	0x3ff71547
 80075c8:	f85ddf44 	.word	0xf85ddf44
 80075cc:	3e54ae0b 	.word	0x3e54ae0b
 80075d0:	55555555 	.word	0x55555555
 80075d4:	3fd55555 	.word	0x3fd55555
 80075d8:	652b82fe 	.word	0x652b82fe
 80075dc:	3ff71547 	.word	0x3ff71547
 80075e0:	3ff00000 	.word	0x3ff00000
 80075e4:	3fd00000 	.word	0x3fd00000
 80075e8:	3fe00000 	.word	0x3fe00000
 80075ec:	408fffff 	.word	0x408fffff
 80075f0:	4ad3      	ldr	r2, [pc, #844]	@ (8007940 <__ieee754_pow+0x760>)
 80075f2:	4032      	ands	r2, r6
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	f040 817a 	bne.w	80078ee <__ieee754_pow+0x70e>
 80075fa:	4bd2      	ldr	r3, [pc, #840]	@ (8007944 <__ieee754_pow+0x764>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	f7f8 ff75 	bl	80004ec <__aeabi_dmul>
 8007602:	f06f 0434 	mvn.w	r4, #52	@ 0x34
 8007606:	460b      	mov	r3, r1
 8007608:	151a      	asrs	r2, r3, #20
 800760a:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800760e:	4422      	add	r2, r4
 8007610:	920a      	str	r2, [sp, #40]	@ 0x28
 8007612:	4acd      	ldr	r2, [pc, #820]	@ (8007948 <__ieee754_pow+0x768>)
 8007614:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007618:	f043 557f 	orr.w	r5, r3, #1069547520	@ 0x3fc00000
 800761c:	4293      	cmp	r3, r2
 800761e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007622:	dd08      	ble.n	8007636 <__ieee754_pow+0x456>
 8007624:	4ac9      	ldr	r2, [pc, #804]	@ (800794c <__ieee754_pow+0x76c>)
 8007626:	4293      	cmp	r3, r2
 8007628:	f340 8163 	ble.w	80078f2 <__ieee754_pow+0x712>
 800762c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800762e:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8007632:	3301      	adds	r3, #1
 8007634:	930a      	str	r3, [sp, #40]	@ 0x28
 8007636:	2600      	movs	r6, #0
 8007638:	00f3      	lsls	r3, r6, #3
 800763a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800763c:	4bc4      	ldr	r3, [pc, #784]	@ (8007950 <__ieee754_pow+0x770>)
 800763e:	4629      	mov	r1, r5
 8007640:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007644:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007648:	461a      	mov	r2, r3
 800764a:	e9cd 3408 	strd	r3, r4, [sp, #32]
 800764e:	4623      	mov	r3, r4
 8007650:	4682      	mov	sl, r0
 8007652:	f7f8 fd93 	bl	800017c <__aeabi_dsub>
 8007656:	4652      	mov	r2, sl
 8007658:	462b      	mov	r3, r5
 800765a:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800765e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007662:	f7f8 fd8d 	bl	8000180 <__adddf3>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	2000      	movs	r0, #0
 800766c:	49b9      	ldr	r1, [pc, #740]	@ (8007954 <__ieee754_pow+0x774>)
 800766e:	f7f9 f867 	bl	8000740 <__aeabi_ddiv>
 8007672:	4602      	mov	r2, r0
 8007674:	460b      	mov	r3, r1
 8007676:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800767a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800767e:	f7f8 ff35 	bl	80004ec <__aeabi_dmul>
 8007682:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007686:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800768a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800768e:	2300      	movs	r3, #0
 8007690:	2200      	movs	r2, #0
 8007692:	46ab      	mov	fp, r5
 8007694:	106d      	asrs	r5, r5, #1
 8007696:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800769a:	9304      	str	r3, [sp, #16]
 800769c:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80076a0:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80076a4:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 80076a8:	4640      	mov	r0, r8
 80076aa:	4649      	mov	r1, r9
 80076ac:	4614      	mov	r4, r2
 80076ae:	461d      	mov	r5, r3
 80076b0:	f7f8 ff1c 	bl	80004ec <__aeabi_dmul>
 80076b4:	4602      	mov	r2, r0
 80076b6:	460b      	mov	r3, r1
 80076b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80076bc:	f7f8 fd5e 	bl	800017c <__aeabi_dsub>
 80076c0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80076c4:	4606      	mov	r6, r0
 80076c6:	460f      	mov	r7, r1
 80076c8:	4620      	mov	r0, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	f7f8 fd56 	bl	800017c <__aeabi_dsub>
 80076d0:	4602      	mov	r2, r0
 80076d2:	460b      	mov	r3, r1
 80076d4:	4650      	mov	r0, sl
 80076d6:	4659      	mov	r1, fp
 80076d8:	f7f8 fd50 	bl	800017c <__aeabi_dsub>
 80076dc:	4642      	mov	r2, r8
 80076de:	464b      	mov	r3, r9
 80076e0:	f7f8 ff04 	bl	80004ec <__aeabi_dmul>
 80076e4:	4602      	mov	r2, r0
 80076e6:	460b      	mov	r3, r1
 80076e8:	4630      	mov	r0, r6
 80076ea:	4639      	mov	r1, r7
 80076ec:	f7f8 fd46 	bl	800017c <__aeabi_dsub>
 80076f0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80076f4:	f7f8 fefa 	bl	80004ec <__aeabi_dmul>
 80076f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076fc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007700:	4610      	mov	r0, r2
 8007702:	4619      	mov	r1, r3
 8007704:	f7f8 fef2 	bl	80004ec <__aeabi_dmul>
 8007708:	a37b      	add	r3, pc, #492	@ (adr r3, 80078f8 <__ieee754_pow+0x718>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	f7f8 feeb 	bl	80004ec <__aeabi_dmul>
 8007716:	a37a      	add	r3, pc, #488	@ (adr r3, 8007900 <__ieee754_pow+0x720>)
 8007718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771c:	f7f8 fd30 	bl	8000180 <__adddf3>
 8007720:	4622      	mov	r2, r4
 8007722:	462b      	mov	r3, r5
 8007724:	f7f8 fee2 	bl	80004ec <__aeabi_dmul>
 8007728:	a377      	add	r3, pc, #476	@ (adr r3, 8007908 <__ieee754_pow+0x728>)
 800772a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800772e:	f7f8 fd27 	bl	8000180 <__adddf3>
 8007732:	4622      	mov	r2, r4
 8007734:	462b      	mov	r3, r5
 8007736:	f7f8 fed9 	bl	80004ec <__aeabi_dmul>
 800773a:	a375      	add	r3, pc, #468	@ (adr r3, 8007910 <__ieee754_pow+0x730>)
 800773c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007740:	f7f8 fd1e 	bl	8000180 <__adddf3>
 8007744:	4622      	mov	r2, r4
 8007746:	462b      	mov	r3, r5
 8007748:	f7f8 fed0 	bl	80004ec <__aeabi_dmul>
 800774c:	a372      	add	r3, pc, #456	@ (adr r3, 8007918 <__ieee754_pow+0x738>)
 800774e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007752:	f7f8 fd15 	bl	8000180 <__adddf3>
 8007756:	4622      	mov	r2, r4
 8007758:	462b      	mov	r3, r5
 800775a:	f7f8 fec7 	bl	80004ec <__aeabi_dmul>
 800775e:	a370      	add	r3, pc, #448	@ (adr r3, 8007920 <__ieee754_pow+0x740>)
 8007760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007764:	f7f8 fd0c 	bl	8000180 <__adddf3>
 8007768:	4622      	mov	r2, r4
 800776a:	4606      	mov	r6, r0
 800776c:	460f      	mov	r7, r1
 800776e:	462b      	mov	r3, r5
 8007770:	4620      	mov	r0, r4
 8007772:	4629      	mov	r1, r5
 8007774:	f7f8 feba 	bl	80004ec <__aeabi_dmul>
 8007778:	4602      	mov	r2, r0
 800777a:	460b      	mov	r3, r1
 800777c:	4630      	mov	r0, r6
 800777e:	4639      	mov	r1, r7
 8007780:	f7f8 feb4 	bl	80004ec <__aeabi_dmul>
 8007784:	4604      	mov	r4, r0
 8007786:	460d      	mov	r5, r1
 8007788:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800778c:	4642      	mov	r2, r8
 800778e:	464b      	mov	r3, r9
 8007790:	f7f8 fcf6 	bl	8000180 <__adddf3>
 8007794:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007798:	f7f8 fea8 	bl	80004ec <__aeabi_dmul>
 800779c:	4622      	mov	r2, r4
 800779e:	462b      	mov	r3, r5
 80077a0:	f7f8 fcee 	bl	8000180 <__adddf3>
 80077a4:	4642      	mov	r2, r8
 80077a6:	4682      	mov	sl, r0
 80077a8:	468b      	mov	fp, r1
 80077aa:	464b      	mov	r3, r9
 80077ac:	4640      	mov	r0, r8
 80077ae:	4649      	mov	r1, r9
 80077b0:	f7f8 fe9c 	bl	80004ec <__aeabi_dmul>
 80077b4:	2200      	movs	r2, #0
 80077b6:	4b68      	ldr	r3, [pc, #416]	@ (8007958 <__ieee754_pow+0x778>)
 80077b8:	4606      	mov	r6, r0
 80077ba:	460f      	mov	r7, r1
 80077bc:	f7f8 fce0 	bl	8000180 <__adddf3>
 80077c0:	4652      	mov	r2, sl
 80077c2:	465b      	mov	r3, fp
 80077c4:	f7f8 fcdc 	bl	8000180 <__adddf3>
 80077c8:	2400      	movs	r4, #0
 80077ca:	460d      	mov	r5, r1
 80077cc:	4622      	mov	r2, r4
 80077ce:	460b      	mov	r3, r1
 80077d0:	4640      	mov	r0, r8
 80077d2:	4649      	mov	r1, r9
 80077d4:	f7f8 fe8a 	bl	80004ec <__aeabi_dmul>
 80077d8:	2200      	movs	r2, #0
 80077da:	4680      	mov	r8, r0
 80077dc:	4689      	mov	r9, r1
 80077de:	4620      	mov	r0, r4
 80077e0:	4629      	mov	r1, r5
 80077e2:	4b5d      	ldr	r3, [pc, #372]	@ (8007958 <__ieee754_pow+0x778>)
 80077e4:	f7f8 fcca 	bl	800017c <__aeabi_dsub>
 80077e8:	4632      	mov	r2, r6
 80077ea:	463b      	mov	r3, r7
 80077ec:	f7f8 fcc6 	bl	800017c <__aeabi_dsub>
 80077f0:	4602      	mov	r2, r0
 80077f2:	460b      	mov	r3, r1
 80077f4:	4650      	mov	r0, sl
 80077f6:	4659      	mov	r1, fp
 80077f8:	f7f8 fcc0 	bl	800017c <__aeabi_dsub>
 80077fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007800:	f7f8 fe74 	bl	80004ec <__aeabi_dmul>
 8007804:	4622      	mov	r2, r4
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800780e:	462b      	mov	r3, r5
 8007810:	f7f8 fe6c 	bl	80004ec <__aeabi_dmul>
 8007814:	4602      	mov	r2, r0
 8007816:	460b      	mov	r3, r1
 8007818:	4630      	mov	r0, r6
 800781a:	4639      	mov	r1, r7
 800781c:	f7f8 fcb0 	bl	8000180 <__adddf3>
 8007820:	2400      	movs	r4, #0
 8007822:	4606      	mov	r6, r0
 8007824:	460f      	mov	r7, r1
 8007826:	4602      	mov	r2, r0
 8007828:	460b      	mov	r3, r1
 800782a:	4640      	mov	r0, r8
 800782c:	4649      	mov	r1, r9
 800782e:	f7f8 fca7 	bl	8000180 <__adddf3>
 8007832:	a33d      	add	r3, pc, #244	@ (adr r3, 8007928 <__ieee754_pow+0x748>)
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	4620      	mov	r0, r4
 800783a:	460d      	mov	r5, r1
 800783c:	f7f8 fe56 	bl	80004ec <__aeabi_dmul>
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007848:	4620      	mov	r0, r4
 800784a:	4629      	mov	r1, r5
 800784c:	f7f8 fc96 	bl	800017c <__aeabi_dsub>
 8007850:	4602      	mov	r2, r0
 8007852:	460b      	mov	r3, r1
 8007854:	4630      	mov	r0, r6
 8007856:	4639      	mov	r1, r7
 8007858:	f7f8 fc90 	bl	800017c <__aeabi_dsub>
 800785c:	a334      	add	r3, pc, #208	@ (adr r3, 8007930 <__ieee754_pow+0x750>)
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	f7f8 fe43 	bl	80004ec <__aeabi_dmul>
 8007866:	a334      	add	r3, pc, #208	@ (adr r3, 8007938 <__ieee754_pow+0x758>)
 8007868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800786c:	4606      	mov	r6, r0
 800786e:	460f      	mov	r7, r1
 8007870:	4620      	mov	r0, r4
 8007872:	4629      	mov	r1, r5
 8007874:	f7f8 fe3a 	bl	80004ec <__aeabi_dmul>
 8007878:	4602      	mov	r2, r0
 800787a:	460b      	mov	r3, r1
 800787c:	4630      	mov	r0, r6
 800787e:	4639      	mov	r1, r7
 8007880:	f7f8 fc7e 	bl	8000180 <__adddf3>
 8007884:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007886:	4b35      	ldr	r3, [pc, #212]	@ (800795c <__ieee754_pow+0x77c>)
 8007888:	2400      	movs	r4, #0
 800788a:	4413      	add	r3, r2
 800788c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007890:	f7f8 fc76 	bl	8000180 <__adddf3>
 8007894:	4682      	mov	sl, r0
 8007896:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007898:	468b      	mov	fp, r1
 800789a:	f7f8 fdbd 	bl	8000418 <__aeabi_i2d>
 800789e:	4606      	mov	r6, r0
 80078a0:	460f      	mov	r7, r1
 80078a2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80078a4:	4b2e      	ldr	r3, [pc, #184]	@ (8007960 <__ieee754_pow+0x780>)
 80078a6:	4413      	add	r3, r2
 80078a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80078ac:	4652      	mov	r2, sl
 80078ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80078b2:	465b      	mov	r3, fp
 80078b4:	f7f8 fc64 	bl	8000180 <__adddf3>
 80078b8:	4642      	mov	r2, r8
 80078ba:	464b      	mov	r3, r9
 80078bc:	f7f8 fc60 	bl	8000180 <__adddf3>
 80078c0:	4632      	mov	r2, r6
 80078c2:	463b      	mov	r3, r7
 80078c4:	f7f8 fc5c 	bl	8000180 <__adddf3>
 80078c8:	4632      	mov	r2, r6
 80078ca:	463b      	mov	r3, r7
 80078cc:	4620      	mov	r0, r4
 80078ce:	460d      	mov	r5, r1
 80078d0:	f7f8 fc54 	bl	800017c <__aeabi_dsub>
 80078d4:	4642      	mov	r2, r8
 80078d6:	464b      	mov	r3, r9
 80078d8:	f7f8 fc50 	bl	800017c <__aeabi_dsub>
 80078dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80078e0:	f7f8 fc4c 	bl	800017c <__aeabi_dsub>
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	4650      	mov	r0, sl
 80078ea:	4659      	mov	r1, fp
 80078ec:	e61c      	b.n	8007528 <__ieee754_pow+0x348>
 80078ee:	2400      	movs	r4, #0
 80078f0:	e68a      	b.n	8007608 <__ieee754_pow+0x428>
 80078f2:	2601      	movs	r6, #1
 80078f4:	e6a0      	b.n	8007638 <__ieee754_pow+0x458>
 80078f6:	bf00      	nop
 80078f8:	4a454eef 	.word	0x4a454eef
 80078fc:	3fca7e28 	.word	0x3fca7e28
 8007900:	93c9db65 	.word	0x93c9db65
 8007904:	3fcd864a 	.word	0x3fcd864a
 8007908:	a91d4101 	.word	0xa91d4101
 800790c:	3fd17460 	.word	0x3fd17460
 8007910:	518f264d 	.word	0x518f264d
 8007914:	3fd55555 	.word	0x3fd55555
 8007918:	db6fabff 	.word	0xdb6fabff
 800791c:	3fdb6db6 	.word	0x3fdb6db6
 8007920:	33333303 	.word	0x33333303
 8007924:	3fe33333 	.word	0x3fe33333
 8007928:	e0000000 	.word	0xe0000000
 800792c:	3feec709 	.word	0x3feec709
 8007930:	dc3a03fd 	.word	0xdc3a03fd
 8007934:	3feec709 	.word	0x3feec709
 8007938:	145b01f5 	.word	0x145b01f5
 800793c:	be3e2fe0 	.word	0xbe3e2fe0
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	43400000 	.word	0x43400000
 8007948:	0003988e 	.word	0x0003988e
 800794c:	000bb679 	.word	0x000bb679
 8007950:	08009620 	.word	0x08009620
 8007954:	3ff00000 	.word	0x3ff00000
 8007958:	40080000 	.word	0x40080000
 800795c:	08009600 	.word	0x08009600
 8007960:	08009610 	.word	0x08009610
 8007964:	a39a      	add	r3, pc, #616	@ (adr r3, 8007bd0 <__ieee754_pow+0x9f0>)
 8007966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796a:	4630      	mov	r0, r6
 800796c:	4639      	mov	r1, r7
 800796e:	f7f8 fc07 	bl	8000180 <__adddf3>
 8007972:	4642      	mov	r2, r8
 8007974:	e9cd 0100 	strd	r0, r1, [sp]
 8007978:	464b      	mov	r3, r9
 800797a:	4620      	mov	r0, r4
 800797c:	4629      	mov	r1, r5
 800797e:	f7f8 fbfd 	bl	800017c <__aeabi_dsub>
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	e9dd 0100 	ldrd	r0, r1, [sp]
 800798a:	f7f9 f83f 	bl	8000a0c <__aeabi_dcmpgt>
 800798e:	2800      	cmp	r0, #0
 8007990:	f47f ae0c 	bne.w	80075ac <__ieee754_pow+0x3cc>
 8007994:	4ba0      	ldr	r3, [pc, #640]	@ (8007c18 <__ieee754_pow+0xa38>)
 8007996:	e022      	b.n	80079de <__ieee754_pow+0x7fe>
 8007998:	4ca0      	ldr	r4, [pc, #640]	@ (8007c1c <__ieee754_pow+0xa3c>)
 800799a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800799e:	42a3      	cmp	r3, r4
 80079a0:	d919      	bls.n	80079d6 <__ieee754_pow+0x7f6>
 80079a2:	4b9f      	ldr	r3, [pc, #636]	@ (8007c20 <__ieee754_pow+0xa40>)
 80079a4:	440b      	add	r3, r1
 80079a6:	4303      	orrs	r3, r0
 80079a8:	d009      	beq.n	80079be <__ieee754_pow+0x7de>
 80079aa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2300      	movs	r3, #0
 80079b2:	f7f9 f80d 	bl	80009d0 <__aeabi_dcmplt>
 80079b6:	3800      	subs	r0, #0
 80079b8:	bf18      	it	ne
 80079ba:	2001      	movne	r0, #1
 80079bc:	e527      	b.n	800740e <__ieee754_pow+0x22e>
 80079be:	4642      	mov	r2, r8
 80079c0:	464b      	mov	r3, r9
 80079c2:	f7f8 fbdb 	bl	800017c <__aeabi_dsub>
 80079c6:	4632      	mov	r2, r6
 80079c8:	463b      	mov	r3, r7
 80079ca:	f7f9 f815 	bl	80009f8 <__aeabi_dcmpge>
 80079ce:	2800      	cmp	r0, #0
 80079d0:	d1eb      	bne.n	80079aa <__ieee754_pow+0x7ca>
 80079d2:	4b94      	ldr	r3, [pc, #592]	@ (8007c24 <__ieee754_pow+0xa44>)
 80079d4:	e003      	b.n	80079de <__ieee754_pow+0x7fe>
 80079d6:	4a94      	ldr	r2, [pc, #592]	@ (8007c28 <__ieee754_pow+0xa48>)
 80079d8:	4293      	cmp	r3, r2
 80079da:	f240 80e1 	bls.w	8007ba0 <__ieee754_pow+0x9c0>
 80079de:	f44f 1a80 	mov.w	sl, #1048576	@ 0x100000
 80079e2:	151b      	asrs	r3, r3, #20
 80079e4:	f2a3 33fe 	subw	r3, r3, #1022	@ 0x3fe
 80079e8:	fa4a fa03 	asr.w	sl, sl, r3
 80079ec:	44da      	add	sl, fp
 80079ee:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80079f2:	488e      	ldr	r0, [pc, #568]	@ (8007c2c <__ieee754_pow+0xa4c>)
 80079f4:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 80079f8:	4108      	asrs	r0, r1
 80079fa:	ea00 030a 	and.w	r3, r0, sl
 80079fe:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8007a02:	f1c1 0114 	rsb	r1, r1, #20
 8007a06:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8007a0a:	4640      	mov	r0, r8
 8007a0c:	fa4a fa01 	asr.w	sl, sl, r1
 8007a10:	f1bb 0f00 	cmp.w	fp, #0
 8007a14:	4649      	mov	r1, r9
 8007a16:	f04f 0200 	mov.w	r2, #0
 8007a1a:	bfb8      	it	lt
 8007a1c:	f1ca 0a00 	rsblt	sl, sl, #0
 8007a20:	f7f8 fbac 	bl	800017c <__aeabi_dsub>
 8007a24:	4680      	mov	r8, r0
 8007a26:	4689      	mov	r9, r1
 8007a28:	2400      	movs	r4, #0
 8007a2a:	4632      	mov	r2, r6
 8007a2c:	463b      	mov	r3, r7
 8007a2e:	4640      	mov	r0, r8
 8007a30:	4649      	mov	r1, r9
 8007a32:	f7f8 fba5 	bl	8000180 <__adddf3>
 8007a36:	a368      	add	r3, pc, #416	@ (adr r3, 8007bd8 <__ieee754_pow+0x9f8>)
 8007a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3c:	4620      	mov	r0, r4
 8007a3e:	460d      	mov	r5, r1
 8007a40:	f7f8 fd54 	bl	80004ec <__aeabi_dmul>
 8007a44:	4642      	mov	r2, r8
 8007a46:	464b      	mov	r3, r9
 8007a48:	e9cd 0100 	strd	r0, r1, [sp]
 8007a4c:	4620      	mov	r0, r4
 8007a4e:	4629      	mov	r1, r5
 8007a50:	f7f8 fb94 	bl	800017c <__aeabi_dsub>
 8007a54:	4602      	mov	r2, r0
 8007a56:	460b      	mov	r3, r1
 8007a58:	4630      	mov	r0, r6
 8007a5a:	4639      	mov	r1, r7
 8007a5c:	f7f8 fb8e 	bl	800017c <__aeabi_dsub>
 8007a60:	a35f      	add	r3, pc, #380	@ (adr r3, 8007be0 <__ieee754_pow+0xa00>)
 8007a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a66:	f7f8 fd41 	bl	80004ec <__aeabi_dmul>
 8007a6a:	a35f      	add	r3, pc, #380	@ (adr r3, 8007be8 <__ieee754_pow+0xa08>)
 8007a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a70:	4680      	mov	r8, r0
 8007a72:	4689      	mov	r9, r1
 8007a74:	4620      	mov	r0, r4
 8007a76:	4629      	mov	r1, r5
 8007a78:	f7f8 fd38 	bl	80004ec <__aeabi_dmul>
 8007a7c:	4602      	mov	r2, r0
 8007a7e:	460b      	mov	r3, r1
 8007a80:	4640      	mov	r0, r8
 8007a82:	4649      	mov	r1, r9
 8007a84:	f7f8 fb7c 	bl	8000180 <__adddf3>
 8007a88:	4604      	mov	r4, r0
 8007a8a:	460d      	mov	r5, r1
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	460b      	mov	r3, r1
 8007a90:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a94:	f7f8 fb74 	bl	8000180 <__adddf3>
 8007a98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007a9c:	4680      	mov	r8, r0
 8007a9e:	4689      	mov	r9, r1
 8007aa0:	f7f8 fb6c 	bl	800017c <__aeabi_dsub>
 8007aa4:	4602      	mov	r2, r0
 8007aa6:	460b      	mov	r3, r1
 8007aa8:	4620      	mov	r0, r4
 8007aaa:	4629      	mov	r1, r5
 8007aac:	f7f8 fb66 	bl	800017c <__aeabi_dsub>
 8007ab0:	4642      	mov	r2, r8
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	460f      	mov	r7, r1
 8007ab6:	464b      	mov	r3, r9
 8007ab8:	4640      	mov	r0, r8
 8007aba:	4649      	mov	r1, r9
 8007abc:	f7f8 fd16 	bl	80004ec <__aeabi_dmul>
 8007ac0:	a34b      	add	r3, pc, #300	@ (adr r3, 8007bf0 <__ieee754_pow+0xa10>)
 8007ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac6:	4604      	mov	r4, r0
 8007ac8:	460d      	mov	r5, r1
 8007aca:	f7f8 fd0f 	bl	80004ec <__aeabi_dmul>
 8007ace:	a34a      	add	r3, pc, #296	@ (adr r3, 8007bf8 <__ieee754_pow+0xa18>)
 8007ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ad4:	f7f8 fb52 	bl	800017c <__aeabi_dsub>
 8007ad8:	4622      	mov	r2, r4
 8007ada:	462b      	mov	r3, r5
 8007adc:	f7f8 fd06 	bl	80004ec <__aeabi_dmul>
 8007ae0:	a347      	add	r3, pc, #284	@ (adr r3, 8007c00 <__ieee754_pow+0xa20>)
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f7f8 fb4b 	bl	8000180 <__adddf3>
 8007aea:	4622      	mov	r2, r4
 8007aec:	462b      	mov	r3, r5
 8007aee:	f7f8 fcfd 	bl	80004ec <__aeabi_dmul>
 8007af2:	a345      	add	r3, pc, #276	@ (adr r3, 8007c08 <__ieee754_pow+0xa28>)
 8007af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af8:	f7f8 fb40 	bl	800017c <__aeabi_dsub>
 8007afc:	4622      	mov	r2, r4
 8007afe:	462b      	mov	r3, r5
 8007b00:	f7f8 fcf4 	bl	80004ec <__aeabi_dmul>
 8007b04:	a342      	add	r3, pc, #264	@ (adr r3, 8007c10 <__ieee754_pow+0xa30>)
 8007b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b0a:	f7f8 fb39 	bl	8000180 <__adddf3>
 8007b0e:	4622      	mov	r2, r4
 8007b10:	462b      	mov	r3, r5
 8007b12:	f7f8 fceb 	bl	80004ec <__aeabi_dmul>
 8007b16:	4602      	mov	r2, r0
 8007b18:	460b      	mov	r3, r1
 8007b1a:	4640      	mov	r0, r8
 8007b1c:	4649      	mov	r1, r9
 8007b1e:	f7f8 fb2d 	bl	800017c <__aeabi_dsub>
 8007b22:	4604      	mov	r4, r0
 8007b24:	460d      	mov	r5, r1
 8007b26:	4602      	mov	r2, r0
 8007b28:	460b      	mov	r3, r1
 8007b2a:	4640      	mov	r0, r8
 8007b2c:	4649      	mov	r1, r9
 8007b2e:	f7f8 fcdd 	bl	80004ec <__aeabi_dmul>
 8007b32:	2200      	movs	r2, #0
 8007b34:	e9cd 0100 	strd	r0, r1, [sp]
 8007b38:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007b3c:	4620      	mov	r0, r4
 8007b3e:	4629      	mov	r1, r5
 8007b40:	f7f8 fb1c 	bl	800017c <__aeabi_dsub>
 8007b44:	4602      	mov	r2, r0
 8007b46:	460b      	mov	r3, r1
 8007b48:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b4c:	f7f8 fdf8 	bl	8000740 <__aeabi_ddiv>
 8007b50:	4632      	mov	r2, r6
 8007b52:	4604      	mov	r4, r0
 8007b54:	460d      	mov	r5, r1
 8007b56:	463b      	mov	r3, r7
 8007b58:	4640      	mov	r0, r8
 8007b5a:	4649      	mov	r1, r9
 8007b5c:	f7f8 fcc6 	bl	80004ec <__aeabi_dmul>
 8007b60:	4632      	mov	r2, r6
 8007b62:	463b      	mov	r3, r7
 8007b64:	f7f8 fb0c 	bl	8000180 <__adddf3>
 8007b68:	4602      	mov	r2, r0
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	4620      	mov	r0, r4
 8007b6e:	4629      	mov	r1, r5
 8007b70:	f7f8 fb04 	bl	800017c <__aeabi_dsub>
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	f7f8 fb00 	bl	800017c <__aeabi_dsub>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	2000      	movs	r0, #0
 8007b82:	492b      	ldr	r1, [pc, #172]	@ (8007c30 <__ieee754_pow+0xa50>)
 8007b84:	f7f8 fafa 	bl	800017c <__aeabi_dsub>
 8007b88:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007b8c:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
 8007b90:	da09      	bge.n	8007ba6 <__ieee754_pow+0x9c6>
 8007b92:	4652      	mov	r2, sl
 8007b94:	f000 f854 	bl	8007c40 <scalbn>
 8007b98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b9c:	f7ff bb89 	b.w	80072b2 <__ieee754_pow+0xd2>
 8007ba0:	f8dd a010 	ldr.w	sl, [sp, #16]
 8007ba4:	e740      	b.n	8007a28 <__ieee754_pow+0x848>
 8007ba6:	4621      	mov	r1, r4
 8007ba8:	e7f6      	b.n	8007b98 <__ieee754_pow+0x9b8>
 8007baa:	2000      	movs	r0, #0
 8007bac:	4920      	ldr	r1, [pc, #128]	@ (8007c30 <__ieee754_pow+0xa50>)
 8007bae:	f7ff bb35 	b.w	800721c <__ieee754_pow+0x3c>
 8007bb2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bb6:	f7ff bb31 	b.w	800721c <__ieee754_pow+0x3c>
 8007bba:	4650      	mov	r0, sl
 8007bbc:	4659      	mov	r1, fp
 8007bbe:	f7ff bb2d 	b.w	800721c <__ieee754_pow+0x3c>
 8007bc2:	460c      	mov	r4, r1
 8007bc4:	f7ff bb87 	b.w	80072d6 <__ieee754_pow+0xf6>
 8007bc8:	2400      	movs	r4, #0
 8007bca:	f7ff bb69 	b.w	80072a0 <__ieee754_pow+0xc0>
 8007bce:	bf00      	nop
 8007bd0:	652b82fe 	.word	0x652b82fe
 8007bd4:	3c971547 	.word	0x3c971547
 8007bd8:	00000000 	.word	0x00000000
 8007bdc:	3fe62e43 	.word	0x3fe62e43
 8007be0:	fefa39ef 	.word	0xfefa39ef
 8007be4:	3fe62e42 	.word	0x3fe62e42
 8007be8:	0ca86c39 	.word	0x0ca86c39
 8007bec:	be205c61 	.word	0xbe205c61
 8007bf0:	72bea4d0 	.word	0x72bea4d0
 8007bf4:	3e663769 	.word	0x3e663769
 8007bf8:	c5d26bf1 	.word	0xc5d26bf1
 8007bfc:	3ebbbd41 	.word	0x3ebbbd41
 8007c00:	af25de2c 	.word	0xaf25de2c
 8007c04:	3f11566a 	.word	0x3f11566a
 8007c08:	16bebd93 	.word	0x16bebd93
 8007c0c:	3f66c16c 	.word	0x3f66c16c
 8007c10:	5555553e 	.word	0x5555553e
 8007c14:	3fc55555 	.word	0x3fc55555
 8007c18:	40900000 	.word	0x40900000
 8007c1c:	4090cbff 	.word	0x4090cbff
 8007c20:	3f6f3400 	.word	0x3f6f3400
 8007c24:	4090cc00 	.word	0x4090cc00
 8007c28:	3fe00000 	.word	0x3fe00000
 8007c2c:	fff00000 	.word	0xfff00000
 8007c30:	3ff00000 	.word	0x3ff00000

08007c34 <fabs>:
 8007c34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4770      	bx	lr
 8007c3c:	0000      	movs	r0, r0
	...

08007c40 <scalbn>:
 8007c40:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8007c44:	4616      	mov	r6, r2
 8007c46:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c4a:	4683      	mov	fp, r0
 8007c4c:	468c      	mov	ip, r1
 8007c4e:	460b      	mov	r3, r1
 8007c50:	b982      	cbnz	r2, 8007c74 <scalbn+0x34>
 8007c52:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007c56:	4303      	orrs	r3, r0
 8007c58:	d035      	beq.n	8007cc6 <scalbn+0x86>
 8007c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8007d10 <scalbn+0xd0>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f7f8 fc45 	bl	80004ec <__aeabi_dmul>
 8007c62:	4b2c      	ldr	r3, [pc, #176]	@ (8007d14 <scalbn+0xd4>)
 8007c64:	4683      	mov	fp, r0
 8007c66:	429e      	cmp	r6, r3
 8007c68:	468c      	mov	ip, r1
 8007c6a:	da0d      	bge.n	8007c88 <scalbn+0x48>
 8007c6c:	a324      	add	r3, pc, #144	@ (adr r3, 8007d00 <scalbn+0xc0>)
 8007c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c72:	e019      	b.n	8007ca8 <scalbn+0x68>
 8007c74:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007c78:	42ba      	cmp	r2, r7
 8007c7a:	d109      	bne.n	8007c90 <scalbn+0x50>
 8007c7c:	4602      	mov	r2, r0
 8007c7e:	f7f8 fa7f 	bl	8000180 <__adddf3>
 8007c82:	4683      	mov	fp, r0
 8007c84:	468c      	mov	ip, r1
 8007c86:	e01e      	b.n	8007cc6 <scalbn+0x86>
 8007c88:	460b      	mov	r3, r1
 8007c8a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007c8e:	3a36      	subs	r2, #54	@ 0x36
 8007c90:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8007c94:	428e      	cmp	r6, r1
 8007c96:	dd0a      	ble.n	8007cae <scalbn+0x6e>
 8007c98:	a31b      	add	r3, pc, #108	@ (adr r3, 8007d08 <scalbn+0xc8>)
 8007c9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c9e:	4665      	mov	r5, ip
 8007ca0:	f363 051e 	bfi	r5, r3, #0, #31
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	481c      	ldr	r0, [pc, #112]	@ (8007d18 <scalbn+0xd8>)
 8007ca8:	f7f8 fc20 	bl	80004ec <__aeabi_dmul>
 8007cac:	e7e9      	b.n	8007c82 <scalbn+0x42>
 8007cae:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8007cb2:	4432      	add	r2, r6
 8007cb4:	428a      	cmp	r2, r1
 8007cb6:	dcef      	bgt.n	8007c98 <scalbn+0x58>
 8007cb8:	2a00      	cmp	r2, #0
 8007cba:	dd08      	ble.n	8007cce <scalbn+0x8e>
 8007cbc:	f36f 531e 	bfc	r3, #20, #11
 8007cc0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cc4:	46ac      	mov	ip, r5
 8007cc6:	4658      	mov	r0, fp
 8007cc8:	4661      	mov	r1, ip
 8007cca:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007cce:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8007cd2:	da09      	bge.n	8007ce8 <scalbn+0xa8>
 8007cd4:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8007cd8:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8007cdc:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8007ce0:	480e      	ldr	r0, [pc, #56]	@ (8007d1c <scalbn+0xdc>)
 8007ce2:	f041 011f 	orr.w	r1, r1, #31
 8007ce6:	e7c1      	b.n	8007c6c <scalbn+0x2c>
 8007ce8:	3236      	adds	r2, #54	@ 0x36
 8007cea:	f36f 531e 	bfc	r3, #20, #11
 8007cee:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007cf2:	4658      	mov	r0, fp
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	4b09      	ldr	r3, [pc, #36]	@ (8007d20 <scalbn+0xe0>)
 8007cfa:	e7d5      	b.n	8007ca8 <scalbn+0x68>
 8007cfc:	f3af 8000 	nop.w
 8007d00:	c2f8f359 	.word	0xc2f8f359
 8007d04:	01a56e1f 	.word	0x01a56e1f
 8007d08:	8800759c 	.word	0x8800759c
 8007d0c:	7e37e43c 	.word	0x7e37e43c
 8007d10:	43500000 	.word	0x43500000
 8007d14:	ffff3cb0 	.word	0xffff3cb0
 8007d18:	8800759c 	.word	0x8800759c
 8007d1c:	c2f8f359 	.word	0xc2f8f359
 8007d20:	3c900000 	.word	0x3c900000

08007d24 <with_errno>:
 8007d24:	b570      	push	{r4, r5, r6, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	460d      	mov	r5, r1
 8007d2a:	4616      	mov	r6, r2
 8007d2c:	f000 f980 	bl	8008030 <__errno>
 8007d30:	4629      	mov	r1, r5
 8007d32:	6006      	str	r6, [r0, #0]
 8007d34:	4620      	mov	r0, r4
 8007d36:	bd70      	pop	{r4, r5, r6, pc}

08007d38 <xflow>:
 8007d38:	b513      	push	{r0, r1, r4, lr}
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	b10c      	cbz	r4, 8007d46 <xflow+0xe>
 8007d42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d46:	e9cd 2300 	strd	r2, r3, [sp]
 8007d4a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d4e:	f7f8 fbcd 	bl	80004ec <__aeabi_dmul>
 8007d52:	2222      	movs	r2, #34	@ 0x22
 8007d54:	b002      	add	sp, #8
 8007d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d5a:	f7ff bfe3 	b.w	8007d24 <with_errno>

08007d5e <__math_uflow>:
 8007d5e:	2200      	movs	r2, #0
 8007d60:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8007d64:	f7ff bfe8 	b.w	8007d38 <xflow>

08007d68 <__math_oflow>:
 8007d68:	2200      	movs	r2, #0
 8007d6a:	f04f 43e0 	mov.w	r3, #1879048192	@ 0x70000000
 8007d6e:	f7ff bfe3 	b.w	8007d38 <xflow>
	...

08007d74 <__ieee754_sqrt>:
 8007d74:	4a65      	ldr	r2, [pc, #404]	@ (8007f0c <__ieee754_sqrt+0x198>)
 8007d76:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	438a      	bics	r2, r1
 8007d7c:	4606      	mov	r6, r0
 8007d7e:	460f      	mov	r7, r1
 8007d80:	460b      	mov	r3, r1
 8007d82:	4604      	mov	r4, r0
 8007d84:	d10e      	bne.n	8007da4 <__ieee754_sqrt+0x30>
 8007d86:	4602      	mov	r2, r0
 8007d88:	f7f8 fbb0 	bl	80004ec <__aeabi_dmul>
 8007d8c:	4602      	mov	r2, r0
 8007d8e:	460b      	mov	r3, r1
 8007d90:	4630      	mov	r0, r6
 8007d92:	4639      	mov	r1, r7
 8007d94:	f7f8 f9f4 	bl	8000180 <__adddf3>
 8007d98:	4606      	mov	r6, r0
 8007d9a:	460f      	mov	r7, r1
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	4639      	mov	r1, r7
 8007da0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da4:	2900      	cmp	r1, #0
 8007da6:	dc0c      	bgt.n	8007dc2 <__ieee754_sqrt+0x4e>
 8007da8:	f021 4200 	bic.w	r2, r1, #2147483648	@ 0x80000000
 8007dac:	4302      	orrs	r2, r0
 8007dae:	d0f5      	beq.n	8007d9c <__ieee754_sqrt+0x28>
 8007db0:	b189      	cbz	r1, 8007dd6 <__ieee754_sqrt+0x62>
 8007db2:	4602      	mov	r2, r0
 8007db4:	f7f8 f9e2 	bl	800017c <__aeabi_dsub>
 8007db8:	4602      	mov	r2, r0
 8007dba:	460b      	mov	r3, r1
 8007dbc:	f7f8 fcc0 	bl	8000740 <__aeabi_ddiv>
 8007dc0:	e7ea      	b.n	8007d98 <__ieee754_sqrt+0x24>
 8007dc2:	150a      	asrs	r2, r1, #20
 8007dc4:	d115      	bne.n	8007df2 <__ieee754_sqrt+0x7e>
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	e009      	b.n	8007dde <__ieee754_sqrt+0x6a>
 8007dca:	0ae3      	lsrs	r3, r4, #11
 8007dcc:	3a15      	subs	r2, #21
 8007dce:	0564      	lsls	r4, r4, #21
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d0fa      	beq.n	8007dca <__ieee754_sqrt+0x56>
 8007dd4:	e7f7      	b.n	8007dc6 <__ieee754_sqrt+0x52>
 8007dd6:	460a      	mov	r2, r1
 8007dd8:	e7fa      	b.n	8007dd0 <__ieee754_sqrt+0x5c>
 8007dda:	005b      	lsls	r3, r3, #1
 8007ddc:	3101      	adds	r1, #1
 8007dde:	02d8      	lsls	r0, r3, #11
 8007de0:	d5fb      	bpl.n	8007dda <__ieee754_sqrt+0x66>
 8007de2:	1e48      	subs	r0, r1, #1
 8007de4:	1a12      	subs	r2, r2, r0
 8007de6:	f1c1 0020 	rsb	r0, r1, #32
 8007dea:	fa24 f000 	lsr.w	r0, r4, r0
 8007dee:	4303      	orrs	r3, r0
 8007df0:	408c      	lsls	r4, r1
 8007df2:	2700      	movs	r7, #0
 8007df4:	f2a2 38ff 	subw	r8, r2, #1023	@ 0x3ff
 8007df8:	2116      	movs	r1, #22
 8007dfa:	07d2      	lsls	r2, r2, #31
 8007dfc:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8007e00:	463a      	mov	r2, r7
 8007e02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007e0a:	bf5c      	itt	pl
 8007e0c:	005b      	lslpl	r3, r3, #1
 8007e0e:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 8007e12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007e16:	bf58      	it	pl
 8007e18:	0064      	lslpl	r4, r4, #1
 8007e1a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8007e1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007e22:	0064      	lsls	r4, r4, #1
 8007e24:	1815      	adds	r5, r2, r0
 8007e26:	429d      	cmp	r5, r3
 8007e28:	bfde      	ittt	le
 8007e2a:	182a      	addle	r2, r5, r0
 8007e2c:	1b5b      	suble	r3, r3, r5
 8007e2e:	183f      	addle	r7, r7, r0
 8007e30:	0fe5      	lsrs	r5, r4, #31
 8007e32:	3901      	subs	r1, #1
 8007e34:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8007e38:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e3c:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007e40:	d1f0      	bne.n	8007e24 <__ieee754_sqrt+0xb0>
 8007e42:	460d      	mov	r5, r1
 8007e44:	2620      	movs	r6, #32
 8007e46:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	eb00 0c01 	add.w	ip, r0, r1
 8007e50:	dc02      	bgt.n	8007e58 <__ieee754_sqrt+0xe4>
 8007e52:	d113      	bne.n	8007e7c <__ieee754_sqrt+0x108>
 8007e54:	45a4      	cmp	ip, r4
 8007e56:	d811      	bhi.n	8007e7c <__ieee754_sqrt+0x108>
 8007e58:	f1bc 0f00 	cmp.w	ip, #0
 8007e5c:	eb0c 0100 	add.w	r1, ip, r0
 8007e60:	da3e      	bge.n	8007ee0 <__ieee754_sqrt+0x16c>
 8007e62:	2900      	cmp	r1, #0
 8007e64:	db3c      	blt.n	8007ee0 <__ieee754_sqrt+0x16c>
 8007e66:	f102 0e01 	add.w	lr, r2, #1
 8007e6a:	1a9b      	subs	r3, r3, r2
 8007e6c:	4672      	mov	r2, lr
 8007e6e:	45a4      	cmp	ip, r4
 8007e70:	bf88      	it	hi
 8007e72:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8007e76:	eba4 040c 	sub.w	r4, r4, ip
 8007e7a:	4405      	add	r5, r0
 8007e7c:	ea4f 7cd4 	mov.w	ip, r4, lsr #31
 8007e80:	3e01      	subs	r6, #1
 8007e82:	eb0c 0343 	add.w	r3, ip, r3, lsl #1
 8007e86:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8007e8a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8007e8e:	d1dc      	bne.n	8007e4a <__ieee754_sqrt+0xd6>
 8007e90:	431c      	orrs	r4, r3
 8007e92:	d01a      	beq.n	8007eca <__ieee754_sqrt+0x156>
 8007e94:	4c1e      	ldr	r4, [pc, #120]	@ (8007f10 <__ieee754_sqrt+0x19c>)
 8007e96:	f8df 907c 	ldr.w	r9, [pc, #124]	@ 8007f14 <__ieee754_sqrt+0x1a0>
 8007e9a:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007e9e:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ea2:	f7f8 f96b 	bl	800017c <__aeabi_dsub>
 8007ea6:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4650      	mov	r0, sl
 8007eb0:	4659      	mov	r1, fp
 8007eb2:	f7f8 fd97 	bl	80009e4 <__aeabi_dcmple>
 8007eb6:	b140      	cbz	r0, 8007eca <__ieee754_sqrt+0x156>
 8007eb8:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007ebc:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007ec0:	f1b5 3fff 	cmp.w	r5, #4294967295
 8007ec4:	d10e      	bne.n	8007ee4 <__ieee754_sqrt+0x170>
 8007ec6:	4635      	mov	r5, r6
 8007ec8:	3701      	adds	r7, #1
 8007eca:	107b      	asrs	r3, r7, #1
 8007ecc:	f103 537f 	add.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ed0:	f503 1300 	add.w	r3, r3, #2097152	@ 0x200000
 8007ed4:	eb03 5108 	add.w	r1, r3, r8, lsl #20
 8007ed8:	086b      	lsrs	r3, r5, #1
 8007eda:	ea43 70c7 	orr.w	r0, r3, r7, lsl #31
 8007ede:	e75b      	b.n	8007d98 <__ieee754_sqrt+0x24>
 8007ee0:	4696      	mov	lr, r2
 8007ee2:	e7c2      	b.n	8007e6a <__ieee754_sqrt+0xf6>
 8007ee4:	f7f8 f94c 	bl	8000180 <__adddf3>
 8007ee8:	e9d4 ab00 	ldrd	sl, fp, [r4]
 8007eec:	4602      	mov	r2, r0
 8007eee:	460b      	mov	r3, r1
 8007ef0:	4650      	mov	r0, sl
 8007ef2:	4659      	mov	r1, fp
 8007ef4:	f7f8 fd6c 	bl	80009d0 <__aeabi_dcmplt>
 8007ef8:	b120      	cbz	r0, 8007f04 <__ieee754_sqrt+0x190>
 8007efa:	1cab      	adds	r3, r5, #2
 8007efc:	bf08      	it	eq
 8007efe:	3701      	addeq	r7, #1
 8007f00:	3502      	adds	r5, #2
 8007f02:	e7e2      	b.n	8007eca <__ieee754_sqrt+0x156>
 8007f04:	1c6b      	adds	r3, r5, #1
 8007f06:	f023 0501 	bic.w	r5, r3, #1
 8007f0a:	e7de      	b.n	8007eca <__ieee754_sqrt+0x156>
 8007f0c:	7ff00000 	.word	0x7ff00000
 8007f10:	08009638 	.word	0x08009638
 8007f14:	08009630 	.word	0x08009630

08007f18 <siprintf>:
 8007f18:	b40e      	push	{r1, r2, r3}
 8007f1a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007f1e:	b510      	push	{r4, lr}
 8007f20:	2400      	movs	r4, #0
 8007f22:	b09d      	sub	sp, #116	@ 0x74
 8007f24:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007f26:	9002      	str	r0, [sp, #8]
 8007f28:	9006      	str	r0, [sp, #24]
 8007f2a:	9107      	str	r1, [sp, #28]
 8007f2c:	9104      	str	r1, [sp, #16]
 8007f2e:	4809      	ldr	r0, [pc, #36]	@ (8007f54 <siprintf+0x3c>)
 8007f30:	4909      	ldr	r1, [pc, #36]	@ (8007f58 <siprintf+0x40>)
 8007f32:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	6800      	ldr	r0, [r0, #0]
 8007f3a:	a902      	add	r1, sp, #8
 8007f3c:	9301      	str	r3, [sp, #4]
 8007f3e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007f40:	f000 fa0a 	bl	8008358 <_svfiprintf_r>
 8007f44:	9b02      	ldr	r3, [sp, #8]
 8007f46:	701c      	strb	r4, [r3, #0]
 8007f48:	b01d      	add	sp, #116	@ 0x74
 8007f4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f4e:	b003      	add	sp, #12
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	2000000c 	.word	0x2000000c
 8007f58:	ffff0208 	.word	0xffff0208

08007f5c <memmove>:
 8007f5c:	4288      	cmp	r0, r1
 8007f5e:	b510      	push	{r4, lr}
 8007f60:	eb01 0402 	add.w	r4, r1, r2
 8007f64:	d902      	bls.n	8007f6c <memmove+0x10>
 8007f66:	4284      	cmp	r4, r0
 8007f68:	4623      	mov	r3, r4
 8007f6a:	d807      	bhi.n	8007f7c <memmove+0x20>
 8007f6c:	1e43      	subs	r3, r0, #1
 8007f6e:	42a1      	cmp	r1, r4
 8007f70:	d008      	beq.n	8007f84 <memmove+0x28>
 8007f72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007f7a:	e7f8      	b.n	8007f6e <memmove+0x12>
 8007f7c:	4601      	mov	r1, r0
 8007f7e:	4402      	add	r2, r0
 8007f80:	428a      	cmp	r2, r1
 8007f82:	d100      	bne.n	8007f86 <memmove+0x2a>
 8007f84:	bd10      	pop	{r4, pc}
 8007f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007f8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007f8e:	e7f7      	b.n	8007f80 <memmove+0x24>

08007f90 <memset>:
 8007f90:	4603      	mov	r3, r0
 8007f92:	4402      	add	r2, r0
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d100      	bne.n	8007f9a <memset+0xa>
 8007f98:	4770      	bx	lr
 8007f9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007f9e:	e7f9      	b.n	8007f94 <memset+0x4>

08007fa0 <strchr>:
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	b2c9      	uxtb	r1, r1
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007faa:	b112      	cbz	r2, 8007fb2 <strchr+0x12>
 8007fac:	428a      	cmp	r2, r1
 8007fae:	d1f9      	bne.n	8007fa4 <strchr+0x4>
 8007fb0:	4770      	bx	lr
 8007fb2:	2900      	cmp	r1, #0
 8007fb4:	bf18      	it	ne
 8007fb6:	2000      	movne	r0, #0
 8007fb8:	4770      	bx	lr

08007fba <strncmp>:
 8007fba:	b510      	push	{r4, lr}
 8007fbc:	b16a      	cbz	r2, 8007fda <strncmp+0x20>
 8007fbe:	3901      	subs	r1, #1
 8007fc0:	1884      	adds	r4, r0, r2
 8007fc2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007fca:	429a      	cmp	r2, r3
 8007fcc:	d103      	bne.n	8007fd6 <strncmp+0x1c>
 8007fce:	42a0      	cmp	r0, r4
 8007fd0:	d001      	beq.n	8007fd6 <strncmp+0x1c>
 8007fd2:	2a00      	cmp	r2, #0
 8007fd4:	d1f5      	bne.n	8007fc2 <strncmp+0x8>
 8007fd6:	1ad0      	subs	r0, r2, r3
 8007fd8:	bd10      	pop	{r4, pc}
 8007fda:	4610      	mov	r0, r2
 8007fdc:	e7fc      	b.n	8007fd8 <strncmp+0x1e>

08007fde <strncpy>:
 8007fde:	4603      	mov	r3, r0
 8007fe0:	b510      	push	{r4, lr}
 8007fe2:	3901      	subs	r1, #1
 8007fe4:	b132      	cbz	r2, 8007ff4 <strncpy+0x16>
 8007fe6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007fea:	3a01      	subs	r2, #1
 8007fec:	f803 4b01 	strb.w	r4, [r3], #1
 8007ff0:	2c00      	cmp	r4, #0
 8007ff2:	d1f7      	bne.n	8007fe4 <strncpy+0x6>
 8007ff4:	2100      	movs	r1, #0
 8007ff6:	441a      	add	r2, r3
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d100      	bne.n	8007ffe <strncpy+0x20>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	f803 1b01 	strb.w	r1, [r3], #1
 8008002:	e7f9      	b.n	8007ff8 <strncpy+0x1a>

08008004 <strstr>:
 8008004:	780a      	ldrb	r2, [r1, #0]
 8008006:	b570      	push	{r4, r5, r6, lr}
 8008008:	b96a      	cbnz	r2, 8008026 <strstr+0x22>
 800800a:	bd70      	pop	{r4, r5, r6, pc}
 800800c:	429a      	cmp	r2, r3
 800800e:	d109      	bne.n	8008024 <strstr+0x20>
 8008010:	460c      	mov	r4, r1
 8008012:	4605      	mov	r5, r0
 8008014:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008018:	2b00      	cmp	r3, #0
 800801a:	d0f6      	beq.n	800800a <strstr+0x6>
 800801c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008020:	429e      	cmp	r6, r3
 8008022:	d0f7      	beq.n	8008014 <strstr+0x10>
 8008024:	3001      	adds	r0, #1
 8008026:	7803      	ldrb	r3, [r0, #0]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d1ef      	bne.n	800800c <strstr+0x8>
 800802c:	4618      	mov	r0, r3
 800802e:	e7ec      	b.n	800800a <strstr+0x6>

08008030 <__errno>:
 8008030:	4b01      	ldr	r3, [pc, #4]	@ (8008038 <__errno+0x8>)
 8008032:	6818      	ldr	r0, [r3, #0]
 8008034:	4770      	bx	lr
 8008036:	bf00      	nop
 8008038:	2000000c 	.word	0x2000000c

0800803c <__libc_init_array>:
 800803c:	b570      	push	{r4, r5, r6, lr}
 800803e:	2600      	movs	r6, #0
 8008040:	4d0c      	ldr	r5, [pc, #48]	@ (8008074 <__libc_init_array+0x38>)
 8008042:	4c0d      	ldr	r4, [pc, #52]	@ (8008078 <__libc_init_array+0x3c>)
 8008044:	1b64      	subs	r4, r4, r5
 8008046:	10a4      	asrs	r4, r4, #2
 8008048:	42a6      	cmp	r6, r4
 800804a:	d109      	bne.n	8008060 <__libc_init_array+0x24>
 800804c:	f000 fc64 	bl	8008918 <_init>
 8008050:	2600      	movs	r6, #0
 8008052:	4d0a      	ldr	r5, [pc, #40]	@ (800807c <__libc_init_array+0x40>)
 8008054:	4c0a      	ldr	r4, [pc, #40]	@ (8008080 <__libc_init_array+0x44>)
 8008056:	1b64      	subs	r4, r4, r5
 8008058:	10a4      	asrs	r4, r4, #2
 800805a:	42a6      	cmp	r6, r4
 800805c:	d105      	bne.n	800806a <__libc_init_array+0x2e>
 800805e:	bd70      	pop	{r4, r5, r6, pc}
 8008060:	f855 3b04 	ldr.w	r3, [r5], #4
 8008064:	4798      	blx	r3
 8008066:	3601      	adds	r6, #1
 8008068:	e7ee      	b.n	8008048 <__libc_init_array+0xc>
 800806a:	f855 3b04 	ldr.w	r3, [r5], #4
 800806e:	4798      	blx	r3
 8008070:	3601      	adds	r6, #1
 8008072:	e7f2      	b.n	800805a <__libc_init_array+0x1e>
 8008074:	0800967c 	.word	0x0800967c
 8008078:	0800967c 	.word	0x0800967c
 800807c:	0800967c 	.word	0x0800967c
 8008080:	08009680 	.word	0x08009680

08008084 <__retarget_lock_acquire_recursive>:
 8008084:	4770      	bx	lr

08008086 <__retarget_lock_release_recursive>:
 8008086:	4770      	bx	lr

08008088 <strcpy>:
 8008088:	4603      	mov	r3, r0
 800808a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800808e:	f803 2b01 	strb.w	r2, [r3], #1
 8008092:	2a00      	cmp	r2, #0
 8008094:	d1f9      	bne.n	800808a <strcpy+0x2>
 8008096:	4770      	bx	lr

08008098 <memcpy>:
 8008098:	440a      	add	r2, r1
 800809a:	4291      	cmp	r1, r2
 800809c:	f100 33ff 	add.w	r3, r0, #4294967295
 80080a0:	d100      	bne.n	80080a4 <memcpy+0xc>
 80080a2:	4770      	bx	lr
 80080a4:	b510      	push	{r4, lr}
 80080a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80080aa:	4291      	cmp	r1, r2
 80080ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80080b0:	d1f9      	bne.n	80080a6 <memcpy+0xe>
 80080b2:	bd10      	pop	{r4, pc}

080080b4 <_free_r>:
 80080b4:	b538      	push	{r3, r4, r5, lr}
 80080b6:	4605      	mov	r5, r0
 80080b8:	2900      	cmp	r1, #0
 80080ba:	d040      	beq.n	800813e <_free_r+0x8a>
 80080bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080c0:	1f0c      	subs	r4, r1, #4
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	bfb8      	it	lt
 80080c6:	18e4      	addlt	r4, r4, r3
 80080c8:	f000 f8de 	bl	8008288 <__malloc_lock>
 80080cc:	4a1c      	ldr	r2, [pc, #112]	@ (8008140 <_free_r+0x8c>)
 80080ce:	6813      	ldr	r3, [r2, #0]
 80080d0:	b933      	cbnz	r3, 80080e0 <_free_r+0x2c>
 80080d2:	6063      	str	r3, [r4, #4]
 80080d4:	6014      	str	r4, [r2, #0]
 80080d6:	4628      	mov	r0, r5
 80080d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080dc:	f000 b8da 	b.w	8008294 <__malloc_unlock>
 80080e0:	42a3      	cmp	r3, r4
 80080e2:	d908      	bls.n	80080f6 <_free_r+0x42>
 80080e4:	6820      	ldr	r0, [r4, #0]
 80080e6:	1821      	adds	r1, r4, r0
 80080e8:	428b      	cmp	r3, r1
 80080ea:	bf01      	itttt	eq
 80080ec:	6819      	ldreq	r1, [r3, #0]
 80080ee:	685b      	ldreq	r3, [r3, #4]
 80080f0:	1809      	addeq	r1, r1, r0
 80080f2:	6021      	streq	r1, [r4, #0]
 80080f4:	e7ed      	b.n	80080d2 <_free_r+0x1e>
 80080f6:	461a      	mov	r2, r3
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	b10b      	cbz	r3, 8008100 <_free_r+0x4c>
 80080fc:	42a3      	cmp	r3, r4
 80080fe:	d9fa      	bls.n	80080f6 <_free_r+0x42>
 8008100:	6811      	ldr	r1, [r2, #0]
 8008102:	1850      	adds	r0, r2, r1
 8008104:	42a0      	cmp	r0, r4
 8008106:	d10b      	bne.n	8008120 <_free_r+0x6c>
 8008108:	6820      	ldr	r0, [r4, #0]
 800810a:	4401      	add	r1, r0
 800810c:	1850      	adds	r0, r2, r1
 800810e:	4283      	cmp	r3, r0
 8008110:	6011      	str	r1, [r2, #0]
 8008112:	d1e0      	bne.n	80080d6 <_free_r+0x22>
 8008114:	6818      	ldr	r0, [r3, #0]
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	4408      	add	r0, r1
 800811a:	6010      	str	r0, [r2, #0]
 800811c:	6053      	str	r3, [r2, #4]
 800811e:	e7da      	b.n	80080d6 <_free_r+0x22>
 8008120:	d902      	bls.n	8008128 <_free_r+0x74>
 8008122:	230c      	movs	r3, #12
 8008124:	602b      	str	r3, [r5, #0]
 8008126:	e7d6      	b.n	80080d6 <_free_r+0x22>
 8008128:	6820      	ldr	r0, [r4, #0]
 800812a:	1821      	adds	r1, r4, r0
 800812c:	428b      	cmp	r3, r1
 800812e:	bf01      	itttt	eq
 8008130:	6819      	ldreq	r1, [r3, #0]
 8008132:	685b      	ldreq	r3, [r3, #4]
 8008134:	1809      	addeq	r1, r1, r0
 8008136:	6021      	streq	r1, [r4, #0]
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	6054      	str	r4, [r2, #4]
 800813c:	e7cb      	b.n	80080d6 <_free_r+0x22>
 800813e:	bd38      	pop	{r3, r4, r5, pc}
 8008140:	20000904 	.word	0x20000904

08008144 <sbrk_aligned>:
 8008144:	b570      	push	{r4, r5, r6, lr}
 8008146:	4e0f      	ldr	r6, [pc, #60]	@ (8008184 <sbrk_aligned+0x40>)
 8008148:	460c      	mov	r4, r1
 800814a:	6831      	ldr	r1, [r6, #0]
 800814c:	4605      	mov	r5, r0
 800814e:	b911      	cbnz	r1, 8008156 <sbrk_aligned+0x12>
 8008150:	f000 fb8e 	bl	8008870 <_sbrk_r>
 8008154:	6030      	str	r0, [r6, #0]
 8008156:	4621      	mov	r1, r4
 8008158:	4628      	mov	r0, r5
 800815a:	f000 fb89 	bl	8008870 <_sbrk_r>
 800815e:	1c43      	adds	r3, r0, #1
 8008160:	d103      	bne.n	800816a <sbrk_aligned+0x26>
 8008162:	f04f 34ff 	mov.w	r4, #4294967295
 8008166:	4620      	mov	r0, r4
 8008168:	bd70      	pop	{r4, r5, r6, pc}
 800816a:	1cc4      	adds	r4, r0, #3
 800816c:	f024 0403 	bic.w	r4, r4, #3
 8008170:	42a0      	cmp	r0, r4
 8008172:	d0f8      	beq.n	8008166 <sbrk_aligned+0x22>
 8008174:	1a21      	subs	r1, r4, r0
 8008176:	4628      	mov	r0, r5
 8008178:	f000 fb7a 	bl	8008870 <_sbrk_r>
 800817c:	3001      	adds	r0, #1
 800817e:	d1f2      	bne.n	8008166 <sbrk_aligned+0x22>
 8008180:	e7ef      	b.n	8008162 <sbrk_aligned+0x1e>
 8008182:	bf00      	nop
 8008184:	20000900 	.word	0x20000900

08008188 <_malloc_r>:
 8008188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800818c:	1ccd      	adds	r5, r1, #3
 800818e:	f025 0503 	bic.w	r5, r5, #3
 8008192:	3508      	adds	r5, #8
 8008194:	2d0c      	cmp	r5, #12
 8008196:	bf38      	it	cc
 8008198:	250c      	movcc	r5, #12
 800819a:	2d00      	cmp	r5, #0
 800819c:	4606      	mov	r6, r0
 800819e:	db01      	blt.n	80081a4 <_malloc_r+0x1c>
 80081a0:	42a9      	cmp	r1, r5
 80081a2:	d904      	bls.n	80081ae <_malloc_r+0x26>
 80081a4:	230c      	movs	r3, #12
 80081a6:	6033      	str	r3, [r6, #0]
 80081a8:	2000      	movs	r0, #0
 80081aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081ae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008284 <_malloc_r+0xfc>
 80081b2:	f000 f869 	bl	8008288 <__malloc_lock>
 80081b6:	f8d8 3000 	ldr.w	r3, [r8]
 80081ba:	461c      	mov	r4, r3
 80081bc:	bb44      	cbnz	r4, 8008210 <_malloc_r+0x88>
 80081be:	4629      	mov	r1, r5
 80081c0:	4630      	mov	r0, r6
 80081c2:	f7ff ffbf 	bl	8008144 <sbrk_aligned>
 80081c6:	1c43      	adds	r3, r0, #1
 80081c8:	4604      	mov	r4, r0
 80081ca:	d158      	bne.n	800827e <_malloc_r+0xf6>
 80081cc:	f8d8 4000 	ldr.w	r4, [r8]
 80081d0:	4627      	mov	r7, r4
 80081d2:	2f00      	cmp	r7, #0
 80081d4:	d143      	bne.n	800825e <_malloc_r+0xd6>
 80081d6:	2c00      	cmp	r4, #0
 80081d8:	d04b      	beq.n	8008272 <_malloc_r+0xea>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	4639      	mov	r1, r7
 80081de:	4630      	mov	r0, r6
 80081e0:	eb04 0903 	add.w	r9, r4, r3
 80081e4:	f000 fb44 	bl	8008870 <_sbrk_r>
 80081e8:	4581      	cmp	r9, r0
 80081ea:	d142      	bne.n	8008272 <_malloc_r+0xea>
 80081ec:	6821      	ldr	r1, [r4, #0]
 80081ee:	4630      	mov	r0, r6
 80081f0:	1a6d      	subs	r5, r5, r1
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7ff ffa6 	bl	8008144 <sbrk_aligned>
 80081f8:	3001      	adds	r0, #1
 80081fa:	d03a      	beq.n	8008272 <_malloc_r+0xea>
 80081fc:	6823      	ldr	r3, [r4, #0]
 80081fe:	442b      	add	r3, r5
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	f8d8 3000 	ldr.w	r3, [r8]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	bb62      	cbnz	r2, 8008264 <_malloc_r+0xdc>
 800820a:	f8c8 7000 	str.w	r7, [r8]
 800820e:	e00f      	b.n	8008230 <_malloc_r+0xa8>
 8008210:	6822      	ldr	r2, [r4, #0]
 8008212:	1b52      	subs	r2, r2, r5
 8008214:	d420      	bmi.n	8008258 <_malloc_r+0xd0>
 8008216:	2a0b      	cmp	r2, #11
 8008218:	d917      	bls.n	800824a <_malloc_r+0xc2>
 800821a:	1961      	adds	r1, r4, r5
 800821c:	42a3      	cmp	r3, r4
 800821e:	6025      	str	r5, [r4, #0]
 8008220:	bf18      	it	ne
 8008222:	6059      	strne	r1, [r3, #4]
 8008224:	6863      	ldr	r3, [r4, #4]
 8008226:	bf08      	it	eq
 8008228:	f8c8 1000 	streq.w	r1, [r8]
 800822c:	5162      	str	r2, [r4, r5]
 800822e:	604b      	str	r3, [r1, #4]
 8008230:	4630      	mov	r0, r6
 8008232:	f000 f82f 	bl	8008294 <__malloc_unlock>
 8008236:	f104 000b 	add.w	r0, r4, #11
 800823a:	1d23      	adds	r3, r4, #4
 800823c:	f020 0007 	bic.w	r0, r0, #7
 8008240:	1ac2      	subs	r2, r0, r3
 8008242:	bf1c      	itt	ne
 8008244:	1a1b      	subne	r3, r3, r0
 8008246:	50a3      	strne	r3, [r4, r2]
 8008248:	e7af      	b.n	80081aa <_malloc_r+0x22>
 800824a:	6862      	ldr	r2, [r4, #4]
 800824c:	42a3      	cmp	r3, r4
 800824e:	bf0c      	ite	eq
 8008250:	f8c8 2000 	streq.w	r2, [r8]
 8008254:	605a      	strne	r2, [r3, #4]
 8008256:	e7eb      	b.n	8008230 <_malloc_r+0xa8>
 8008258:	4623      	mov	r3, r4
 800825a:	6864      	ldr	r4, [r4, #4]
 800825c:	e7ae      	b.n	80081bc <_malloc_r+0x34>
 800825e:	463c      	mov	r4, r7
 8008260:	687f      	ldr	r7, [r7, #4]
 8008262:	e7b6      	b.n	80081d2 <_malloc_r+0x4a>
 8008264:	461a      	mov	r2, r3
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	42a3      	cmp	r3, r4
 800826a:	d1fb      	bne.n	8008264 <_malloc_r+0xdc>
 800826c:	2300      	movs	r3, #0
 800826e:	6053      	str	r3, [r2, #4]
 8008270:	e7de      	b.n	8008230 <_malloc_r+0xa8>
 8008272:	230c      	movs	r3, #12
 8008274:	4630      	mov	r0, r6
 8008276:	6033      	str	r3, [r6, #0]
 8008278:	f000 f80c 	bl	8008294 <__malloc_unlock>
 800827c:	e794      	b.n	80081a8 <_malloc_r+0x20>
 800827e:	6005      	str	r5, [r0, #0]
 8008280:	e7d6      	b.n	8008230 <_malloc_r+0xa8>
 8008282:	bf00      	nop
 8008284:	20000904 	.word	0x20000904

08008288 <__malloc_lock>:
 8008288:	4801      	ldr	r0, [pc, #4]	@ (8008290 <__malloc_lock+0x8>)
 800828a:	f7ff befb 	b.w	8008084 <__retarget_lock_acquire_recursive>
 800828e:	bf00      	nop
 8008290:	200008fc 	.word	0x200008fc

08008294 <__malloc_unlock>:
 8008294:	4801      	ldr	r0, [pc, #4]	@ (800829c <__malloc_unlock+0x8>)
 8008296:	f7ff bef6 	b.w	8008086 <__retarget_lock_release_recursive>
 800829a:	bf00      	nop
 800829c:	200008fc 	.word	0x200008fc

080082a0 <__ssputs_r>:
 80082a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082a4:	461f      	mov	r7, r3
 80082a6:	688e      	ldr	r6, [r1, #8]
 80082a8:	4682      	mov	sl, r0
 80082aa:	42be      	cmp	r6, r7
 80082ac:	460c      	mov	r4, r1
 80082ae:	4690      	mov	r8, r2
 80082b0:	680b      	ldr	r3, [r1, #0]
 80082b2:	d82d      	bhi.n	8008310 <__ssputs_r+0x70>
 80082b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80082b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80082bc:	d026      	beq.n	800830c <__ssputs_r+0x6c>
 80082be:	6965      	ldr	r5, [r4, #20]
 80082c0:	6909      	ldr	r1, [r1, #16]
 80082c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80082c6:	eba3 0901 	sub.w	r9, r3, r1
 80082ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80082ce:	1c7b      	adds	r3, r7, #1
 80082d0:	444b      	add	r3, r9
 80082d2:	106d      	asrs	r5, r5, #1
 80082d4:	429d      	cmp	r5, r3
 80082d6:	bf38      	it	cc
 80082d8:	461d      	movcc	r5, r3
 80082da:	0553      	lsls	r3, r2, #21
 80082dc:	d527      	bpl.n	800832e <__ssputs_r+0x8e>
 80082de:	4629      	mov	r1, r5
 80082e0:	f7ff ff52 	bl	8008188 <_malloc_r>
 80082e4:	4606      	mov	r6, r0
 80082e6:	b360      	cbz	r0, 8008342 <__ssputs_r+0xa2>
 80082e8:	464a      	mov	r2, r9
 80082ea:	6921      	ldr	r1, [r4, #16]
 80082ec:	f7ff fed4 	bl	8008098 <memcpy>
 80082f0:	89a3      	ldrh	r3, [r4, #12]
 80082f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80082f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082fa:	81a3      	strh	r3, [r4, #12]
 80082fc:	6126      	str	r6, [r4, #16]
 80082fe:	444e      	add	r6, r9
 8008300:	6026      	str	r6, [r4, #0]
 8008302:	463e      	mov	r6, r7
 8008304:	6165      	str	r5, [r4, #20]
 8008306:	eba5 0509 	sub.w	r5, r5, r9
 800830a:	60a5      	str	r5, [r4, #8]
 800830c:	42be      	cmp	r6, r7
 800830e:	d900      	bls.n	8008312 <__ssputs_r+0x72>
 8008310:	463e      	mov	r6, r7
 8008312:	4632      	mov	r2, r6
 8008314:	4641      	mov	r1, r8
 8008316:	6820      	ldr	r0, [r4, #0]
 8008318:	f7ff fe20 	bl	8007f5c <memmove>
 800831c:	2000      	movs	r0, #0
 800831e:	68a3      	ldr	r3, [r4, #8]
 8008320:	1b9b      	subs	r3, r3, r6
 8008322:	60a3      	str	r3, [r4, #8]
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	4433      	add	r3, r6
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	462a      	mov	r2, r5
 8008330:	f000 fabc 	bl	80088ac <_realloc_r>
 8008334:	4606      	mov	r6, r0
 8008336:	2800      	cmp	r0, #0
 8008338:	d1e0      	bne.n	80082fc <__ssputs_r+0x5c>
 800833a:	4650      	mov	r0, sl
 800833c:	6921      	ldr	r1, [r4, #16]
 800833e:	f7ff feb9 	bl	80080b4 <_free_r>
 8008342:	230c      	movs	r3, #12
 8008344:	f8ca 3000 	str.w	r3, [sl]
 8008348:	89a3      	ldrh	r3, [r4, #12]
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008352:	81a3      	strh	r3, [r4, #12]
 8008354:	e7e9      	b.n	800832a <__ssputs_r+0x8a>
	...

08008358 <_svfiprintf_r>:
 8008358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800835c:	4698      	mov	r8, r3
 800835e:	898b      	ldrh	r3, [r1, #12]
 8008360:	4607      	mov	r7, r0
 8008362:	061b      	lsls	r3, r3, #24
 8008364:	460d      	mov	r5, r1
 8008366:	4614      	mov	r4, r2
 8008368:	b09d      	sub	sp, #116	@ 0x74
 800836a:	d510      	bpl.n	800838e <_svfiprintf_r+0x36>
 800836c:	690b      	ldr	r3, [r1, #16]
 800836e:	b973      	cbnz	r3, 800838e <_svfiprintf_r+0x36>
 8008370:	2140      	movs	r1, #64	@ 0x40
 8008372:	f7ff ff09 	bl	8008188 <_malloc_r>
 8008376:	6028      	str	r0, [r5, #0]
 8008378:	6128      	str	r0, [r5, #16]
 800837a:	b930      	cbnz	r0, 800838a <_svfiprintf_r+0x32>
 800837c:	230c      	movs	r3, #12
 800837e:	603b      	str	r3, [r7, #0]
 8008380:	f04f 30ff 	mov.w	r0, #4294967295
 8008384:	b01d      	add	sp, #116	@ 0x74
 8008386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800838a:	2340      	movs	r3, #64	@ 0x40
 800838c:	616b      	str	r3, [r5, #20]
 800838e:	2300      	movs	r3, #0
 8008390:	9309      	str	r3, [sp, #36]	@ 0x24
 8008392:	2320      	movs	r3, #32
 8008394:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008398:	2330      	movs	r3, #48	@ 0x30
 800839a:	f04f 0901 	mov.w	r9, #1
 800839e:	f8cd 800c 	str.w	r8, [sp, #12]
 80083a2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800853c <_svfiprintf_r+0x1e4>
 80083a6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80083aa:	4623      	mov	r3, r4
 80083ac:	469a      	mov	sl, r3
 80083ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083b2:	b10a      	cbz	r2, 80083b8 <_svfiprintf_r+0x60>
 80083b4:	2a25      	cmp	r2, #37	@ 0x25
 80083b6:	d1f9      	bne.n	80083ac <_svfiprintf_r+0x54>
 80083b8:	ebba 0b04 	subs.w	fp, sl, r4
 80083bc:	d00b      	beq.n	80083d6 <_svfiprintf_r+0x7e>
 80083be:	465b      	mov	r3, fp
 80083c0:	4622      	mov	r2, r4
 80083c2:	4629      	mov	r1, r5
 80083c4:	4638      	mov	r0, r7
 80083c6:	f7ff ff6b 	bl	80082a0 <__ssputs_r>
 80083ca:	3001      	adds	r0, #1
 80083cc:	f000 80a7 	beq.w	800851e <_svfiprintf_r+0x1c6>
 80083d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083d2:	445a      	add	r2, fp
 80083d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80083d6:	f89a 3000 	ldrb.w	r3, [sl]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	f000 809f 	beq.w	800851e <_svfiprintf_r+0x1c6>
 80083e0:	2300      	movs	r3, #0
 80083e2:	f04f 32ff 	mov.w	r2, #4294967295
 80083e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80083ea:	f10a 0a01 	add.w	sl, sl, #1
 80083ee:	9304      	str	r3, [sp, #16]
 80083f0:	9307      	str	r3, [sp, #28]
 80083f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80083f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80083f8:	4654      	mov	r4, sl
 80083fa:	2205      	movs	r2, #5
 80083fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008400:	484e      	ldr	r0, [pc, #312]	@ (800853c <_svfiprintf_r+0x1e4>)
 8008402:	f000 fa45 	bl	8008890 <memchr>
 8008406:	9a04      	ldr	r2, [sp, #16]
 8008408:	b9d8      	cbnz	r0, 8008442 <_svfiprintf_r+0xea>
 800840a:	06d0      	lsls	r0, r2, #27
 800840c:	bf44      	itt	mi
 800840e:	2320      	movmi	r3, #32
 8008410:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008414:	0711      	lsls	r1, r2, #28
 8008416:	bf44      	itt	mi
 8008418:	232b      	movmi	r3, #43	@ 0x2b
 800841a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800841e:	f89a 3000 	ldrb.w	r3, [sl]
 8008422:	2b2a      	cmp	r3, #42	@ 0x2a
 8008424:	d015      	beq.n	8008452 <_svfiprintf_r+0xfa>
 8008426:	4654      	mov	r4, sl
 8008428:	2000      	movs	r0, #0
 800842a:	f04f 0c0a 	mov.w	ip, #10
 800842e:	9a07      	ldr	r2, [sp, #28]
 8008430:	4621      	mov	r1, r4
 8008432:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008436:	3b30      	subs	r3, #48	@ 0x30
 8008438:	2b09      	cmp	r3, #9
 800843a:	d94b      	bls.n	80084d4 <_svfiprintf_r+0x17c>
 800843c:	b1b0      	cbz	r0, 800846c <_svfiprintf_r+0x114>
 800843e:	9207      	str	r2, [sp, #28]
 8008440:	e014      	b.n	800846c <_svfiprintf_r+0x114>
 8008442:	eba0 0308 	sub.w	r3, r0, r8
 8008446:	fa09 f303 	lsl.w	r3, r9, r3
 800844a:	4313      	orrs	r3, r2
 800844c:	46a2      	mov	sl, r4
 800844e:	9304      	str	r3, [sp, #16]
 8008450:	e7d2      	b.n	80083f8 <_svfiprintf_r+0xa0>
 8008452:	9b03      	ldr	r3, [sp, #12]
 8008454:	1d19      	adds	r1, r3, #4
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	9103      	str	r1, [sp, #12]
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfbb      	ittet	lt
 800845e:	425b      	neglt	r3, r3
 8008460:	f042 0202 	orrlt.w	r2, r2, #2
 8008464:	9307      	strge	r3, [sp, #28]
 8008466:	9307      	strlt	r3, [sp, #28]
 8008468:	bfb8      	it	lt
 800846a:	9204      	strlt	r2, [sp, #16]
 800846c:	7823      	ldrb	r3, [r4, #0]
 800846e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008470:	d10a      	bne.n	8008488 <_svfiprintf_r+0x130>
 8008472:	7863      	ldrb	r3, [r4, #1]
 8008474:	2b2a      	cmp	r3, #42	@ 0x2a
 8008476:	d132      	bne.n	80084de <_svfiprintf_r+0x186>
 8008478:	9b03      	ldr	r3, [sp, #12]
 800847a:	3402      	adds	r4, #2
 800847c:	1d1a      	adds	r2, r3, #4
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	9203      	str	r2, [sp, #12]
 8008482:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008486:	9305      	str	r3, [sp, #20]
 8008488:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008540 <_svfiprintf_r+0x1e8>
 800848c:	2203      	movs	r2, #3
 800848e:	4650      	mov	r0, sl
 8008490:	7821      	ldrb	r1, [r4, #0]
 8008492:	f000 f9fd 	bl	8008890 <memchr>
 8008496:	b138      	cbz	r0, 80084a8 <_svfiprintf_r+0x150>
 8008498:	2240      	movs	r2, #64	@ 0x40
 800849a:	9b04      	ldr	r3, [sp, #16]
 800849c:	eba0 000a 	sub.w	r0, r0, sl
 80084a0:	4082      	lsls	r2, r0
 80084a2:	4313      	orrs	r3, r2
 80084a4:	3401      	adds	r4, #1
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084ac:	2206      	movs	r2, #6
 80084ae:	4825      	ldr	r0, [pc, #148]	@ (8008544 <_svfiprintf_r+0x1ec>)
 80084b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80084b4:	f000 f9ec 	bl	8008890 <memchr>
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d036      	beq.n	800852a <_svfiprintf_r+0x1d2>
 80084bc:	4b22      	ldr	r3, [pc, #136]	@ (8008548 <_svfiprintf_r+0x1f0>)
 80084be:	bb1b      	cbnz	r3, 8008508 <_svfiprintf_r+0x1b0>
 80084c0:	9b03      	ldr	r3, [sp, #12]
 80084c2:	3307      	adds	r3, #7
 80084c4:	f023 0307 	bic.w	r3, r3, #7
 80084c8:	3308      	adds	r3, #8
 80084ca:	9303      	str	r3, [sp, #12]
 80084cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084ce:	4433      	add	r3, r6
 80084d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80084d2:	e76a      	b.n	80083aa <_svfiprintf_r+0x52>
 80084d4:	460c      	mov	r4, r1
 80084d6:	2001      	movs	r0, #1
 80084d8:	fb0c 3202 	mla	r2, ip, r2, r3
 80084dc:	e7a8      	b.n	8008430 <_svfiprintf_r+0xd8>
 80084de:	2300      	movs	r3, #0
 80084e0:	f04f 0c0a 	mov.w	ip, #10
 80084e4:	4619      	mov	r1, r3
 80084e6:	3401      	adds	r4, #1
 80084e8:	9305      	str	r3, [sp, #20]
 80084ea:	4620      	mov	r0, r4
 80084ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084f0:	3a30      	subs	r2, #48	@ 0x30
 80084f2:	2a09      	cmp	r2, #9
 80084f4:	d903      	bls.n	80084fe <_svfiprintf_r+0x1a6>
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0c6      	beq.n	8008488 <_svfiprintf_r+0x130>
 80084fa:	9105      	str	r1, [sp, #20]
 80084fc:	e7c4      	b.n	8008488 <_svfiprintf_r+0x130>
 80084fe:	4604      	mov	r4, r0
 8008500:	2301      	movs	r3, #1
 8008502:	fb0c 2101 	mla	r1, ip, r1, r2
 8008506:	e7f0      	b.n	80084ea <_svfiprintf_r+0x192>
 8008508:	ab03      	add	r3, sp, #12
 800850a:	9300      	str	r3, [sp, #0]
 800850c:	462a      	mov	r2, r5
 800850e:	4638      	mov	r0, r7
 8008510:	4b0e      	ldr	r3, [pc, #56]	@ (800854c <_svfiprintf_r+0x1f4>)
 8008512:	a904      	add	r1, sp, #16
 8008514:	f3af 8000 	nop.w
 8008518:	1c42      	adds	r2, r0, #1
 800851a:	4606      	mov	r6, r0
 800851c:	d1d6      	bne.n	80084cc <_svfiprintf_r+0x174>
 800851e:	89ab      	ldrh	r3, [r5, #12]
 8008520:	065b      	lsls	r3, r3, #25
 8008522:	f53f af2d 	bmi.w	8008380 <_svfiprintf_r+0x28>
 8008526:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008528:	e72c      	b.n	8008384 <_svfiprintf_r+0x2c>
 800852a:	ab03      	add	r3, sp, #12
 800852c:	9300      	str	r3, [sp, #0]
 800852e:	462a      	mov	r2, r5
 8008530:	4638      	mov	r0, r7
 8008532:	4b06      	ldr	r3, [pc, #24]	@ (800854c <_svfiprintf_r+0x1f4>)
 8008534:	a904      	add	r1, sp, #16
 8008536:	f000 f87d 	bl	8008634 <_printf_i>
 800853a:	e7ed      	b.n	8008518 <_svfiprintf_r+0x1c0>
 800853c:	08009640 	.word	0x08009640
 8008540:	08009646 	.word	0x08009646
 8008544:	0800964a 	.word	0x0800964a
 8008548:	00000000 	.word	0x00000000
 800854c:	080082a1 	.word	0x080082a1

08008550 <_printf_common>:
 8008550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008554:	4616      	mov	r6, r2
 8008556:	4698      	mov	r8, r3
 8008558:	688a      	ldr	r2, [r1, #8]
 800855a:	690b      	ldr	r3, [r1, #16]
 800855c:	4607      	mov	r7, r0
 800855e:	4293      	cmp	r3, r2
 8008560:	bfb8      	it	lt
 8008562:	4613      	movlt	r3, r2
 8008564:	6033      	str	r3, [r6, #0]
 8008566:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800856a:	460c      	mov	r4, r1
 800856c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008570:	b10a      	cbz	r2, 8008576 <_printf_common+0x26>
 8008572:	3301      	adds	r3, #1
 8008574:	6033      	str	r3, [r6, #0]
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	0699      	lsls	r1, r3, #26
 800857a:	bf42      	ittt	mi
 800857c:	6833      	ldrmi	r3, [r6, #0]
 800857e:	3302      	addmi	r3, #2
 8008580:	6033      	strmi	r3, [r6, #0]
 8008582:	6825      	ldr	r5, [r4, #0]
 8008584:	f015 0506 	ands.w	r5, r5, #6
 8008588:	d106      	bne.n	8008598 <_printf_common+0x48>
 800858a:	f104 0a19 	add.w	sl, r4, #25
 800858e:	68e3      	ldr	r3, [r4, #12]
 8008590:	6832      	ldr	r2, [r6, #0]
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	42ab      	cmp	r3, r5
 8008596:	dc2b      	bgt.n	80085f0 <_printf_common+0xa0>
 8008598:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800859c:	6822      	ldr	r2, [r4, #0]
 800859e:	3b00      	subs	r3, #0
 80085a0:	bf18      	it	ne
 80085a2:	2301      	movne	r3, #1
 80085a4:	0692      	lsls	r2, r2, #26
 80085a6:	d430      	bmi.n	800860a <_printf_common+0xba>
 80085a8:	4641      	mov	r1, r8
 80085aa:	4638      	mov	r0, r7
 80085ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80085b0:	47c8      	blx	r9
 80085b2:	3001      	adds	r0, #1
 80085b4:	d023      	beq.n	80085fe <_printf_common+0xae>
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	6922      	ldr	r2, [r4, #16]
 80085ba:	f003 0306 	and.w	r3, r3, #6
 80085be:	2b04      	cmp	r3, #4
 80085c0:	bf14      	ite	ne
 80085c2:	2500      	movne	r5, #0
 80085c4:	6833      	ldreq	r3, [r6, #0]
 80085c6:	f04f 0600 	mov.w	r6, #0
 80085ca:	bf08      	it	eq
 80085cc:	68e5      	ldreq	r5, [r4, #12]
 80085ce:	f104 041a 	add.w	r4, r4, #26
 80085d2:	bf08      	it	eq
 80085d4:	1aed      	subeq	r5, r5, r3
 80085d6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80085da:	bf08      	it	eq
 80085dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085e0:	4293      	cmp	r3, r2
 80085e2:	bfc4      	itt	gt
 80085e4:	1a9b      	subgt	r3, r3, r2
 80085e6:	18ed      	addgt	r5, r5, r3
 80085e8:	42b5      	cmp	r5, r6
 80085ea:	d11a      	bne.n	8008622 <_printf_common+0xd2>
 80085ec:	2000      	movs	r0, #0
 80085ee:	e008      	b.n	8008602 <_printf_common+0xb2>
 80085f0:	2301      	movs	r3, #1
 80085f2:	4652      	mov	r2, sl
 80085f4:	4641      	mov	r1, r8
 80085f6:	4638      	mov	r0, r7
 80085f8:	47c8      	blx	r9
 80085fa:	3001      	adds	r0, #1
 80085fc:	d103      	bne.n	8008606 <_printf_common+0xb6>
 80085fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008606:	3501      	adds	r5, #1
 8008608:	e7c1      	b.n	800858e <_printf_common+0x3e>
 800860a:	2030      	movs	r0, #48	@ 0x30
 800860c:	18e1      	adds	r1, r4, r3
 800860e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008612:	1c5a      	adds	r2, r3, #1
 8008614:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008618:	4422      	add	r2, r4
 800861a:	3302      	adds	r3, #2
 800861c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008620:	e7c2      	b.n	80085a8 <_printf_common+0x58>
 8008622:	2301      	movs	r3, #1
 8008624:	4622      	mov	r2, r4
 8008626:	4641      	mov	r1, r8
 8008628:	4638      	mov	r0, r7
 800862a:	47c8      	blx	r9
 800862c:	3001      	adds	r0, #1
 800862e:	d0e6      	beq.n	80085fe <_printf_common+0xae>
 8008630:	3601      	adds	r6, #1
 8008632:	e7d9      	b.n	80085e8 <_printf_common+0x98>

08008634 <_printf_i>:
 8008634:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008638:	7e0f      	ldrb	r7, [r1, #24]
 800863a:	4691      	mov	r9, r2
 800863c:	2f78      	cmp	r7, #120	@ 0x78
 800863e:	4680      	mov	r8, r0
 8008640:	460c      	mov	r4, r1
 8008642:	469a      	mov	sl, r3
 8008644:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008646:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800864a:	d807      	bhi.n	800865c <_printf_i+0x28>
 800864c:	2f62      	cmp	r7, #98	@ 0x62
 800864e:	d80a      	bhi.n	8008666 <_printf_i+0x32>
 8008650:	2f00      	cmp	r7, #0
 8008652:	f000 80d1 	beq.w	80087f8 <_printf_i+0x1c4>
 8008656:	2f58      	cmp	r7, #88	@ 0x58
 8008658:	f000 80b8 	beq.w	80087cc <_printf_i+0x198>
 800865c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008660:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008664:	e03a      	b.n	80086dc <_printf_i+0xa8>
 8008666:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800866a:	2b15      	cmp	r3, #21
 800866c:	d8f6      	bhi.n	800865c <_printf_i+0x28>
 800866e:	a101      	add	r1, pc, #4	@ (adr r1, 8008674 <_printf_i+0x40>)
 8008670:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008674:	080086cd 	.word	0x080086cd
 8008678:	080086e1 	.word	0x080086e1
 800867c:	0800865d 	.word	0x0800865d
 8008680:	0800865d 	.word	0x0800865d
 8008684:	0800865d 	.word	0x0800865d
 8008688:	0800865d 	.word	0x0800865d
 800868c:	080086e1 	.word	0x080086e1
 8008690:	0800865d 	.word	0x0800865d
 8008694:	0800865d 	.word	0x0800865d
 8008698:	0800865d 	.word	0x0800865d
 800869c:	0800865d 	.word	0x0800865d
 80086a0:	080087df 	.word	0x080087df
 80086a4:	0800870b 	.word	0x0800870b
 80086a8:	08008799 	.word	0x08008799
 80086ac:	0800865d 	.word	0x0800865d
 80086b0:	0800865d 	.word	0x0800865d
 80086b4:	08008801 	.word	0x08008801
 80086b8:	0800865d 	.word	0x0800865d
 80086bc:	0800870b 	.word	0x0800870b
 80086c0:	0800865d 	.word	0x0800865d
 80086c4:	0800865d 	.word	0x0800865d
 80086c8:	080087a1 	.word	0x080087a1
 80086cc:	6833      	ldr	r3, [r6, #0]
 80086ce:	1d1a      	adds	r2, r3, #4
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	6032      	str	r2, [r6, #0]
 80086d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80086d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80086dc:	2301      	movs	r3, #1
 80086de:	e09c      	b.n	800881a <_printf_i+0x1e6>
 80086e0:	6833      	ldr	r3, [r6, #0]
 80086e2:	6820      	ldr	r0, [r4, #0]
 80086e4:	1d19      	adds	r1, r3, #4
 80086e6:	6031      	str	r1, [r6, #0]
 80086e8:	0606      	lsls	r6, r0, #24
 80086ea:	d501      	bpl.n	80086f0 <_printf_i+0xbc>
 80086ec:	681d      	ldr	r5, [r3, #0]
 80086ee:	e003      	b.n	80086f8 <_printf_i+0xc4>
 80086f0:	0645      	lsls	r5, r0, #25
 80086f2:	d5fb      	bpl.n	80086ec <_printf_i+0xb8>
 80086f4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80086f8:	2d00      	cmp	r5, #0
 80086fa:	da03      	bge.n	8008704 <_printf_i+0xd0>
 80086fc:	232d      	movs	r3, #45	@ 0x2d
 80086fe:	426d      	negs	r5, r5
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008704:	230a      	movs	r3, #10
 8008706:	4858      	ldr	r0, [pc, #352]	@ (8008868 <_printf_i+0x234>)
 8008708:	e011      	b.n	800872e <_printf_i+0xfa>
 800870a:	6821      	ldr	r1, [r4, #0]
 800870c:	6833      	ldr	r3, [r6, #0]
 800870e:	0608      	lsls	r0, r1, #24
 8008710:	f853 5b04 	ldr.w	r5, [r3], #4
 8008714:	d402      	bmi.n	800871c <_printf_i+0xe8>
 8008716:	0649      	lsls	r1, r1, #25
 8008718:	bf48      	it	mi
 800871a:	b2ad      	uxthmi	r5, r5
 800871c:	2f6f      	cmp	r7, #111	@ 0x6f
 800871e:	6033      	str	r3, [r6, #0]
 8008720:	bf14      	ite	ne
 8008722:	230a      	movne	r3, #10
 8008724:	2308      	moveq	r3, #8
 8008726:	4850      	ldr	r0, [pc, #320]	@ (8008868 <_printf_i+0x234>)
 8008728:	2100      	movs	r1, #0
 800872a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800872e:	6866      	ldr	r6, [r4, #4]
 8008730:	2e00      	cmp	r6, #0
 8008732:	60a6      	str	r6, [r4, #8]
 8008734:	db05      	blt.n	8008742 <_printf_i+0x10e>
 8008736:	6821      	ldr	r1, [r4, #0]
 8008738:	432e      	orrs	r6, r5
 800873a:	f021 0104 	bic.w	r1, r1, #4
 800873e:	6021      	str	r1, [r4, #0]
 8008740:	d04b      	beq.n	80087da <_printf_i+0x1a6>
 8008742:	4616      	mov	r6, r2
 8008744:	fbb5 f1f3 	udiv	r1, r5, r3
 8008748:	fb03 5711 	mls	r7, r3, r1, r5
 800874c:	5dc7      	ldrb	r7, [r0, r7]
 800874e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008752:	462f      	mov	r7, r5
 8008754:	42bb      	cmp	r3, r7
 8008756:	460d      	mov	r5, r1
 8008758:	d9f4      	bls.n	8008744 <_printf_i+0x110>
 800875a:	2b08      	cmp	r3, #8
 800875c:	d10b      	bne.n	8008776 <_printf_i+0x142>
 800875e:	6823      	ldr	r3, [r4, #0]
 8008760:	07df      	lsls	r7, r3, #31
 8008762:	d508      	bpl.n	8008776 <_printf_i+0x142>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	6861      	ldr	r1, [r4, #4]
 8008768:	4299      	cmp	r1, r3
 800876a:	bfde      	ittt	le
 800876c:	2330      	movle	r3, #48	@ 0x30
 800876e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008772:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008776:	1b92      	subs	r2, r2, r6
 8008778:	6122      	str	r2, [r4, #16]
 800877a:	464b      	mov	r3, r9
 800877c:	4621      	mov	r1, r4
 800877e:	4640      	mov	r0, r8
 8008780:	f8cd a000 	str.w	sl, [sp]
 8008784:	aa03      	add	r2, sp, #12
 8008786:	f7ff fee3 	bl	8008550 <_printf_common>
 800878a:	3001      	adds	r0, #1
 800878c:	d14a      	bne.n	8008824 <_printf_i+0x1f0>
 800878e:	f04f 30ff 	mov.w	r0, #4294967295
 8008792:	b004      	add	sp, #16
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	6823      	ldr	r3, [r4, #0]
 800879a:	f043 0320 	orr.w	r3, r3, #32
 800879e:	6023      	str	r3, [r4, #0]
 80087a0:	2778      	movs	r7, #120	@ 0x78
 80087a2:	4832      	ldr	r0, [pc, #200]	@ (800886c <_printf_i+0x238>)
 80087a4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80087a8:	6823      	ldr	r3, [r4, #0]
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	061f      	lsls	r7, r3, #24
 80087ae:	f851 5b04 	ldr.w	r5, [r1], #4
 80087b2:	d402      	bmi.n	80087ba <_printf_i+0x186>
 80087b4:	065f      	lsls	r7, r3, #25
 80087b6:	bf48      	it	mi
 80087b8:	b2ad      	uxthmi	r5, r5
 80087ba:	6031      	str	r1, [r6, #0]
 80087bc:	07d9      	lsls	r1, r3, #31
 80087be:	bf44      	itt	mi
 80087c0:	f043 0320 	orrmi.w	r3, r3, #32
 80087c4:	6023      	strmi	r3, [r4, #0]
 80087c6:	b11d      	cbz	r5, 80087d0 <_printf_i+0x19c>
 80087c8:	2310      	movs	r3, #16
 80087ca:	e7ad      	b.n	8008728 <_printf_i+0xf4>
 80087cc:	4826      	ldr	r0, [pc, #152]	@ (8008868 <_printf_i+0x234>)
 80087ce:	e7e9      	b.n	80087a4 <_printf_i+0x170>
 80087d0:	6823      	ldr	r3, [r4, #0]
 80087d2:	f023 0320 	bic.w	r3, r3, #32
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	e7f6      	b.n	80087c8 <_printf_i+0x194>
 80087da:	4616      	mov	r6, r2
 80087dc:	e7bd      	b.n	800875a <_printf_i+0x126>
 80087de:	6833      	ldr	r3, [r6, #0]
 80087e0:	6825      	ldr	r5, [r4, #0]
 80087e2:	1d18      	adds	r0, r3, #4
 80087e4:	6961      	ldr	r1, [r4, #20]
 80087e6:	6030      	str	r0, [r6, #0]
 80087e8:	062e      	lsls	r6, r5, #24
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	d501      	bpl.n	80087f2 <_printf_i+0x1be>
 80087ee:	6019      	str	r1, [r3, #0]
 80087f0:	e002      	b.n	80087f8 <_printf_i+0x1c4>
 80087f2:	0668      	lsls	r0, r5, #25
 80087f4:	d5fb      	bpl.n	80087ee <_printf_i+0x1ba>
 80087f6:	8019      	strh	r1, [r3, #0]
 80087f8:	2300      	movs	r3, #0
 80087fa:	4616      	mov	r6, r2
 80087fc:	6123      	str	r3, [r4, #16]
 80087fe:	e7bc      	b.n	800877a <_printf_i+0x146>
 8008800:	6833      	ldr	r3, [r6, #0]
 8008802:	2100      	movs	r1, #0
 8008804:	1d1a      	adds	r2, r3, #4
 8008806:	6032      	str	r2, [r6, #0]
 8008808:	681e      	ldr	r6, [r3, #0]
 800880a:	6862      	ldr	r2, [r4, #4]
 800880c:	4630      	mov	r0, r6
 800880e:	f000 f83f 	bl	8008890 <memchr>
 8008812:	b108      	cbz	r0, 8008818 <_printf_i+0x1e4>
 8008814:	1b80      	subs	r0, r0, r6
 8008816:	6060      	str	r0, [r4, #4]
 8008818:	6863      	ldr	r3, [r4, #4]
 800881a:	6123      	str	r3, [r4, #16]
 800881c:	2300      	movs	r3, #0
 800881e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008822:	e7aa      	b.n	800877a <_printf_i+0x146>
 8008824:	4632      	mov	r2, r6
 8008826:	4649      	mov	r1, r9
 8008828:	4640      	mov	r0, r8
 800882a:	6923      	ldr	r3, [r4, #16]
 800882c:	47d0      	blx	sl
 800882e:	3001      	adds	r0, #1
 8008830:	d0ad      	beq.n	800878e <_printf_i+0x15a>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	079b      	lsls	r3, r3, #30
 8008836:	d413      	bmi.n	8008860 <_printf_i+0x22c>
 8008838:	68e0      	ldr	r0, [r4, #12]
 800883a:	9b03      	ldr	r3, [sp, #12]
 800883c:	4298      	cmp	r0, r3
 800883e:	bfb8      	it	lt
 8008840:	4618      	movlt	r0, r3
 8008842:	e7a6      	b.n	8008792 <_printf_i+0x15e>
 8008844:	2301      	movs	r3, #1
 8008846:	4632      	mov	r2, r6
 8008848:	4649      	mov	r1, r9
 800884a:	4640      	mov	r0, r8
 800884c:	47d0      	blx	sl
 800884e:	3001      	adds	r0, #1
 8008850:	d09d      	beq.n	800878e <_printf_i+0x15a>
 8008852:	3501      	adds	r5, #1
 8008854:	68e3      	ldr	r3, [r4, #12]
 8008856:	9903      	ldr	r1, [sp, #12]
 8008858:	1a5b      	subs	r3, r3, r1
 800885a:	42ab      	cmp	r3, r5
 800885c:	dcf2      	bgt.n	8008844 <_printf_i+0x210>
 800885e:	e7eb      	b.n	8008838 <_printf_i+0x204>
 8008860:	2500      	movs	r5, #0
 8008862:	f104 0619 	add.w	r6, r4, #25
 8008866:	e7f5      	b.n	8008854 <_printf_i+0x220>
 8008868:	08009651 	.word	0x08009651
 800886c:	08009662 	.word	0x08009662

08008870 <_sbrk_r>:
 8008870:	b538      	push	{r3, r4, r5, lr}
 8008872:	2300      	movs	r3, #0
 8008874:	4d05      	ldr	r5, [pc, #20]	@ (800888c <_sbrk_r+0x1c>)
 8008876:	4604      	mov	r4, r0
 8008878:	4608      	mov	r0, r1
 800887a:	602b      	str	r3, [r5, #0]
 800887c:	f7fa feb8 	bl	80035f0 <_sbrk>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_sbrk_r+0x1a>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_sbrk_r+0x1a>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	200008f8 	.word	0x200008f8

08008890 <memchr>:
 8008890:	4603      	mov	r3, r0
 8008892:	b510      	push	{r4, lr}
 8008894:	b2c9      	uxtb	r1, r1
 8008896:	4402      	add	r2, r0
 8008898:	4293      	cmp	r3, r2
 800889a:	4618      	mov	r0, r3
 800889c:	d101      	bne.n	80088a2 <memchr+0x12>
 800889e:	2000      	movs	r0, #0
 80088a0:	e003      	b.n	80088aa <memchr+0x1a>
 80088a2:	7804      	ldrb	r4, [r0, #0]
 80088a4:	3301      	adds	r3, #1
 80088a6:	428c      	cmp	r4, r1
 80088a8:	d1f6      	bne.n	8008898 <memchr+0x8>
 80088aa:	bd10      	pop	{r4, pc}

080088ac <_realloc_r>:
 80088ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b0:	4607      	mov	r7, r0
 80088b2:	4614      	mov	r4, r2
 80088b4:	460d      	mov	r5, r1
 80088b6:	b921      	cbnz	r1, 80088c2 <_realloc_r+0x16>
 80088b8:	4611      	mov	r1, r2
 80088ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80088be:	f7ff bc63 	b.w	8008188 <_malloc_r>
 80088c2:	b92a      	cbnz	r2, 80088d0 <_realloc_r+0x24>
 80088c4:	f7ff fbf6 	bl	80080b4 <_free_r>
 80088c8:	4625      	mov	r5, r4
 80088ca:	4628      	mov	r0, r5
 80088cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d0:	f000 f81a 	bl	8008908 <_malloc_usable_size_r>
 80088d4:	4284      	cmp	r4, r0
 80088d6:	4606      	mov	r6, r0
 80088d8:	d802      	bhi.n	80088e0 <_realloc_r+0x34>
 80088da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80088de:	d8f4      	bhi.n	80088ca <_realloc_r+0x1e>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4638      	mov	r0, r7
 80088e4:	f7ff fc50 	bl	8008188 <_malloc_r>
 80088e8:	4680      	mov	r8, r0
 80088ea:	b908      	cbnz	r0, 80088f0 <_realloc_r+0x44>
 80088ec:	4645      	mov	r5, r8
 80088ee:	e7ec      	b.n	80088ca <_realloc_r+0x1e>
 80088f0:	42b4      	cmp	r4, r6
 80088f2:	4622      	mov	r2, r4
 80088f4:	4629      	mov	r1, r5
 80088f6:	bf28      	it	cs
 80088f8:	4632      	movcs	r2, r6
 80088fa:	f7ff fbcd 	bl	8008098 <memcpy>
 80088fe:	4629      	mov	r1, r5
 8008900:	4638      	mov	r0, r7
 8008902:	f7ff fbd7 	bl	80080b4 <_free_r>
 8008906:	e7f1      	b.n	80088ec <_realloc_r+0x40>

08008908 <_malloc_usable_size_r>:
 8008908:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800890c:	1f18      	subs	r0, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	bfbc      	itt	lt
 8008912:	580b      	ldrlt	r3, [r1, r0]
 8008914:	18c0      	addlt	r0, r0, r3
 8008916:	4770      	bx	lr

08008918 <_init>:
 8008918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891a:	bf00      	nop
 800891c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800891e:	bc08      	pop	{r3}
 8008920:	469e      	mov	lr, r3
 8008922:	4770      	bx	lr

08008924 <_fini>:
 8008924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008926:	bf00      	nop
 8008928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892a:	bc08      	pop	{r3}
 800892c:	469e      	mov	lr, r3
 800892e:	4770      	bx	lr
